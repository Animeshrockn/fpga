#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_func_bus_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_func_bus_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_func_bus_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_func_bus_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_func_bus_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_func_bus_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_func_bus_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_func_bus_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_func_bus_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_func_bus_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_func_bus_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_func_bus_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_func_bus_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_func_bus_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_func_bus_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_func_bus_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_func_bus_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_func_bus_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_func_bus_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_func_bus_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_func_bus_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_func_bus_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_func_bus_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_func_bus_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_func_bus_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_func_bus_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_func_bus_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_func_bus_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_func_bus_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_func_bus_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_func_bus_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_func_bus_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_func_bus_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_func_bus_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_func_bus_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_func_bus_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_func_bus_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_func_bus_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_func_bus_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_func_bus_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_func_bus_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_func_bus_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_func_bus_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_func_bus_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_func_bus_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("alpha", 32, hls_in, 4, "ap_none", "in_data", 1),
	Port_Property("beta", 32, hls_in, 5, "ap_none", "in_data", 1),
	Port_Property("s_axi_ctrl_bus_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_AWADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_ARADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_ctrl_bus_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "kernel_gemm";
