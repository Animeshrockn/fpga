// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel_gemm,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.913750,HLS_SYN_LAT=257731620865,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1729,HLS_SYN_LUT=1888,HLS_VERSION=2020_1}" *)

module kernel_gemm (
        ap_clk,
        ap_rst_n,
        m_axi_func_bus_AWVALID,
        m_axi_func_bus_AWREADY,
        m_axi_func_bus_AWADDR,
        m_axi_func_bus_AWID,
        m_axi_func_bus_AWLEN,
        m_axi_func_bus_AWSIZE,
        m_axi_func_bus_AWBURST,
        m_axi_func_bus_AWLOCK,
        m_axi_func_bus_AWCACHE,
        m_axi_func_bus_AWPROT,
        m_axi_func_bus_AWQOS,
        m_axi_func_bus_AWREGION,
        m_axi_func_bus_AWUSER,
        m_axi_func_bus_WVALID,
        m_axi_func_bus_WREADY,
        m_axi_func_bus_WDATA,
        m_axi_func_bus_WSTRB,
        m_axi_func_bus_WLAST,
        m_axi_func_bus_WID,
        m_axi_func_bus_WUSER,
        m_axi_func_bus_ARVALID,
        m_axi_func_bus_ARREADY,
        m_axi_func_bus_ARADDR,
        m_axi_func_bus_ARID,
        m_axi_func_bus_ARLEN,
        m_axi_func_bus_ARSIZE,
        m_axi_func_bus_ARBURST,
        m_axi_func_bus_ARLOCK,
        m_axi_func_bus_ARCACHE,
        m_axi_func_bus_ARPROT,
        m_axi_func_bus_ARQOS,
        m_axi_func_bus_ARREGION,
        m_axi_func_bus_ARUSER,
        m_axi_func_bus_RVALID,
        m_axi_func_bus_RREADY,
        m_axi_func_bus_RDATA,
        m_axi_func_bus_RLAST,
        m_axi_func_bus_RID,
        m_axi_func_bus_RUSER,
        m_axi_func_bus_RRESP,
        m_axi_func_bus_BVALID,
        m_axi_func_bus_BREADY,
        m_axi_func_bus_BRESP,
        m_axi_func_bus_BID,
        m_axi_func_bus_BUSER,
        alpha,
        beta,
        s_axi_ctrl_bus_AWVALID,
        s_axi_ctrl_bus_AWREADY,
        s_axi_ctrl_bus_AWADDR,
        s_axi_ctrl_bus_WVALID,
        s_axi_ctrl_bus_WREADY,
        s_axi_ctrl_bus_WDATA,
        s_axi_ctrl_bus_WSTRB,
        s_axi_ctrl_bus_ARVALID,
        s_axi_ctrl_bus_ARREADY,
        s_axi_ctrl_bus_ARADDR,
        s_axi_ctrl_bus_RVALID,
        s_axi_ctrl_bus_RREADY,
        s_axi_ctrl_bus_RDATA,
        s_axi_ctrl_bus_RRESP,
        s_axi_ctrl_bus_BVALID,
        s_axi_ctrl_bus_BREADY,
        s_axi_ctrl_bus_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_state3 = 50'd4;
parameter    ap_ST_fsm_state4 = 50'd8;
parameter    ap_ST_fsm_state5 = 50'd16;
parameter    ap_ST_fsm_state6 = 50'd32;
parameter    ap_ST_fsm_state7 = 50'd64;
parameter    ap_ST_fsm_state8 = 50'd128;
parameter    ap_ST_fsm_state9 = 50'd256;
parameter    ap_ST_fsm_state10 = 50'd512;
parameter    ap_ST_fsm_state11 = 50'd1024;
parameter    ap_ST_fsm_state12 = 50'd2048;
parameter    ap_ST_fsm_state13 = 50'd4096;
parameter    ap_ST_fsm_state14 = 50'd8192;
parameter    ap_ST_fsm_state15 = 50'd16384;
parameter    ap_ST_fsm_state16 = 50'd32768;
parameter    ap_ST_fsm_state17 = 50'd65536;
parameter    ap_ST_fsm_state18 = 50'd131072;
parameter    ap_ST_fsm_state19 = 50'd262144;
parameter    ap_ST_fsm_state20 = 50'd524288;
parameter    ap_ST_fsm_state21 = 50'd1048576;
parameter    ap_ST_fsm_state22 = 50'd2097152;
parameter    ap_ST_fsm_state23 = 50'd4194304;
parameter    ap_ST_fsm_state24 = 50'd8388608;
parameter    ap_ST_fsm_state25 = 50'd16777216;
parameter    ap_ST_fsm_state26 = 50'd33554432;
parameter    ap_ST_fsm_state27 = 50'd67108864;
parameter    ap_ST_fsm_state28 = 50'd134217728;
parameter    ap_ST_fsm_state29 = 50'd268435456;
parameter    ap_ST_fsm_state30 = 50'd536870912;
parameter    ap_ST_fsm_state31 = 50'd1073741824;
parameter    ap_ST_fsm_state32 = 50'd2147483648;
parameter    ap_ST_fsm_state33 = 50'd4294967296;
parameter    ap_ST_fsm_state34 = 50'd8589934592;
parameter    ap_ST_fsm_state35 = 50'd17179869184;
parameter    ap_ST_fsm_state36 = 50'd34359738368;
parameter    ap_ST_fsm_state37 = 50'd68719476736;
parameter    ap_ST_fsm_state38 = 50'd137438953472;
parameter    ap_ST_fsm_state39 = 50'd274877906944;
parameter    ap_ST_fsm_state40 = 50'd549755813888;
parameter    ap_ST_fsm_state41 = 50'd1099511627776;
parameter    ap_ST_fsm_state42 = 50'd2199023255552;
parameter    ap_ST_fsm_state43 = 50'd4398046511104;
parameter    ap_ST_fsm_state44 = 50'd8796093022208;
parameter    ap_ST_fsm_state45 = 50'd17592186044416;
parameter    ap_ST_fsm_state46 = 50'd35184372088832;
parameter    ap_ST_fsm_state47 = 50'd70368744177664;
parameter    ap_ST_fsm_state48 = 50'd140737488355328;
parameter    ap_ST_fsm_state49 = 50'd281474976710656;
parameter    ap_ST_fsm_state50 = 50'd562949953421312;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_FUNC_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_FUNC_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_FUNC_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_FUNC_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_FUNC_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_FUNC_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_FUNC_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_FUNC_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_FUNC_BUS_USER_VALUE = 0;
parameter    C_M_AXI_FUNC_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_FUNC_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_FUNC_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_func_bus_AWVALID;
input   m_axi_func_bus_AWREADY;
output  [C_M_AXI_FUNC_BUS_ADDR_WIDTH - 1:0] m_axi_func_bus_AWADDR;
output  [C_M_AXI_FUNC_BUS_ID_WIDTH - 1:0] m_axi_func_bus_AWID;
output  [7:0] m_axi_func_bus_AWLEN;
output  [2:0] m_axi_func_bus_AWSIZE;
output  [1:0] m_axi_func_bus_AWBURST;
output  [1:0] m_axi_func_bus_AWLOCK;
output  [3:0] m_axi_func_bus_AWCACHE;
output  [2:0] m_axi_func_bus_AWPROT;
output  [3:0] m_axi_func_bus_AWQOS;
output  [3:0] m_axi_func_bus_AWREGION;
output  [C_M_AXI_FUNC_BUS_AWUSER_WIDTH - 1:0] m_axi_func_bus_AWUSER;
output   m_axi_func_bus_WVALID;
input   m_axi_func_bus_WREADY;
output  [C_M_AXI_FUNC_BUS_DATA_WIDTH - 1:0] m_axi_func_bus_WDATA;
output  [C_M_AXI_FUNC_BUS_WSTRB_WIDTH - 1:0] m_axi_func_bus_WSTRB;
output   m_axi_func_bus_WLAST;
output  [C_M_AXI_FUNC_BUS_ID_WIDTH - 1:0] m_axi_func_bus_WID;
output  [C_M_AXI_FUNC_BUS_WUSER_WIDTH - 1:0] m_axi_func_bus_WUSER;
output   m_axi_func_bus_ARVALID;
input   m_axi_func_bus_ARREADY;
output  [C_M_AXI_FUNC_BUS_ADDR_WIDTH - 1:0] m_axi_func_bus_ARADDR;
output  [C_M_AXI_FUNC_BUS_ID_WIDTH - 1:0] m_axi_func_bus_ARID;
output  [7:0] m_axi_func_bus_ARLEN;
output  [2:0] m_axi_func_bus_ARSIZE;
output  [1:0] m_axi_func_bus_ARBURST;
output  [1:0] m_axi_func_bus_ARLOCK;
output  [3:0] m_axi_func_bus_ARCACHE;
output  [2:0] m_axi_func_bus_ARPROT;
output  [3:0] m_axi_func_bus_ARQOS;
output  [3:0] m_axi_func_bus_ARREGION;
output  [C_M_AXI_FUNC_BUS_ARUSER_WIDTH - 1:0] m_axi_func_bus_ARUSER;
input   m_axi_func_bus_RVALID;
output   m_axi_func_bus_RREADY;
input  [C_M_AXI_FUNC_BUS_DATA_WIDTH - 1:0] m_axi_func_bus_RDATA;
input   m_axi_func_bus_RLAST;
input  [C_M_AXI_FUNC_BUS_ID_WIDTH - 1:0] m_axi_func_bus_RID;
input  [C_M_AXI_FUNC_BUS_RUSER_WIDTH - 1:0] m_axi_func_bus_RUSER;
input  [1:0] m_axi_func_bus_RRESP;
input   m_axi_func_bus_BVALID;
output   m_axi_func_bus_BREADY;
input  [1:0] m_axi_func_bus_BRESP;
input  [C_M_AXI_FUNC_BUS_ID_WIDTH - 1:0] m_axi_func_bus_BID;
input  [C_M_AXI_FUNC_BUS_BUSER_WIDTH - 1:0] m_axi_func_bus_BUSER;
input  [31:0] alpha;
input  [31:0] beta;
input   s_axi_ctrl_bus_AWVALID;
output   s_axi_ctrl_bus_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_AWADDR;
input   s_axi_ctrl_bus_WVALID;
output   s_axi_ctrl_bus_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_ctrl_bus_WSTRB;
input   s_axi_ctrl_bus_ARVALID;
output   s_axi_ctrl_bus_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_ARADDR;
output   s_axi_ctrl_bus_RVALID;
input   s_axi_ctrl_bus_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_RDATA;
output  [1:0] s_axi_ctrl_bus_RRESP;
output   s_axi_ctrl_bus_BVALID;
input   s_axi_ctrl_bus_BREADY;
output  [1:0] s_axi_ctrl_bus_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] C;
wire   [31:0] A;
wire   [31:0] B;
reg    func_bus_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    func_bus_blk_n_AW;
wire    ap_CS_fsm_state9;
reg    func_bus_blk_n_B;
wire    ap_CS_fsm_state19;
reg    func_bus_blk_n_R;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln18_fu_332_p2;
reg    func_bus_blk_n_W;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state33;
reg    func_bus_AWVALID;
wire    func_bus_AWREADY;
reg   [31:0] func_bus_AWADDR;
reg   [31:0] func_bus_AWLEN;
reg    func_bus_WVALID;
wire    func_bus_WREADY;
reg   [31:0] func_bus_WDATA;
reg    func_bus_ARVALID;
wire    func_bus_ARREADY;
reg   [31:0] func_bus_ARADDR;
reg   [31:0] func_bus_ARLEN;
wire    func_bus_RVALID;
reg    func_bus_RREADY;
wire   [31:0] func_bus_RDATA;
wire    func_bus_RLAST;
wire   [0:0] func_bus_RID;
wire   [0:0] func_bus_RUSER;
wire   [1:0] func_bus_RRESP;
wire    func_bus_BVALID;
reg    func_bus_BREADY;
wire   [1:0] func_bus_BRESP;
wire   [0:0] func_bus_BID;
wire   [0:0] func_bus_BUSER;
wire   [31:0] grp_fu_236_p2;
reg   [31:0] reg_240;
wire    ap_CS_fsm_state14;
wire   [30:0] p_cast10_fu_257_p1;
reg   [30:0] p_cast10_reg_470;
wire   [30:0] p_cast9_fu_271_p1;
reg   [30:0] p_cast9_reg_475;
wire   [30:0] p_cast_fu_285_p1;
reg   [30:0] p_cast_reg_480;
wire   [11:0] i_fu_295_p2;
reg   [11:0] i_reg_489;
wire    ap_CS_fsm_state2;
wire   [21:0] shl_ln_fu_305_p3;
reg   [21:0] shl_ln_reg_494;
wire   [0:0] icmp_ln17_fu_289_p2;
wire   [30:0] add_ln19_fu_317_p2;
reg   [30:0] add_ln19_reg_500;
reg   [31:0] func_bus_addr_reg_505;
wire   [11:0] j_fu_338_p2;
reg   [11:0] j_reg_515;
reg    ap_block_state10;
reg   [31:0] func_bus_addr_read_reg_520;
wire   [21:0] zext_ln21_fu_344_p1;
reg   [21:0] zext_ln21_reg_525;
wire    ap_CS_fsm_state20;
wire   [11:0] j_1_fu_354_p2;
reg   [11:0] j_1_reg_533;
reg   [31:0] func_bus_addr_1_reg_538;
wire   [0:0] icmp_ln21_fu_348_p2;
wire   [11:0] k_fu_394_p2;
reg   [11:0] k_reg_548;
wire    ap_CS_fsm_state21;
wire   [30:0] add_ln23_4_fu_409_p2;
reg   [30:0] add_ln23_4_reg_553;
wire   [0:0] icmp_ln22_fu_388_p2;
wire   [30:0] add_ln23_5_fu_435_p2;
reg   [30:0] add_ln23_5_reg_558;
reg   [31:0] func_bus_addr_2_read_reg_575;
reg   [31:0] func_bus_addr_3_read_reg_580;
reg   [31:0] func_bus_addr_1_read_reg_585;
wire   [31:0] grp_fu_232_p2;
reg   [31:0] tmp_3_reg_590;
reg   [11:0] i_0_reg_188;
reg   [11:0] j_0_reg_199;
reg   [11:0] j1_0_reg_210;
reg   [11:0] k_0_reg_221;
wire   [63:0] zext_ln19_1_fu_322_p1;
wire   [63:0] zext_ln23_1_fu_374_p1;
wire   [63:0] zext_ln23_3_fu_440_p1;
wire   [63:0] zext_ln23_5_fu_450_p1;
wire    ap_CS_fsm_state38;
reg   [31:0] grp_fu_236_p0;
reg   [31:0] grp_fu_236_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state34;
wire   [29:0] tmp_6_fu_247_p4;
wire   [29:0] tmp_7_fu_261_p4;
wire   [29:0] tmp_8_fu_275_p4;
wire   [10:0] trunc_ln19_fu_301_p1;
wire   [30:0] zext_ln19_fu_313_p1;
wire   [21:0] add_ln23_fu_360_p2;
wire   [30:0] zext_ln23_fu_365_p1;
wire   [30:0] add_ln23_3_fu_369_p2;
wire   [21:0] zext_ln22_fu_384_p1;
wire   [21:0] add_ln23_1_fu_400_p2;
wire   [30:0] zext_ln23_2_fu_405_p1;
wire   [10:0] trunc_ln23_fu_414_p1;
wire   [21:0] shl_ln1_fu_418_p3;
wire   [21:0] add_ln23_2_fu_426_p2;
wire   [30:0] zext_ln23_4_fu_431_p1;
reg    grp_fu_232_ce;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
reg    grp_fu_236_ce;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
reg   [49:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 50'd1;
end

kernel_gemm_ctrl_bus_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
kernel_gemm_ctrl_bus_s_axi_U(
    .AWVALID(s_axi_ctrl_bus_AWVALID),
    .AWREADY(s_axi_ctrl_bus_AWREADY),
    .AWADDR(s_axi_ctrl_bus_AWADDR),
    .WVALID(s_axi_ctrl_bus_WVALID),
    .WREADY(s_axi_ctrl_bus_WREADY),
    .WDATA(s_axi_ctrl_bus_WDATA),
    .WSTRB(s_axi_ctrl_bus_WSTRB),
    .ARVALID(s_axi_ctrl_bus_ARVALID),
    .ARREADY(s_axi_ctrl_bus_ARREADY),
    .ARADDR(s_axi_ctrl_bus_ARADDR),
    .RVALID(s_axi_ctrl_bus_RVALID),
    .RREADY(s_axi_ctrl_bus_RREADY),
    .RDATA(s_axi_ctrl_bus_RDATA),
    .RRESP(s_axi_ctrl_bus_RRESP),
    .BVALID(s_axi_ctrl_bus_BVALID),
    .BREADY(s_axi_ctrl_bus_BREADY),
    .BRESP(s_axi_ctrl_bus_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .C(C),
    .A(A),
    .B(B)
);

kernel_gemm_func_bus_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_FUNC_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_FUNC_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_FUNC_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_FUNC_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_FUNC_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_FUNC_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_FUNC_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_FUNC_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_FUNC_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_FUNC_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_FUNC_BUS_CACHE_VALUE ))
kernel_gemm_func_bus_m_axi_U(
    .AWVALID(m_axi_func_bus_AWVALID),
    .AWREADY(m_axi_func_bus_AWREADY),
    .AWADDR(m_axi_func_bus_AWADDR),
    .AWID(m_axi_func_bus_AWID),
    .AWLEN(m_axi_func_bus_AWLEN),
    .AWSIZE(m_axi_func_bus_AWSIZE),
    .AWBURST(m_axi_func_bus_AWBURST),
    .AWLOCK(m_axi_func_bus_AWLOCK),
    .AWCACHE(m_axi_func_bus_AWCACHE),
    .AWPROT(m_axi_func_bus_AWPROT),
    .AWQOS(m_axi_func_bus_AWQOS),
    .AWREGION(m_axi_func_bus_AWREGION),
    .AWUSER(m_axi_func_bus_AWUSER),
    .WVALID(m_axi_func_bus_WVALID),
    .WREADY(m_axi_func_bus_WREADY),
    .WDATA(m_axi_func_bus_WDATA),
    .WSTRB(m_axi_func_bus_WSTRB),
    .WLAST(m_axi_func_bus_WLAST),
    .WID(m_axi_func_bus_WID),
    .WUSER(m_axi_func_bus_WUSER),
    .ARVALID(m_axi_func_bus_ARVALID),
    .ARREADY(m_axi_func_bus_ARREADY),
    .ARADDR(m_axi_func_bus_ARADDR),
    .ARID(m_axi_func_bus_ARID),
    .ARLEN(m_axi_func_bus_ARLEN),
    .ARSIZE(m_axi_func_bus_ARSIZE),
    .ARBURST(m_axi_func_bus_ARBURST),
    .ARLOCK(m_axi_func_bus_ARLOCK),
    .ARCACHE(m_axi_func_bus_ARCACHE),
    .ARPROT(m_axi_func_bus_ARPROT),
    .ARQOS(m_axi_func_bus_ARQOS),
    .ARREGION(m_axi_func_bus_ARREGION),
    .ARUSER(m_axi_func_bus_ARUSER),
    .RVALID(m_axi_func_bus_RVALID),
    .RREADY(m_axi_func_bus_RREADY),
    .RDATA(m_axi_func_bus_RDATA),
    .RLAST(m_axi_func_bus_RLAST),
    .RID(m_axi_func_bus_RID),
    .RUSER(m_axi_func_bus_RUSER),
    .RRESP(m_axi_func_bus_RRESP),
    .BVALID(m_axi_func_bus_BVALID),
    .BREADY(m_axi_func_bus_BREADY),
    .BRESP(m_axi_func_bus_BRESP),
    .BID(m_axi_func_bus_BID),
    .BUSER(m_axi_func_bus_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(func_bus_ARVALID),
    .I_ARREADY(func_bus_ARREADY),
    .I_ARADDR(func_bus_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(func_bus_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(func_bus_RVALID),
    .I_RREADY(func_bus_RREADY),
    .I_RDATA(func_bus_RDATA),
    .I_RID(func_bus_RID),
    .I_RUSER(func_bus_RUSER),
    .I_RRESP(func_bus_RRESP),
    .I_RLAST(func_bus_RLAST),
    .I_AWVALID(func_bus_AWVALID),
    .I_AWREADY(func_bus_AWREADY),
    .I_AWADDR(func_bus_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(func_bus_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(func_bus_WVALID),
    .I_WREADY(func_bus_WREADY),
    .I_WDATA(func_bus_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(func_bus_BVALID),
    .I_BREADY(func_bus_BREADY),
    .I_BRESP(func_bus_BRESP),
    .I_BID(func_bus_BID),
    .I_BUSER(func_bus_BUSER)
);

kernel_gemm_fadd_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fadd_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(func_bus_addr_1_read_reg_585),
    .din1(reg_240),
    .ce(grp_fu_232_ce),
    .dout(grp_fu_232_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_236_p0),
    .din1(grp_fu_236_p1),
    .ce(grp_fu_236_ce),
    .dout(grp_fu_236_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        i_0_reg_188 <= i_reg_489;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_188 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((func_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        j1_0_reg_210 <= 12'd0;
    end else if (((icmp_ln22_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        j1_0_reg_210 <= j_1_reg_533;
    end
end

always @ (posedge ap_clk) begin
    if (((func_bus_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        j_0_reg_199 <= j_reg_515;
    end else if (((func_bus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        j_0_reg_199 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((func_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        k_0_reg_221 <= k_reg_548;
    end else if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln21_fu_348_p2 == 1'd0))) begin
        k_0_reg_221 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln17_fu_289_p2 == 1'd0))) begin
        add_ln19_reg_500 <= add_ln19_fu_317_p2;
        shl_ln_reg_494[21 : 11] <= shl_ln_fu_305_p3[21 : 11];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln22_fu_388_p2 == 1'd0))) begin
        add_ln23_4_reg_553 <= add_ln23_4_fu_409_p2;
        add_ln23_5_reg_558 <= add_ln23_5_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        func_bus_addr_1_read_reg_585 <= func_bus_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln21_fu_348_p2 == 1'd0))) begin
        func_bus_addr_1_reg_538[30 : 0] <= zext_ln23_1_fu_374_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        func_bus_addr_2_read_reg_575 <= func_bus_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        func_bus_addr_3_read_reg_580 <= func_bus_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((func_bus_RVALID == 1'b0) & (icmp_ln18_fu_332_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln18_fu_332_p2 == 1'd0))) begin
        func_bus_addr_read_reg_520 <= func_bus_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        func_bus_addr_reg_505[30 : 0] <= zext_ln19_1_fu_322_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_489 <= i_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_1_reg_533 <= j_1_fu_354_p2;
        zext_ln21_reg_525[11 : 0] <= zext_ln21_fu_344_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((func_bus_RVALID == 1'b0) & (icmp_ln18_fu_332_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10))) begin
        j_reg_515 <= j_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        k_reg_548 <= k_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cast10_reg_470[29 : 0] <= p_cast10_fu_257_p1[29 : 0];
        p_cast9_reg_475[29 : 0] <= p_cast9_fu_271_p1[29 : 0];
        p_cast_reg_480[29 : 0] <= p_cast_fu_285_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)))) begin
        reg_240 <= grp_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((func_bus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        tmp_3_reg_590 <= grp_fu_232_p2;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((func_bus_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            func_bus_ARADDR = func_bus_addr_1_reg_538;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            func_bus_ARADDR = zext_ln23_5_fu_450_p1;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            func_bus_ARADDR = zext_ln23_3_fu_440_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            func_bus_ARADDR = zext_ln19_1_fu_322_p1;
        end else begin
            func_bus_ARADDR = 'bx;
        end
    end else begin
        func_bus_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30)))) begin
        func_bus_ARLEN = 32'd1;
    end else if (((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        func_bus_ARLEN = 32'd2048;
    end else begin
        func_bus_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        func_bus_ARVALID = 1'b1;
    end else begin
        func_bus_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((func_bus_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state44)) begin
            func_bus_AWADDR = func_bus_addr_1_reg_538;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            func_bus_AWADDR = func_bus_addr_reg_505;
        end else begin
            func_bus_AWADDR = 'bx;
        end
    end else begin
        func_bus_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((func_bus_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state44)) begin
            func_bus_AWLEN = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            func_bus_AWLEN = 32'd2048;
        end else begin
            func_bus_AWLEN = 'bx;
        end
    end else begin
        func_bus_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((func_bus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((func_bus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        func_bus_AWVALID = 1'b1;
    end else begin
        func_bus_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((func_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((func_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        func_bus_BREADY = 1'b1;
    end else begin
        func_bus_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | (~((func_bus_RVALID == 1'b0) & (icmp_ln18_fu_332_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln18_fu_332_p2 == 1'd0)))) begin
        func_bus_RREADY = 1'b1;
    end else begin
        func_bus_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        func_bus_WDATA = tmp_3_reg_590;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        func_bus_WDATA = reg_240;
    end else begin
        func_bus_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((func_bus_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((func_bus_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        func_bus_WVALID = 1'b1;
    end else begin
        func_bus_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3))) begin
        func_bus_blk_n_AR = m_axi_func_bus_ARREADY;
    end else begin
        func_bus_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state9))) begin
        func_bus_blk_n_AW = m_axi_func_bus_AWREADY;
    end else begin
        func_bus_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state19))) begin
        func_bus_blk_n_B = m_axi_func_bus_BVALID;
    end else begin
        func_bus_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state37) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln18_fu_332_p2 == 1'd0)))) begin
        func_bus_blk_n_R = m_axi_func_bus_RVALID;
    end else begin
        func_bus_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state15))) begin
        func_bus_blk_n_W = m_axi_func_bus_WREADY;
    end else begin
        func_bus_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | ((func_bus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)))) begin
        grp_fu_232_ce = 1'b1;
    end else begin
        grp_fu_232_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | ((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30)))) begin
        grp_fu_236_ce = 1'b1;
    end else begin
        grp_fu_236_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_236_p0 = reg_240;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_236_p0 = func_bus_addr_2_read_reg_575;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_236_p0 = func_bus_addr_read_reg_520;
    end else begin
        grp_fu_236_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_236_p1 = func_bus_addr_3_read_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_236_p1 = alpha;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_236_p1 = beta;
    end else begin
        grp_fu_236_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((func_bus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((func_bus_RVALID == 1'b0) & (icmp_ln18_fu_332_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln18_fu_332_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if ((~((func_bus_RVALID == 1'b0) & (icmp_ln18_fu_332_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln18_fu_332_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((func_bus_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((func_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln21_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln22_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((func_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((func_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((func_bus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((func_bus_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((func_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_317_p2 = (p_cast_reg_480 + zext_ln19_fu_313_p1);

assign add_ln23_1_fu_400_p2 = (shl_ln_reg_494 + zext_ln22_fu_384_p1);

assign add_ln23_2_fu_426_p2 = (zext_ln21_reg_525 + shl_ln1_fu_418_p3);

assign add_ln23_3_fu_369_p2 = (zext_ln23_fu_365_p1 + p_cast_reg_480);

assign add_ln23_4_fu_409_p2 = (p_cast9_reg_475 + zext_ln23_2_fu_405_p1);

assign add_ln23_5_fu_435_p2 = (p_cast10_reg_470 + zext_ln23_4_fu_431_p1);

assign add_ln23_fu_360_p2 = (zext_ln21_fu_344_p1 + shl_ln_reg_494);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10 = ((func_bus_RVALID == 1'b0) & (icmp_ln18_fu_332_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_295_p2 = (i_0_reg_188 + 12'd1);

assign icmp_ln17_fu_289_p2 = ((i_0_reg_188 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_332_p2 = ((j_0_reg_199 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_348_p2 = ((j1_0_reg_210 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_388_p2 = ((k_0_reg_221 == 12'd2048) ? 1'b1 : 1'b0);

assign j_1_fu_354_p2 = (j1_0_reg_210 + 12'd1);

assign j_fu_338_p2 = (j_0_reg_199 + 12'd1);

assign k_fu_394_p2 = (k_0_reg_221 + 12'd1);

assign p_cast10_fu_257_p1 = tmp_6_fu_247_p4;

assign p_cast9_fu_271_p1 = tmp_7_fu_261_p4;

assign p_cast_fu_285_p1 = tmp_8_fu_275_p4;

assign shl_ln1_fu_418_p3 = {{trunc_ln23_fu_414_p1}, {11'd0}};

assign shl_ln_fu_305_p3 = {{trunc_ln19_fu_301_p1}, {11'd0}};

assign tmp_6_fu_247_p4 = {{B[31:2]}};

assign tmp_7_fu_261_p4 = {{A[31:2]}};

assign tmp_8_fu_275_p4 = {{C[31:2]}};

assign trunc_ln19_fu_301_p1 = i_0_reg_188[10:0];

assign trunc_ln23_fu_414_p1 = k_0_reg_221[10:0];

assign zext_ln19_1_fu_322_p1 = add_ln19_reg_500;

assign zext_ln19_fu_313_p1 = shl_ln_fu_305_p3;

assign zext_ln21_fu_344_p1 = j1_0_reg_210;

assign zext_ln22_fu_384_p1 = k_0_reg_221;

assign zext_ln23_1_fu_374_p1 = add_ln23_3_fu_369_p2;

assign zext_ln23_2_fu_405_p1 = add_ln23_1_fu_400_p2;

assign zext_ln23_3_fu_440_p1 = add_ln23_4_reg_553;

assign zext_ln23_4_fu_431_p1 = add_ln23_2_fu_426_p2;

assign zext_ln23_5_fu_450_p1 = add_ln23_5_reg_558;

assign zext_ln23_fu_365_p1 = add_ln23_fu_360_p2;

always @ (posedge ap_clk) begin
    p_cast10_reg_470[30] <= 1'b0;
    p_cast9_reg_475[30] <= 1'b0;
    p_cast_reg_480[30] <= 1'b0;
    shl_ln_reg_494[10:0] <= 11'b00000000000;
    func_bus_addr_reg_505[31] <= 1'b0;
    zext_ln21_reg_525[21:12] <= 10'b0000000000;
    func_bus_addr_1_reg_538[31] <= 1'b0;
end

endmodule //kernel_gemm
