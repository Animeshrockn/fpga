-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_gemm is
generic (
    C_M_AXI_FUNC_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_FUNC_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_FUNC_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FUNC_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_FUNC_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FUNC_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FUNC_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FUNC_BUS_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_FUNC_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_FUNC_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_FUNC_BUS_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_func_bus_AWVALID : OUT STD_LOGIC;
    m_axi_func_bus_AWREADY : IN STD_LOGIC;
    m_axi_func_bus_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_func_bus_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_ID_WIDTH-1 downto 0);
    m_axi_func_bus_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_func_bus_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_func_bus_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_func_bus_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_func_bus_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_func_bus_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_func_bus_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_func_bus_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_func_bus_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_func_bus_WVALID : OUT STD_LOGIC;
    m_axi_func_bus_WREADY : IN STD_LOGIC;
    m_axi_func_bus_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_DATA_WIDTH-1 downto 0);
    m_axi_func_bus_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_func_bus_WLAST : OUT STD_LOGIC;
    m_axi_func_bus_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_ID_WIDTH-1 downto 0);
    m_axi_func_bus_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_func_bus_ARVALID : OUT STD_LOGIC;
    m_axi_func_bus_ARREADY : IN STD_LOGIC;
    m_axi_func_bus_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_func_bus_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_ID_WIDTH-1 downto 0);
    m_axi_func_bus_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_func_bus_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_func_bus_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_func_bus_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_func_bus_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_func_bus_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_func_bus_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_func_bus_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_func_bus_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_func_bus_RVALID : IN STD_LOGIC;
    m_axi_func_bus_RREADY : OUT STD_LOGIC;
    m_axi_func_bus_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_DATA_WIDTH-1 downto 0);
    m_axi_func_bus_RLAST : IN STD_LOGIC;
    m_axi_func_bus_RID : IN STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_ID_WIDTH-1 downto 0);
    m_axi_func_bus_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_func_bus_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_func_bus_BVALID : IN STD_LOGIC;
    m_axi_func_bus_BREADY : OUT STD_LOGIC;
    m_axi_func_bus_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_func_bus_BID : IN STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_ID_WIDTH-1 downto 0);
    m_axi_func_bus_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_FUNC_BUS_BUSER_WIDTH-1 downto 0);
    alpha : IN STD_LOGIC_VECTOR (31 downto 0);
    beta : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_ctrl_bus_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_bus_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_RREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_bus_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_BREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of kernel_gemm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_gemm,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.913750,HLS_SYN_LAT=257731620865,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1729,HLS_SYN_LUT=1888,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (49 downto 0) := "00000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (49 downto 0) := "00000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (49 downto 0) := "00000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (49 downto 0) := "00000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (49 downto 0) := "00000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (49 downto 0) := "00000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (49 downto 0) := "00001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (49 downto 0) := "00010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (49 downto 0) := "00100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (49 downto 0) := "01000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (49 downto 0) := "10000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal C : STD_LOGIC_VECTOR (31 downto 0);
    signal A : STD_LOGIC_VECTOR (31 downto 0);
    signal B : STD_LOGIC_VECTOR (31 downto 0);
    signal func_bus_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal func_bus_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal func_bus_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal func_bus_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln18_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal func_bus_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal func_bus_AWVALID : STD_LOGIC;
    signal func_bus_AWREADY : STD_LOGIC;
    signal func_bus_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal func_bus_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal func_bus_WVALID : STD_LOGIC;
    signal func_bus_WREADY : STD_LOGIC;
    signal func_bus_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal func_bus_ARVALID : STD_LOGIC;
    signal func_bus_ARREADY : STD_LOGIC;
    signal func_bus_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal func_bus_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal func_bus_RVALID : STD_LOGIC;
    signal func_bus_RREADY : STD_LOGIC;
    signal func_bus_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal func_bus_RLAST : STD_LOGIC;
    signal func_bus_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal func_bus_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal func_bus_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal func_bus_BVALID : STD_LOGIC;
    signal func_bus_BREADY : STD_LOGIC;
    signal func_bus_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal func_bus_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal func_bus_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_cast10_fu_257_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast10_reg_470 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast9_fu_271_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast9_reg_475 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast_fu_285_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast_reg_480 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_fu_295_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_489 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_305_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_reg_494 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln17_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_fu_317_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln19_reg_500 : STD_LOGIC_VECTOR (30 downto 0);
    signal func_bus_addr_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_338_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_reg_515 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal func_bus_addr_read_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln21_fu_344_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln21_reg_525 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal j_1_fu_354_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_reg_533 : STD_LOGIC_VECTOR (11 downto 0);
    signal func_bus_addr_1_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln21_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_394_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_reg_548 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln23_4_fu_409_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln23_4_reg_553 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln22_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_5_fu_435_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln23_5_reg_558 : STD_LOGIC_VECTOR (30 downto 0);
    signal func_bus_addr_2_read_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal func_bus_addr_3_read_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal func_bus_addr_1_read_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_188 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_0_reg_199 : STD_LOGIC_VECTOR (11 downto 0);
    signal j1_0_reg_210 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_0_reg_221 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln19_1_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_3_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_5_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_6_fu_247_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_fu_261_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_8_fu_275_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln19_fu_301_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln19_fu_313_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln23_fu_360_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln23_fu_365_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln23_3_fu_369_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln22_fu_384_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln23_1_fu_400_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln23_2_fu_405_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln23_fu_414_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1_fu_418_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln23_2_fu_426_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln23_4_fu_431_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_232_ce : STD_LOGIC;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_236_ce : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (49 downto 0);

    component kernel_gemm_fadd_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_gemm_fmul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_gemm_ctrl_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        C : OUT STD_LOGIC_VECTOR (31 downto 0);
        A : OUT STD_LOGIC_VECTOR (31 downto 0);
        B : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_gemm_func_bus_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    kernel_gemm_ctrl_bus_s_axi_U : component kernel_gemm_ctrl_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_bus_AWVALID,
        AWREADY => s_axi_ctrl_bus_AWREADY,
        AWADDR => s_axi_ctrl_bus_AWADDR,
        WVALID => s_axi_ctrl_bus_WVALID,
        WREADY => s_axi_ctrl_bus_WREADY,
        WDATA => s_axi_ctrl_bus_WDATA,
        WSTRB => s_axi_ctrl_bus_WSTRB,
        ARVALID => s_axi_ctrl_bus_ARVALID,
        ARREADY => s_axi_ctrl_bus_ARREADY,
        ARADDR => s_axi_ctrl_bus_ARADDR,
        RVALID => s_axi_ctrl_bus_RVALID,
        RREADY => s_axi_ctrl_bus_RREADY,
        RDATA => s_axi_ctrl_bus_RDATA,
        RRESP => s_axi_ctrl_bus_RRESP,
        BVALID => s_axi_ctrl_bus_BVALID,
        BREADY => s_axi_ctrl_bus_BREADY,
        BRESP => s_axi_ctrl_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        C => C,
        A => A,
        B => B);

    kernel_gemm_func_bus_m_axi_U : component kernel_gemm_func_bus_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_FUNC_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_FUNC_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_FUNC_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_FUNC_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_FUNC_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_FUNC_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_FUNC_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_FUNC_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_FUNC_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_FUNC_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_FUNC_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_func_bus_AWVALID,
        AWREADY => m_axi_func_bus_AWREADY,
        AWADDR => m_axi_func_bus_AWADDR,
        AWID => m_axi_func_bus_AWID,
        AWLEN => m_axi_func_bus_AWLEN,
        AWSIZE => m_axi_func_bus_AWSIZE,
        AWBURST => m_axi_func_bus_AWBURST,
        AWLOCK => m_axi_func_bus_AWLOCK,
        AWCACHE => m_axi_func_bus_AWCACHE,
        AWPROT => m_axi_func_bus_AWPROT,
        AWQOS => m_axi_func_bus_AWQOS,
        AWREGION => m_axi_func_bus_AWREGION,
        AWUSER => m_axi_func_bus_AWUSER,
        WVALID => m_axi_func_bus_WVALID,
        WREADY => m_axi_func_bus_WREADY,
        WDATA => m_axi_func_bus_WDATA,
        WSTRB => m_axi_func_bus_WSTRB,
        WLAST => m_axi_func_bus_WLAST,
        WID => m_axi_func_bus_WID,
        WUSER => m_axi_func_bus_WUSER,
        ARVALID => m_axi_func_bus_ARVALID,
        ARREADY => m_axi_func_bus_ARREADY,
        ARADDR => m_axi_func_bus_ARADDR,
        ARID => m_axi_func_bus_ARID,
        ARLEN => m_axi_func_bus_ARLEN,
        ARSIZE => m_axi_func_bus_ARSIZE,
        ARBURST => m_axi_func_bus_ARBURST,
        ARLOCK => m_axi_func_bus_ARLOCK,
        ARCACHE => m_axi_func_bus_ARCACHE,
        ARPROT => m_axi_func_bus_ARPROT,
        ARQOS => m_axi_func_bus_ARQOS,
        ARREGION => m_axi_func_bus_ARREGION,
        ARUSER => m_axi_func_bus_ARUSER,
        RVALID => m_axi_func_bus_RVALID,
        RREADY => m_axi_func_bus_RREADY,
        RDATA => m_axi_func_bus_RDATA,
        RLAST => m_axi_func_bus_RLAST,
        RID => m_axi_func_bus_RID,
        RUSER => m_axi_func_bus_RUSER,
        RRESP => m_axi_func_bus_RRESP,
        BVALID => m_axi_func_bus_BVALID,
        BREADY => m_axi_func_bus_BREADY,
        BRESP => m_axi_func_bus_BRESP,
        BID => m_axi_func_bus_BID,
        BUSER => m_axi_func_bus_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => func_bus_ARVALID,
        I_ARREADY => func_bus_ARREADY,
        I_ARADDR => func_bus_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => func_bus_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => func_bus_RVALID,
        I_RREADY => func_bus_RREADY,
        I_RDATA => func_bus_RDATA,
        I_RID => func_bus_RID,
        I_RUSER => func_bus_RUSER,
        I_RRESP => func_bus_RRESP,
        I_RLAST => func_bus_RLAST,
        I_AWVALID => func_bus_AWVALID,
        I_AWREADY => func_bus_AWREADY,
        I_AWADDR => func_bus_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => func_bus_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => func_bus_WVALID,
        I_WREADY => func_bus_WREADY,
        I_WDATA => func_bus_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => func_bus_BVALID,
        I_BREADY => func_bus_BREADY,
        I_BRESP => func_bus_BRESP,
        I_BID => func_bus_BID,
        I_BUSER => func_bus_BUSER);

    kernel_gemm_fadd_bkb_U1 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => func_bus_addr_1_read_reg_585,
        din1 => reg_240,
        ce => grp_fu_232_ce,
        dout => grp_fu_232_p2);

    kernel_gemm_fmul_cud_U2 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_236_p0,
        din1 => grp_fu_236_p1,
        ce => grp_fu_236_ce,
        dout => grp_fu_236_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_0_reg_188 <= i_reg_489;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_188 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j1_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((func_bus_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j1_0_reg_210 <= ap_const_lv12_0;
            elsif (((icmp_ln22_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                j1_0_reg_210 <= j_1_reg_533;
            end if; 
        end if;
    end process;

    j_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((func_bus_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j_0_reg_199 <= j_reg_515;
            elsif (((func_bus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_0_reg_199 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    k_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((func_bus_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                k_0_reg_221 <= k_reg_548;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln21_fu_348_p2 = ap_const_lv1_0))) then 
                k_0_reg_221 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_289_p2 = ap_const_lv1_0))) then
                add_ln19_reg_500 <= add_ln19_fu_317_p2;
                    shl_ln_reg_494(21 downto 11) <= shl_ln_fu_305_p3(21 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln22_fu_388_p2 = ap_const_lv1_0))) then
                add_ln23_4_reg_553 <= add_ln23_4_fu_409_p2;
                add_ln23_5_reg_558 <= add_ln23_5_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                func_bus_addr_1_read_reg_585 <= func_bus_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln21_fu_348_p2 = ap_const_lv1_0))) then
                    func_bus_addr_1_reg_538(30 downto 0) <= zext_ln23_1_fu_374_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                func_bus_addr_2_read_reg_575 <= func_bus_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                func_bus_addr_3_read_reg_580 <= func_bus_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((func_bus_RVALID = ap_const_logic_0) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0))) then
                func_bus_addr_read_reg_520 <= func_bus_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    func_bus_addr_reg_505(30 downto 0) <= zext_ln19_1_fu_322_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_489 <= i_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                j_1_reg_533 <= j_1_fu_354_p2;
                    zext_ln21_reg_525(11 downto 0) <= zext_ln21_fu_344_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((func_bus_RVALID = ap_const_logic_0) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                j_reg_515 <= j_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                k_reg_548 <= k_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    p_cast10_reg_470(29 downto 0) <= p_cast10_fu_257_p1(29 downto 0);
                    p_cast9_reg_475(29 downto 0) <= p_cast9_fu_271_p1(29 downto 0);
                    p_cast_reg_480(29 downto 0) <= p_cast_fu_285_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then
                reg_240 <= grp_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((func_bus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                tmp_3_reg_590 <= grp_fu_232_p2;
            end if;
        end if;
    end process;
    p_cast10_reg_470(30) <= '0';
    p_cast9_reg_475(30) <= '0';
    p_cast_reg_480(30) <= '0';
    shl_ln_reg_494(10 downto 0) <= "00000000000";
    func_bus_addr_reg_505(31) <= '0';
    zext_ln21_reg_525(21 downto 12) <= "0000000000";
    func_bus_addr_1_reg_538(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state10, icmp_ln18_fu_332_p2, ap_CS_fsm_state15, ap_CS_fsm_state30, ap_CS_fsm_state37, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state50, ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state26, ap_CS_fsm_state33, func_bus_AWREADY, func_bus_WREADY, func_bus_ARREADY, func_bus_RVALID, func_bus_BVALID, ap_CS_fsm_state2, icmp_ln17_fu_289_p2, ap_CS_fsm_state20, icmp_ln21_fu_348_p2, ap_CS_fsm_state21, icmp_ln22_fu_388_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln17_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((func_bus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((func_bus_RVALID = ap_const_logic_0) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_fu_332_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif ((not(((func_bus_RVALID = ap_const_logic_0) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((func_bus_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((func_bus_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln21_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln22_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((func_bus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((func_bus_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((func_bus_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_fu_317_p2 <= std_logic_vector(unsigned(p_cast_reg_480) + unsigned(zext_ln19_fu_313_p1));
    add_ln23_1_fu_400_p2 <= std_logic_vector(unsigned(shl_ln_reg_494) + unsigned(zext_ln22_fu_384_p1));
    add_ln23_2_fu_426_p2 <= std_logic_vector(unsigned(zext_ln21_reg_525) + unsigned(shl_ln1_fu_418_p3));
    add_ln23_3_fu_369_p2 <= std_logic_vector(unsigned(zext_ln23_fu_365_p1) + unsigned(p_cast_reg_480));
    add_ln23_4_fu_409_p2 <= std_logic_vector(unsigned(p_cast9_reg_475) + unsigned(zext_ln23_2_fu_405_p1));
    add_ln23_5_fu_435_p2 <= std_logic_vector(unsigned(p_cast10_reg_470) + unsigned(zext_ln23_4_fu_431_p1));
    add_ln23_fu_360_p2 <= std_logic_vector(unsigned(zext_ln21_fu_344_p1) + unsigned(shl_ln_reg_494));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_assign_proc : process(icmp_ln18_fu_332_p2, func_bus_RVALID)
    begin
                ap_block_state10 <= ((func_bus_RVALID = ap_const_logic_0) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_289_p2)
    begin
        if (((icmp_ln17_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_289_p2)
    begin
        if (((icmp_ln17_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    func_bus_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state22, ap_CS_fsm_state26, func_bus_ARREADY, func_bus_addr_1_reg_538, zext_ln19_1_fu_322_p1, zext_ln23_3_fu_440_p1, zext_ln23_5_fu_450_p1)
    begin
        if ((func_bus_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                func_bus_ARADDR <= func_bus_addr_1_reg_538;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                func_bus_ARADDR <= zext_ln23_5_fu_450_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                func_bus_ARADDR <= zext_ln23_3_fu_440_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                func_bus_ARADDR <= zext_ln19_1_fu_322_p1(32 - 1 downto 0);
            else 
                func_bus_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            func_bus_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    func_bus_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state22, ap_CS_fsm_state26, func_bus_ARREADY)
    begin
        if ((((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            func_bus_ARLEN <= ap_const_lv32_1;
        elsif (((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            func_bus_ARLEN <= ap_const_lv32_800;
        else 
            func_bus_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    func_bus_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state22, ap_CS_fsm_state26, func_bus_ARREADY)
    begin
        if ((((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            func_bus_ARVALID <= ap_const_logic_1;
        else 
            func_bus_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    func_bus_AWADDR_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state44, func_bus_AWREADY, func_bus_addr_reg_505, func_bus_addr_1_reg_538)
    begin
        if ((func_bus_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                func_bus_AWADDR <= func_bus_addr_1_reg_538;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                func_bus_AWADDR <= func_bus_addr_reg_505;
            else 
                func_bus_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            func_bus_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    func_bus_AWLEN_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state44, func_bus_AWREADY)
    begin
        if ((func_bus_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                func_bus_AWLEN <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                func_bus_AWLEN <= ap_const_lv32_800;
            else 
                func_bus_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            func_bus_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    func_bus_AWVALID_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state44, func_bus_AWREADY)
    begin
        if ((((func_bus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((func_bus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            func_bus_AWVALID <= ap_const_logic_1;
        else 
            func_bus_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    func_bus_BREADY_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state50, func_bus_BVALID)
    begin
        if ((((func_bus_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((func_bus_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            func_bus_BREADY <= ap_const_logic_1;
        else 
            func_bus_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    func_bus_RREADY_assign_proc : process(ap_CS_fsm_state10, icmp_ln18_fu_332_p2, ap_CS_fsm_state37, ap_CS_fsm_state29, ap_CS_fsm_state33, func_bus_RVALID)
    begin
        if ((((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or (not(((func_bus_RVALID = ap_const_logic_0) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0)))) then 
            func_bus_RREADY <= ap_const_logic_1;
        else 
            func_bus_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    func_bus_WDATA_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state45, reg_240, tmp_3_reg_590)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            func_bus_WDATA <= tmp_3_reg_590;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            func_bus_WDATA <= reg_240;
        else 
            func_bus_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    func_bus_WVALID_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state45, func_bus_WREADY)
    begin
        if ((((func_bus_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((func_bus_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            func_bus_WVALID <= ap_const_logic_1;
        else 
            func_bus_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    func_bus_blk_n_AR_assign_proc : process(m_axi_func_bus_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state22, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            func_bus_blk_n_AR <= m_axi_func_bus_ARREADY;
        else 
            func_bus_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    func_bus_blk_n_AW_assign_proc : process(m_axi_func_bus_AWREADY, ap_CS_fsm_state9, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            func_bus_blk_n_AW <= m_axi_func_bus_AWREADY;
        else 
            func_bus_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    func_bus_blk_n_B_assign_proc : process(m_axi_func_bus_BVALID, ap_CS_fsm_state19, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            func_bus_blk_n_B <= m_axi_func_bus_BVALID;
        else 
            func_bus_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    func_bus_blk_n_R_assign_proc : process(m_axi_func_bus_RVALID, ap_CS_fsm_state10, icmp_ln18_fu_332_p2, ap_CS_fsm_state37, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_fu_332_p2 = ap_const_lv1_0)))) then 
            func_bus_blk_n_R <= m_axi_func_bus_RVALID;
        else 
            func_bus_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    func_bus_blk_n_W_assign_proc : process(m_axi_func_bus_WREADY, ap_CS_fsm_state15, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            func_bus_blk_n_W <= m_axi_func_bus_WREADY;
        else 
            func_bus_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_232_ce_assign_proc : process(ap_CS_fsm_state44, func_bus_AWREADY, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((func_bus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            grp_fu_232_ce <= ap_const_logic_1;
        else 
            grp_fu_232_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_236_ce_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state37, ap_CS_fsm_state33, func_bus_ARREADY, func_bus_RVALID, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state34, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((func_bus_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((func_bus_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_236_ce <= ap_const_logic_1;
        else 
            grp_fu_236_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_236_p0_assign_proc : process(ap_CS_fsm_state30, reg_240, func_bus_addr_read_reg_520, func_bus_addr_2_read_reg_575, ap_CS_fsm_state11, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_236_p0 <= reg_240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_236_p0 <= func_bus_addr_2_read_reg_575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_236_p0 <= func_bus_addr_read_reg_520;
        else 
            grp_fu_236_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_236_p1_assign_proc : process(alpha, beta, ap_CS_fsm_state30, func_bus_addr_3_read_reg_580, ap_CS_fsm_state11, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_236_p1 <= func_bus_addr_3_read_reg_580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_236_p1 <= alpha;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_236_p1 <= beta;
        else 
            grp_fu_236_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_295_p2 <= std_logic_vector(unsigned(i_0_reg_188) + unsigned(ap_const_lv12_1));
    icmp_ln17_fu_289_p2 <= "1" when (i_0_reg_188 = ap_const_lv12_800) else "0";
    icmp_ln18_fu_332_p2 <= "1" when (j_0_reg_199 = ap_const_lv12_800) else "0";
    icmp_ln21_fu_348_p2 <= "1" when (j1_0_reg_210 = ap_const_lv12_800) else "0";
    icmp_ln22_fu_388_p2 <= "1" when (k_0_reg_221 = ap_const_lv12_800) else "0";
    j_1_fu_354_p2 <= std_logic_vector(unsigned(j1_0_reg_210) + unsigned(ap_const_lv12_1));
    j_fu_338_p2 <= std_logic_vector(unsigned(j_0_reg_199) + unsigned(ap_const_lv12_1));
    k_fu_394_p2 <= std_logic_vector(unsigned(k_0_reg_221) + unsigned(ap_const_lv12_1));
    p_cast10_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_247_p4),31));
    p_cast9_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_261_p4),31));
    p_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_275_p4),31));
    shl_ln1_fu_418_p3 <= (trunc_ln23_fu_414_p1 & ap_const_lv11_0);
    shl_ln_fu_305_p3 <= (trunc_ln19_fu_301_p1 & ap_const_lv11_0);
    tmp_6_fu_247_p4 <= B(31 downto 2);
    tmp_7_fu_261_p4 <= A(31 downto 2);
    tmp_8_fu_275_p4 <= C(31 downto 2);
    trunc_ln19_fu_301_p1 <= i_0_reg_188(11 - 1 downto 0);
    trunc_ln23_fu_414_p1 <= k_0_reg_221(11 - 1 downto 0);
    zext_ln19_1_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_reg_500),64));
    zext_ln19_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_305_p3),31));
    zext_ln21_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_210),22));
    zext_ln22_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_221),22));
    zext_ln23_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_3_fu_369_p2),64));
    zext_ln23_2_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_1_fu_400_p2),31));
    zext_ln23_3_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_4_reg_553),64));
    zext_ln23_4_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_2_fu_426_p2),31));
    zext_ln23_5_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_5_reg_558),64));
    zext_ln23_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_360_p2),31));
end behav;
