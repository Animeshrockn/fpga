// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel_gemm,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.913750,HLS_SYN_LAT=18161,HLS_SYN_TPT=none,HLS_SYN_MEM=119,HLS_SYN_DSP=131,HLS_SYN_FF=17885,HLS_SYN_LUT=14706,HLS_VERSION=2020_1}" *)

module kernel_gemm (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        alpha,
        beta,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 24'd4096;
parameter    ap_ST_fsm_state20 = 24'd8192;
parameter    ap_ST_fsm_state21 = 24'd16384;
parameter    ap_ST_fsm_state22 = 24'd32768;
parameter    ap_ST_fsm_state23 = 24'd65536;
parameter    ap_ST_fsm_state24 = 24'd131072;
parameter    ap_ST_fsm_state25 = 24'd262144;
parameter    ap_ST_fsm_state26 = 24'd524288;
parameter    ap_ST_fsm_state27 = 24'd1048576;
parameter    ap_ST_fsm_state28 = 24'd2097152;
parameter    ap_ST_fsm_state29 = 24'd4194304;
parameter    ap_ST_fsm_state30 = 24'd8388608;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] alpha;
input  [31:0] beta;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] C_V;
wire   [31:0] A_V;
wire   [31:0] B_V;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state11;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state24;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state25;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state30;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
wire   [31:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [0:0] gmem_ARID;
reg   [31:0] gmem_ARLEN;
reg   [2:0] gmem_ARSIZE;
reg   [1:0] gmem_ARBURST;
reg   [1:0] gmem_ARLOCK;
reg   [3:0] gmem_ARCACHE;
reg   [2:0] gmem_ARPROT;
reg   [3:0] gmem_ARQOS;
reg   [3:0] gmem_ARREGION;
reg   [0:0] gmem_ARUSER;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [511:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [4:0] ii20_0_reg_351;
reg   [25:0] B_V5_reg_1100;
reg   [25:0] A_V3_reg_1105;
wire   [26:0] p_cast_fu_511_p1;
reg   [26:0] p_cast_reg_1110;
wire   [4:0] add_ln71_fu_526_p2;
reg   [4:0] add_ln71_reg_1119;
wire    ap_CS_fsm_state2;
wire   [6:0] select_ln72_fu_540_p3;
reg   [6:0] select_ln72_reg_1124;
wire   [0:0] icmp_ln71_fu_520_p2;
wire   [6:0] select_ln71_fu_554_p3;
reg   [6:0] select_ln71_reg_1130;
reg   [1:0] trunc_ln78_1_reg_1138;
wire   [0:0] icmp_ln75_fu_572_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] ii_fu_578_p2;
reg   [4:0] ii_reg_1148;
wire   [26:0] add_ln180_fu_604_p2;
reg   [26:0] add_ln180_reg_1153;
reg   [511:0] gmem_addr_read_reg_1164;
wire   [0:0] icmp_ln84_fu_624_p2;
reg   [0:0] icmp_ln84_reg_1169;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state13_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_state15_pp0_stage0_iter2;
wire    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
wire    ap_block_state18_pp0_stage0_iter5;
wire    ap_block_state19_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln84_reg_1169_pp0_iter1_reg;
reg   [0:0] icmp_ln84_reg_1169_pp0_iter2_reg;
reg   [0:0] icmp_ln84_reg_1169_pp0_iter3_reg;
reg   [0:0] icmp_ln84_reg_1169_pp0_iter4_reg;
reg   [0:0] icmp_ln84_reg_1169_pp0_iter5_reg;
wire   [4:0] ii_1_fu_630_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] local_C_0_V_addr_1_reg_1178;
reg   [3:0] local_C_0_V_addr_1_reg_1178_pp0_iter1_reg;
reg   [3:0] local_C_0_V_addr_1_reg_1178_pp0_iter2_reg;
reg   [3:0] local_C_0_V_addr_1_reg_1178_pp0_iter3_reg;
reg   [3:0] local_C_0_V_addr_1_reg_1178_pp0_iter4_reg;
reg   [3:0] local_C_0_V_addr_1_reg_1178_pp0_iter5_reg;
wire   [31:0] trunc_ln681_fu_641_p1;
reg   [31:0] trunc_ln681_reg_1184;
reg   [31:0] p_Result_s_reg_1189;
reg   [31:0] p_Result_2_reg_1194;
reg   [31:0] p_Result_3_reg_1199;
reg   [31:0] p_Result_4_reg_1204;
reg   [31:0] p_Result_5_reg_1209;
reg   [31:0] p_Result_6_reg_1214;
reg   [31:0] p_Result_7_reg_1219;
reg   [31:0] p_Result_8_reg_1224;
reg   [31:0] p_Result_9_reg_1229;
reg   [31:0] p_Result_1_reg_1234;
reg   [31:0] p_Result_10_reg_1239;
reg   [31:0] p_Result_11_reg_1244;
reg   [31:0] p_Result_12_reg_1249;
reg   [31:0] p_Result_13_reg_1254;
reg   [31:0] p_Result_14_reg_1259;
wire   [31:0] grp_fu_407_p2;
reg   [31:0] tmp_s_reg_1344;
wire   [31:0] grp_fu_411_p2;
reg   [31:0] tmp_1_1_reg_1349;
wire   [31:0] grp_fu_415_p2;
reg   [31:0] tmp_1_2_reg_1354;
wire   [31:0] grp_fu_419_p2;
reg   [31:0] tmp_1_3_reg_1359;
wire   [31:0] grp_fu_423_p2;
reg   [31:0] tmp_1_4_reg_1364;
wire   [31:0] grp_fu_427_p2;
reg   [31:0] tmp_1_5_reg_1369;
wire   [31:0] grp_fu_431_p2;
reg   [31:0] tmp_1_6_reg_1374;
wire   [31:0] grp_fu_435_p2;
reg   [31:0] tmp_1_7_reg_1379;
wire   [31:0] grp_fu_439_p2;
reg   [31:0] tmp_1_8_reg_1384;
wire   [31:0] grp_fu_443_p2;
reg   [31:0] tmp_1_9_reg_1389;
wire   [31:0] grp_fu_447_p2;
reg   [31:0] tmp_1_s_reg_1394;
wire   [31:0] grp_fu_451_p2;
reg   [31:0] tmp_1_10_reg_1399;
wire   [31:0] grp_fu_455_p2;
reg   [31:0] tmp_1_11_reg_1404;
wire   [31:0] grp_fu_459_p2;
reg   [31:0] tmp_1_12_reg_1409;
wire   [31:0] grp_fu_463_p2;
reg   [31:0] tmp_1_13_reg_1414;
wire   [31:0] grp_fu_467_p2;
reg   [31:0] tmp_1_14_reg_1419;
wire   [2:0] index_fu_950_p2;
reg   [2:0] index_reg_1427;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln101_fu_956_p2;
reg   [0:0] icmp_ln101_reg_1432;
wire   [0:0] icmp_ln99_fu_944_p2;
wire   [6:0] shl_ln_fu_970_p3;
reg   [6:0] shl_ln_reg_1436;
wire   [0:0] xor_ln103_fu_979_p2;
reg   [0:0] xor_ln103_reg_1441;
wire   [0:0] grp_fu_474_p2;
reg   [0:0] icmp_ln108_reg_1446;
reg   [0:0] icmp_ln104_reg_1451;
wire   [4:0] ii_2_fu_1017_p2;
reg   [4:0] ii_2_reg_1459;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln115_fu_1011_p2;
wire   [26:0] add_ln180_2_fu_1048_p2;
reg   [26:0] add_ln180_2_reg_1469;
wire   [6:0] j_fu_1053_p2;
wire   [511:0] local_C_0_V_q1;
reg   [511:0] local_C_0_V_load_1_reg_1479;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [3:0] local_A_ping_0_V_address0;
reg    local_A_ping_0_V_ce0;
reg    local_A_ping_0_V_we0;
wire   [511:0] local_A_ping_0_V_q0;
reg   [3:0] local_B_ping_0_V_address0;
reg    local_B_ping_0_V_ce0;
reg    local_B_ping_0_V_we0;
wire   [511:0] local_B_ping_0_V_q0;
reg   [3:0] local_A_pong_0_V_address0;
reg    local_A_pong_0_V_ce0;
reg    local_A_pong_0_V_we0;
wire   [511:0] local_A_pong_0_V_q0;
reg   [3:0] local_B_pong_0_V_address0;
reg    local_B_pong_0_V_ce0;
reg    local_B_pong_0_V_we0;
wire   [511:0] local_B_pong_0_V_q0;
reg   [3:0] local_C_0_V_address0;
reg    local_C_0_V_ce0;
reg    local_C_0_V_we0;
wire   [511:0] local_C_0_V_q0;
reg   [3:0] local_C_0_V_address1;
reg    local_C_0_V_ce1;
reg    local_C_0_V_we1;
reg   [511:0] local_C_0_V_d1;
wire    grp_compute_fu_384_ap_start;
wire    grp_compute_fu_384_ap_done;
wire    grp_compute_fu_384_ap_idle;
wire    grp_compute_fu_384_ap_ready;
reg   [0:0] grp_compute_fu_384_flag;
wire   [3:0] grp_compute_fu_384_local_A_0_V_address0;
wire    grp_compute_fu_384_local_A_0_V_ce0;
reg   [511:0] grp_compute_fu_384_local_A_0_V_q0;
wire   [3:0] grp_compute_fu_384_local_B_V_address0;
wire    grp_compute_fu_384_local_B_V_ce0;
reg   [511:0] grp_compute_fu_384_local_B_V_q0;
wire   [3:0] grp_compute_fu_384_local_C_V_address0;
wire    grp_compute_fu_384_local_C_V_ce0;
wire   [3:0] grp_compute_fu_384_local_C_V_address1;
wire    grp_compute_fu_384_local_C_V_ce1;
wire    grp_compute_fu_384_local_C_V_we1;
wire   [511:0] grp_compute_fu_384_local_C_V_d1;
wire    grp_load_fu_393_ap_start;
wire    grp_load_fu_393_ap_done;
wire    grp_load_fu_393_ap_idle;
wire    grp_load_fu_393_ap_ready;
wire   [3:0] grp_load_fu_393_local_A_0_V_address0;
wire    grp_load_fu_393_local_A_0_V_ce0;
wire    grp_load_fu_393_local_A_0_V_we0;
wire   [511:0] grp_load_fu_393_local_A_0_V_d0;
wire   [3:0] grp_load_fu_393_local_B_V_address0;
wire    grp_load_fu_393_local_B_V_ce0;
wire    grp_load_fu_393_local_B_V_we0;
wire   [511:0] grp_load_fu_393_local_B_V_d0;
wire    grp_load_fu_393_m_axi_A_V_AWVALID;
wire   [31:0] grp_load_fu_393_m_axi_A_V_AWADDR;
wire   [0:0] grp_load_fu_393_m_axi_A_V_AWID;
wire   [31:0] grp_load_fu_393_m_axi_A_V_AWLEN;
wire   [2:0] grp_load_fu_393_m_axi_A_V_AWSIZE;
wire   [1:0] grp_load_fu_393_m_axi_A_V_AWBURST;
wire   [1:0] grp_load_fu_393_m_axi_A_V_AWLOCK;
wire   [3:0] grp_load_fu_393_m_axi_A_V_AWCACHE;
wire   [2:0] grp_load_fu_393_m_axi_A_V_AWPROT;
wire   [3:0] grp_load_fu_393_m_axi_A_V_AWQOS;
wire   [3:0] grp_load_fu_393_m_axi_A_V_AWREGION;
wire   [0:0] grp_load_fu_393_m_axi_A_V_AWUSER;
wire    grp_load_fu_393_m_axi_A_V_WVALID;
wire   [511:0] grp_load_fu_393_m_axi_A_V_WDATA;
wire   [63:0] grp_load_fu_393_m_axi_A_V_WSTRB;
wire    grp_load_fu_393_m_axi_A_V_WLAST;
wire   [0:0] grp_load_fu_393_m_axi_A_V_WID;
wire   [0:0] grp_load_fu_393_m_axi_A_V_WUSER;
wire    grp_load_fu_393_m_axi_A_V_ARVALID;
wire   [31:0] grp_load_fu_393_m_axi_A_V_ARADDR;
wire   [0:0] grp_load_fu_393_m_axi_A_V_ARID;
wire   [31:0] grp_load_fu_393_m_axi_A_V_ARLEN;
wire   [2:0] grp_load_fu_393_m_axi_A_V_ARSIZE;
wire   [1:0] grp_load_fu_393_m_axi_A_V_ARBURST;
wire   [1:0] grp_load_fu_393_m_axi_A_V_ARLOCK;
wire   [3:0] grp_load_fu_393_m_axi_A_V_ARCACHE;
wire   [2:0] grp_load_fu_393_m_axi_A_V_ARPROT;
wire   [3:0] grp_load_fu_393_m_axi_A_V_ARQOS;
wire   [3:0] grp_load_fu_393_m_axi_A_V_ARREGION;
wire   [0:0] grp_load_fu_393_m_axi_A_V_ARUSER;
wire    grp_load_fu_393_m_axi_A_V_RREADY;
wire    grp_load_fu_393_m_axi_A_V_BREADY;
reg   [4:0] indvar_flatten_reg_306;
reg   [6:0] i_0_reg_317;
reg   [6:0] j_0_reg_328;
reg   [4:0] ii_0_reg_339;
wire    ap_CS_fsm_state12;
reg   [2:0] index_0_reg_362;
wire    ap_CS_fsm_state22;
reg    ap_block_state22_on_subcall_done;
wire    ap_CS_fsm_state20;
reg   [4:0] ii22_0_reg_373;
reg    grp_compute_fu_384_ap_start_reg;
reg    grp_load_fu_393_ap_start_reg;
wire   [63:0] zext_ln78_fu_619_p1;
wire   [63:0] zext_ln89_fu_636_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln118_1_fu_1032_p1;
wire   [63:0] zext_ln180_4_fu_609_p1;
wire   [63:0] zext_ln180_6_fu_1058_p1;
reg   [31:0] counter_1_fu_194;
wire   [31:0] select_ln111_fu_998_p3;
wire   [511:0] p_Result_1_s_fu_907_p17;
wire   [31:0] grp_fu_407_p0;
wire   [31:0] grp_fu_411_p0;
wire   [31:0] grp_fu_415_p0;
wire   [31:0] grp_fu_419_p0;
wire   [31:0] grp_fu_423_p0;
wire   [31:0] grp_fu_427_p0;
wire   [31:0] grp_fu_431_p0;
wire   [31:0] grp_fu_435_p0;
wire   [31:0] grp_fu_439_p0;
wire   [31:0] grp_fu_443_p0;
wire   [31:0] grp_fu_447_p0;
wire   [31:0] grp_fu_451_p0;
wire   [31:0] grp_fu_455_p0;
wire   [31:0] grp_fu_459_p0;
wire   [31:0] grp_fu_463_p0;
wire   [31:0] grp_fu_467_p0;
wire   [25:0] tmp_fu_501_p4;
wire   [0:0] tmp_4_fu_532_p3;
wire   [6:0] add_ln71_1_fu_548_p2;
wire   [6:0] zext_ln78_1_fu_584_p1;
wire   [6:0] add_ln78_fu_588_p2;
wire   [8:0] add_ln78_1_fu_593_p3;
wire   [26:0] zext_ln180_fu_600_p1;
wire   [31:0] bitcast_ln91_15_fu_904_p1;
wire   [31:0] bitcast_ln91_14_fu_901_p1;
wire   [31:0] bitcast_ln91_13_fu_898_p1;
wire   [31:0] bitcast_ln91_12_fu_895_p1;
wire   [31:0] bitcast_ln91_11_fu_892_p1;
wire   [31:0] bitcast_ln91_10_fu_889_p1;
wire   [31:0] bitcast_ln91_9_fu_886_p1;
wire   [31:0] bitcast_ln91_8_fu_883_p1;
wire   [31:0] bitcast_ln91_7_fu_880_p1;
wire   [31:0] bitcast_ln91_6_fu_877_p1;
wire   [31:0] bitcast_ln91_5_fu_874_p1;
wire   [31:0] bitcast_ln91_4_fu_871_p1;
wire   [31:0] bitcast_ln91_3_fu_868_p1;
wire   [31:0] bitcast_ln91_2_fu_865_p1;
wire   [31:0] bitcast_ln91_1_fu_862_p1;
wire   [31:0] bitcast_ln91_fu_859_p1;
wire   [0:0] tmp_5_fu_962_p3;
wire   [31:0] counter_fu_986_p2;
wire   [0:0] icmp_ln111_fu_992_p2;
wire   [6:0] zext_ln118_fu_1023_p1;
wire   [6:0] add_ln118_fu_1027_p2;
wire   [8:0] tmp_3_fu_1037_p3;
wire   [26:0] zext_ln180_5_fu_1044_p1;
reg   [23:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_107;
reg    ap_enable_state13_pp0_iter0_stage0;
reg    ap_enable_operation_108;
reg    ap_enable_state14_pp0_iter1_stage0;
reg    ap_enable_operation_225;
reg    ap_enable_state19_pp0_iter6_stage0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 grp_compute_fu_384_ap_start_reg = 1'b0;
#0 grp_load_fu_393_ap_start_reg = 1'b0;
end

kernel_gemm_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
kernel_gemm_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .C_V(C_V),
    .A_V(A_V),
    .B_V(B_V)
);

kernel_gemm_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 512 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
kernel_gemm_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(gmem_ARID),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(gmem_ARSIZE),
    .I_ARLOCK(gmem_ARLOCK),
    .I_ARCACHE(gmem_ARCACHE),
    .I_ARQOS(gmem_ARQOS),
    .I_ARPROT(gmem_ARPROT),
    .I_ARUSER(gmem_ARUSER),
    .I_ARBURST(gmem_ARBURST),
    .I_ARREGION(gmem_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(local_C_0_V_load_1_reg_1479),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd18446744073709551615),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

kernel_gemm_localdEe #(
    .DataWidth( 512 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
local_A_ping_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_A_ping_0_V_address0),
    .ce0(local_A_ping_0_V_ce0),
    .we0(local_A_ping_0_V_we0),
    .d0(grp_load_fu_393_local_A_0_V_d0),
    .q0(local_A_ping_0_V_q0)
);

kernel_gemm_localdEe #(
    .DataWidth( 512 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
local_B_ping_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_B_ping_0_V_address0),
    .ce0(local_B_ping_0_V_ce0),
    .we0(local_B_ping_0_V_we0),
    .d0(grp_load_fu_393_local_B_V_d0),
    .q0(local_B_ping_0_V_q0)
);

kernel_gemm_localdEe #(
    .DataWidth( 512 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
local_A_pong_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_A_pong_0_V_address0),
    .ce0(local_A_pong_0_V_ce0),
    .we0(local_A_pong_0_V_we0),
    .d0(grp_load_fu_393_local_A_0_V_d0),
    .q0(local_A_pong_0_V_q0)
);

kernel_gemm_localdEe #(
    .DataWidth( 512 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
local_B_pong_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_B_pong_0_V_address0),
    .ce0(local_B_pong_0_V_ce0),
    .we0(local_B_pong_0_V_we0),
    .d0(grp_load_fu_393_local_B_V_d0),
    .q0(local_B_pong_0_V_q0)
);

kernel_gemm_localhbi #(
    .DataWidth( 512 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
local_C_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_C_0_V_address0),
    .ce0(local_C_0_V_ce0),
    .we0(local_C_0_V_we0),
    .d0(gmem_addr_read_reg_1164),
    .q0(local_C_0_V_q0),
    .address1(local_C_0_V_address1),
    .ce1(local_C_0_V_ce1),
    .we1(local_C_0_V_we1),
    .d1(local_C_0_V_d1),
    .q1(local_C_0_V_q1)
);

compute grp_compute_fu_384(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_compute_fu_384_ap_start),
    .ap_done(grp_compute_fu_384_ap_done),
    .ap_idle(grp_compute_fu_384_ap_idle),
    .ap_ready(grp_compute_fu_384_ap_ready),
    .flag(grp_compute_fu_384_flag),
    .local_A_0_V_address0(grp_compute_fu_384_local_A_0_V_address0),
    .local_A_0_V_ce0(grp_compute_fu_384_local_A_0_V_ce0),
    .local_A_0_V_q0(grp_compute_fu_384_local_A_0_V_q0),
    .local_B_V_address0(grp_compute_fu_384_local_B_V_address0),
    .local_B_V_ce0(grp_compute_fu_384_local_B_V_ce0),
    .local_B_V_q0(grp_compute_fu_384_local_B_V_q0),
    .local_C_V_address0(grp_compute_fu_384_local_C_V_address0),
    .local_C_V_ce0(grp_compute_fu_384_local_C_V_ce0),
    .local_C_V_q0(local_C_0_V_q0),
    .local_C_V_address1(grp_compute_fu_384_local_C_V_address1),
    .local_C_V_ce1(grp_compute_fu_384_local_C_V_ce1),
    .local_C_V_we1(grp_compute_fu_384_local_C_V_we1),
    .local_C_V_d1(grp_compute_fu_384_local_C_V_d1),
    .alpha(alpha)
);

load grp_load_fu_393(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_load_fu_393_ap_start),
    .ap_done(grp_load_fu_393_ap_done),
    .ap_idle(grp_load_fu_393_ap_idle),
    .ap_ready(grp_load_fu_393_ap_ready),
    .flag(xor_ln103_reg_1441),
    .i(select_ln71_reg_1130),
    .j(select_ln72_reg_1124),
    .k(shl_ln_reg_1436),
    .local_A_0_V_address0(grp_load_fu_393_local_A_0_V_address0),
    .local_A_0_V_ce0(grp_load_fu_393_local_A_0_V_ce0),
    .local_A_0_V_we0(grp_load_fu_393_local_A_0_V_we0),
    .local_A_0_V_d0(grp_load_fu_393_local_A_0_V_d0),
    .local_B_V_address0(grp_load_fu_393_local_B_V_address0),
    .local_B_V_ce0(grp_load_fu_393_local_B_V_ce0),
    .local_B_V_we0(grp_load_fu_393_local_B_V_we0),
    .local_B_V_d0(grp_load_fu_393_local_B_V_d0),
    .m_axi_A_V_AWVALID(grp_load_fu_393_m_axi_A_V_AWVALID),
    .m_axi_A_V_AWREADY(1'b0),
    .m_axi_A_V_AWADDR(grp_load_fu_393_m_axi_A_V_AWADDR),
    .m_axi_A_V_AWID(grp_load_fu_393_m_axi_A_V_AWID),
    .m_axi_A_V_AWLEN(grp_load_fu_393_m_axi_A_V_AWLEN),
    .m_axi_A_V_AWSIZE(grp_load_fu_393_m_axi_A_V_AWSIZE),
    .m_axi_A_V_AWBURST(grp_load_fu_393_m_axi_A_V_AWBURST),
    .m_axi_A_V_AWLOCK(grp_load_fu_393_m_axi_A_V_AWLOCK),
    .m_axi_A_V_AWCACHE(grp_load_fu_393_m_axi_A_V_AWCACHE),
    .m_axi_A_V_AWPROT(grp_load_fu_393_m_axi_A_V_AWPROT),
    .m_axi_A_V_AWQOS(grp_load_fu_393_m_axi_A_V_AWQOS),
    .m_axi_A_V_AWREGION(grp_load_fu_393_m_axi_A_V_AWREGION),
    .m_axi_A_V_AWUSER(grp_load_fu_393_m_axi_A_V_AWUSER),
    .m_axi_A_V_WVALID(grp_load_fu_393_m_axi_A_V_WVALID),
    .m_axi_A_V_WREADY(1'b0),
    .m_axi_A_V_WDATA(grp_load_fu_393_m_axi_A_V_WDATA),
    .m_axi_A_V_WSTRB(grp_load_fu_393_m_axi_A_V_WSTRB),
    .m_axi_A_V_WLAST(grp_load_fu_393_m_axi_A_V_WLAST),
    .m_axi_A_V_WID(grp_load_fu_393_m_axi_A_V_WID),
    .m_axi_A_V_WUSER(grp_load_fu_393_m_axi_A_V_WUSER),
    .m_axi_A_V_ARVALID(grp_load_fu_393_m_axi_A_V_ARVALID),
    .m_axi_A_V_ARREADY(gmem_ARREADY),
    .m_axi_A_V_ARADDR(grp_load_fu_393_m_axi_A_V_ARADDR),
    .m_axi_A_V_ARID(grp_load_fu_393_m_axi_A_V_ARID),
    .m_axi_A_V_ARLEN(grp_load_fu_393_m_axi_A_V_ARLEN),
    .m_axi_A_V_ARSIZE(grp_load_fu_393_m_axi_A_V_ARSIZE),
    .m_axi_A_V_ARBURST(grp_load_fu_393_m_axi_A_V_ARBURST),
    .m_axi_A_V_ARLOCK(grp_load_fu_393_m_axi_A_V_ARLOCK),
    .m_axi_A_V_ARCACHE(grp_load_fu_393_m_axi_A_V_ARCACHE),
    .m_axi_A_V_ARPROT(grp_load_fu_393_m_axi_A_V_ARPROT),
    .m_axi_A_V_ARQOS(grp_load_fu_393_m_axi_A_V_ARQOS),
    .m_axi_A_V_ARREGION(grp_load_fu_393_m_axi_A_V_ARREGION),
    .m_axi_A_V_ARUSER(grp_load_fu_393_m_axi_A_V_ARUSER),
    .m_axi_A_V_RVALID(gmem_RVALID),
    .m_axi_A_V_RREADY(grp_load_fu_393_m_axi_A_V_RREADY),
    .m_axi_A_V_RDATA(gmem_RDATA),
    .m_axi_A_V_RLAST(gmem_RLAST),
    .m_axi_A_V_RID(gmem_RID),
    .m_axi_A_V_RUSER(gmem_RUSER),
    .m_axi_A_V_RRESP(gmem_RRESP),
    .m_axi_A_V_BVALID(1'b0),
    .m_axi_A_V_BREADY(grp_load_fu_393_m_axi_A_V_BREADY),
    .m_axi_A_V_BRESP(2'd0),
    .m_axi_A_V_BID(1'd0),
    .m_axi_A_V_BUSER(1'd0),
    .A_V_offset(A_V3_reg_1105),
    .B_V_offset(B_V5_reg_1100)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U50(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_407_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_407_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U51(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_411_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_411_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U52(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_415_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_415_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U53(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_419_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_419_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U54(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_423_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_423_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U55(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_427_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_427_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U56(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_431_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_431_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U57(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_435_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_435_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U58(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_439_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_439_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U59(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_443_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_443_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U60(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_447_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_447_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U61(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_451_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_451_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U62(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_455_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_455_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U63(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_459_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_459_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U64(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_463_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_463_p2)
);

kernel_gemm_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_gemm_fmul_cud_U65(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_467_p0),
    .din1(beta),
    .ce(1'b1),
    .dout(grp_fu_467_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln75_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state13)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((icmp_ln75_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_compute_fu_384_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
            grp_compute_fu_384_ap_start_reg <= 1'b1;
        end else if ((grp_compute_fu_384_ap_ready == 1'b1)) begin
            grp_compute_fu_384_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_load_fu_393_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
            grp_load_fu_393_ap_start_reg <= 1'b1;
        end else if ((grp_load_fu_393_ap_ready == 1'b1)) begin
            grp_load_fu_393_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state22_on_subcall_done) & (1'b1 == ap_CS_fsm_state22))) begin
        counter_1_fu_194 <= select_ln111_fu_998_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        counter_1_fu_194 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        i_0_reg_317 <= select_ln71_reg_1130;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_317 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ii20_0_reg_351 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_fu_624_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii20_0_reg_351 <= ii_1_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_944_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ii22_0_reg_373 <= 5'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        ii22_0_reg_373 <= ii_2_reg_1459;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ii_0_reg_339 <= ii_reg_1148;
    end else if (((icmp_ln71_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ii_0_reg_339 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        index_0_reg_362 <= 3'd0;
    end else if (((1'b0 == ap_block_state22_on_subcall_done) & (1'b1 == ap_CS_fsm_state22))) begin
        index_0_reg_362 <= index_reg_1427;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        indvar_flatten_reg_306 <= add_ln71_reg_1119;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_306 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        j_0_reg_328 <= j_fu_1053_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_328 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        A_V3_reg_1105 <= {{A_V[31:6]}};
        B_V5_reg_1100 <= {{B_V[31:6]}};
        p_cast_reg_1110[25 : 0] <= p_cast_fu_511_p1[25 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1011_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        add_ln180_2_reg_1469 <= add_ln180_2_fu_1048_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_572_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln180_reg_1153 <= add_ln180_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln71_reg_1119 <= add_ln71_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_addr_read_reg_1164 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        icmp_ln101_reg_1432 <= icmp_ln101_fu_956_p2;
        shl_ln_reg_1436[6 : 4] <= shl_ln_fu_970_p3[6 : 4];
        xor_ln103_reg_1441 <= xor_ln103_fu_979_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        icmp_ln104_reg_1451 <= grp_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        icmp_ln108_reg_1446 <= grp_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln84_reg_1169 <= icmp_ln84_fu_624_p2;
        icmp_ln84_reg_1169_pp0_iter1_reg <= icmp_ln84_reg_1169;
        local_C_0_V_addr_1_reg_1178_pp0_iter1_reg <= local_C_0_V_addr_1_reg_1178;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln84_reg_1169_pp0_iter2_reg <= icmp_ln84_reg_1169_pp0_iter1_reg;
        icmp_ln84_reg_1169_pp0_iter3_reg <= icmp_ln84_reg_1169_pp0_iter2_reg;
        icmp_ln84_reg_1169_pp0_iter4_reg <= icmp_ln84_reg_1169_pp0_iter3_reg;
        icmp_ln84_reg_1169_pp0_iter5_reg <= icmp_ln84_reg_1169_pp0_iter4_reg;
        local_C_0_V_addr_1_reg_1178_pp0_iter2_reg <= local_C_0_V_addr_1_reg_1178_pp0_iter1_reg;
        local_C_0_V_addr_1_reg_1178_pp0_iter3_reg <= local_C_0_V_addr_1_reg_1178_pp0_iter2_reg;
        local_C_0_V_addr_1_reg_1178_pp0_iter4_reg <= local_C_0_V_addr_1_reg_1178_pp0_iter3_reg;
        local_C_0_V_addr_1_reg_1178_pp0_iter5_reg <= local_C_0_V_addr_1_reg_1178_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ii_2_reg_1459 <= ii_2_fu_1017_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ii_reg_1148 <= ii_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        index_reg_1427 <= index_fu_950_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_fu_624_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_0_V_addr_1_reg_1178 <= zext_ln89_fu_636_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (gmem_AWREADY == 1'b1))) begin
        local_C_0_V_load_1_reg_1479 <= local_C_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_reg_1169 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_10_reg_1239 <= {{local_C_0_V_q0[383:352]}};
        p_Result_11_reg_1244 <= {{local_C_0_V_q0[415:384]}};
        p_Result_12_reg_1249 <= {{local_C_0_V_q0[447:416]}};
        p_Result_13_reg_1254 <= {{local_C_0_V_q0[479:448]}};
        p_Result_14_reg_1259 <= {{local_C_0_V_q0[511:480]}};
        p_Result_1_reg_1234 <= {{local_C_0_V_q0[351:320]}};
        p_Result_2_reg_1194 <= {{local_C_0_V_q0[95:64]}};
        p_Result_3_reg_1199 <= {{local_C_0_V_q0[127:96]}};
        p_Result_4_reg_1204 <= {{local_C_0_V_q0[159:128]}};
        p_Result_5_reg_1209 <= {{local_C_0_V_q0[191:160]}};
        p_Result_6_reg_1214 <= {{local_C_0_V_q0[223:192]}};
        p_Result_7_reg_1219 <= {{local_C_0_V_q0[255:224]}};
        p_Result_8_reg_1224 <= {{local_C_0_V_q0[287:256]}};
        p_Result_9_reg_1229 <= {{local_C_0_V_q0[319:288]}};
        p_Result_s_reg_1189 <= {{local_C_0_V_q0[63:32]}};
        trunc_ln681_reg_1184 <= trunc_ln681_fu_641_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        select_ln71_reg_1130 <= select_ln71_fu_554_p3;
        select_ln72_reg_1124 <= select_ln72_fu_540_p3;
        trunc_ln78_1_reg_1138 <= {{select_ln72_fu_540_p3[5:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_reg_1169_pp0_iter4_reg == 1'd0))) begin
        tmp_1_10_reg_1399 <= grp_fu_451_p2;
        tmp_1_11_reg_1404 <= grp_fu_455_p2;
        tmp_1_12_reg_1409 <= grp_fu_459_p2;
        tmp_1_13_reg_1414 <= grp_fu_463_p2;
        tmp_1_14_reg_1419 <= grp_fu_467_p2;
        tmp_1_1_reg_1349 <= grp_fu_411_p2;
        tmp_1_2_reg_1354 <= grp_fu_415_p2;
        tmp_1_3_reg_1359 <= grp_fu_419_p2;
        tmp_1_4_reg_1364 <= grp_fu_423_p2;
        tmp_1_5_reg_1369 <= grp_fu_427_p2;
        tmp_1_6_reg_1374 <= grp_fu_431_p2;
        tmp_1_7_reg_1379 <= grp_fu_435_p2;
        tmp_1_8_reg_1384 <= grp_fu_439_p2;
        tmp_1_9_reg_1389 <= grp_fu_443_p2;
        tmp_1_s_reg_1394 <= grp_fu_447_p2;
        tmp_s_reg_1344 <= grp_fu_407_p2;
    end
end

always @ (*) begin
    if ((icmp_ln84_fu_624_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARADDR = zext_ln180_4_fu_609_p1;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARADDR = grp_load_fu_393_m_axi_A_V_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARBURST = grp_load_fu_393_m_axi_A_V_ARBURST;
    end else begin
        gmem_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARCACHE = grp_load_fu_393_m_axi_A_V_ARCACHE;
    end else begin
        gmem_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARID = grp_load_fu_393_m_axi_A_V_ARID;
    end else begin
        gmem_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARLEN = 32'd1;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARLEN = grp_load_fu_393_m_axi_A_V_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARLOCK = grp_load_fu_393_m_axi_A_V_ARLOCK;
    end else begin
        gmem_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARPROT = grp_load_fu_393_m_axi_A_V_ARPROT;
    end else begin
        gmem_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARQOS = grp_load_fu_393_m_axi_A_V_ARQOS;
    end else begin
        gmem_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARREGION = grp_load_fu_393_m_axi_A_V_ARREGION;
    end else begin
        gmem_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARSIZE = grp_load_fu_393_m_axi_A_V_ARSIZE;
    end else begin
        gmem_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARUSER = grp_load_fu_393_m_axi_A_V_ARUSER;
    end else begin
        gmem_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARVALID = 1'b1;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_ARVALID = grp_load_fu_393_m_axi_A_V_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (gmem_AWREADY == 1'b1))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_RREADY = 1'b1;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_fu_956_p2 == 1'd1) & (icmp_ln99_fu_944_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln99_fu_944_p2 == 1'd0) & (icmp_ln101_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_RREADY = grp_load_fu_393_m_axi_A_V_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd1)) begin
            grp_compute_fu_384_flag = icmp_ln104_reg_1451;
        end else if ((icmp_ln101_reg_1432 == 1'd0)) begin
            grp_compute_fu_384_flag = icmp_ln108_reg_1446;
        end else begin
            grp_compute_fu_384_flag = 'bx;
        end
    end else begin
        grp_compute_fu_384_flag = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd1)) begin
            grp_compute_fu_384_local_A_0_V_q0 = local_A_pong_0_V_q0;
        end else if ((icmp_ln101_reg_1432 == 1'd0)) begin
            grp_compute_fu_384_local_A_0_V_q0 = local_A_ping_0_V_q0;
        end else begin
            grp_compute_fu_384_local_A_0_V_q0 = 'bx;
        end
    end else begin
        grp_compute_fu_384_local_A_0_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd1)) begin
            grp_compute_fu_384_local_B_V_q0 = local_B_pong_0_V_q0;
        end else if ((icmp_ln101_reg_1432 == 1'd0)) begin
            grp_compute_fu_384_local_B_V_q0 = local_B_ping_0_V_q0;
        end else begin
            grp_compute_fu_384_local_B_V_q0 = 'bx;
        end
    end else begin
        grp_compute_fu_384_local_B_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd1)) begin
            local_A_ping_0_V_address0 = grp_load_fu_393_local_A_0_V_address0;
        end else if ((icmp_ln101_reg_1432 == 1'd0)) begin
            local_A_ping_0_V_address0 = grp_compute_fu_384_local_A_0_V_address0;
        end else begin
            local_A_ping_0_V_address0 = 'bx;
        end
    end else begin
        local_A_ping_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd1)) begin
            local_A_ping_0_V_ce0 = grp_load_fu_393_local_A_0_V_ce0;
        end else if ((icmp_ln101_reg_1432 == 1'd0)) begin
            local_A_ping_0_V_ce0 = grp_compute_fu_384_local_A_0_V_ce0;
        end else begin
            local_A_ping_0_V_ce0 = 1'b0;
        end
    end else begin
        local_A_ping_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        local_A_ping_0_V_we0 = grp_load_fu_393_local_A_0_V_we0;
    end else begin
        local_A_ping_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd0)) begin
            local_A_pong_0_V_address0 = grp_load_fu_393_local_A_0_V_address0;
        end else if ((icmp_ln101_reg_1432 == 1'd1)) begin
            local_A_pong_0_V_address0 = grp_compute_fu_384_local_A_0_V_address0;
        end else begin
            local_A_pong_0_V_address0 = 'bx;
        end
    end else begin
        local_A_pong_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd0)) begin
            local_A_pong_0_V_ce0 = grp_load_fu_393_local_A_0_V_ce0;
        end else if ((icmp_ln101_reg_1432 == 1'd1)) begin
            local_A_pong_0_V_ce0 = grp_compute_fu_384_local_A_0_V_ce0;
        end else begin
            local_A_pong_0_V_ce0 = 1'b0;
        end
    end else begin
        local_A_pong_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        local_A_pong_0_V_we0 = grp_load_fu_393_local_A_0_V_we0;
    end else begin
        local_A_pong_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd1)) begin
            local_B_ping_0_V_address0 = grp_load_fu_393_local_B_V_address0;
        end else if ((icmp_ln101_reg_1432 == 1'd0)) begin
            local_B_ping_0_V_address0 = grp_compute_fu_384_local_B_V_address0;
        end else begin
            local_B_ping_0_V_address0 = 'bx;
        end
    end else begin
        local_B_ping_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd1)) begin
            local_B_ping_0_V_ce0 = grp_load_fu_393_local_B_V_ce0;
        end else if ((icmp_ln101_reg_1432 == 1'd0)) begin
            local_B_ping_0_V_ce0 = grp_compute_fu_384_local_B_V_ce0;
        end else begin
            local_B_ping_0_V_ce0 = 1'b0;
        end
    end else begin
        local_B_ping_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        local_B_ping_0_V_we0 = grp_load_fu_393_local_B_V_we0;
    end else begin
        local_B_ping_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd0)) begin
            local_B_pong_0_V_address0 = grp_load_fu_393_local_B_V_address0;
        end else if ((icmp_ln101_reg_1432 == 1'd1)) begin
            local_B_pong_0_V_address0 = grp_compute_fu_384_local_B_V_address0;
        end else begin
            local_B_pong_0_V_address0 = 'bx;
        end
    end else begin
        local_B_pong_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        if ((icmp_ln101_reg_1432 == 1'd0)) begin
            local_B_pong_0_V_ce0 = grp_load_fu_393_local_B_V_ce0;
        end else if ((icmp_ln101_reg_1432 == 1'd1)) begin
            local_B_pong_0_V_ce0 = grp_compute_fu_384_local_B_V_ce0;
        end else begin
            local_B_pong_0_V_ce0 = 1'b0;
        end
    end else begin
        local_B_pong_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        local_B_pong_0_V_we0 = grp_load_fu_393_local_B_V_we0;
    end else begin
        local_B_pong_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_C_0_V_address0 = zext_ln89_fu_636_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        local_C_0_V_address0 = zext_ln78_fu_619_p1;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)))) begin
        local_C_0_V_address0 = grp_compute_fu_384_local_C_V_address0;
    end else begin
        local_C_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        local_C_0_V_address1 = zext_ln118_1_fu_1032_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        local_C_0_V_address1 = local_C_0_V_addr_1_reg_1178_pp0_iter5_reg;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)))) begin
        local_C_0_V_address1 = grp_compute_fu_384_local_C_V_address1;
    end else begin
        local_C_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        local_C_0_V_ce0 = 1'b1;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)))) begin
        local_C_0_V_ce0 = grp_compute_fu_384_local_C_V_ce0;
    end else begin
        local_C_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        local_C_0_V_ce1 = 1'b1;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)))) begin
        local_C_0_V_ce1 = grp_compute_fu_384_local_C_V_ce1;
    end else begin
        local_C_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        local_C_0_V_d1 = p_Result_1_s_fu_907_p17;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)))) begin
        local_C_0_V_d1 = grp_compute_fu_384_local_C_V_d1;
    end else begin
        local_C_0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        local_C_0_V_we0 = 1'b1;
    end else begin
        local_C_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_reg_1169_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        local_C_0_V_we1 = 1'b1;
    end else if ((((icmp_ln101_reg_1432 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln101_reg_1432 == 1'd0) & (1'b1 == ap_CS_fsm_state22)))) begin
        local_C_0_V_we1 = grp_compute_fu_384_local_C_V_we1;
    end else begin
        local_C_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln71_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln75_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln84_fu_624_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln84_fu_624_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln99_fu_944_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b0 == ap_block_state22_on_subcall_done) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln115_fu_1011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (gmem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln118_fu_1027_p2 = (zext_ln118_fu_1023_p1 + select_ln71_reg_1130);

assign add_ln180_2_fu_1048_p2 = (zext_ln180_5_fu_1044_p1 + p_cast_reg_1110);

assign add_ln180_fu_604_p2 = (zext_ln180_fu_600_p1 + p_cast_reg_1110);

assign add_ln71_1_fu_548_p2 = (i_0_reg_317 + 7'd16);

assign add_ln71_fu_526_p2 = (indvar_flatten_reg_306 + 5'd1);

assign add_ln78_1_fu_593_p3 = {{add_ln78_fu_588_p2}, {trunc_ln78_1_reg_1138}};

assign add_ln78_fu_588_p2 = (zext_ln78_1_fu_584_p1 + select_ln71_reg_1130);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = ((1'b1 == ap_block_pp0_stage0_subdone) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_on_subcall_done = (((icmp_ln101_reg_1432 == 1'd1) & (grp_compute_fu_384_ap_done == 1'b0)) | ((grp_compute_fu_384_ap_done == 1'b0) & (icmp_ln101_reg_1432 == 1'd0)) | ((icmp_ln101_reg_1432 == 1'd1) & (grp_load_fu_393_ap_done == 1'b0)) | ((grp_load_fu_393_ap_done == 1'b0) & (icmp_ln101_reg_1432 == 1'd0)));
end

always @ (*) begin
    ap_enable_operation_107 = (icmp_ln84_fu_624_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_108 = (icmp_ln84_reg_1169 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_225 = (icmp_ln84_reg_1169_pp0_iter5_reg == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state13_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state14_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state19_pp0_iter6_stage0 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln91_10_fu_889_p1 = tmp_1_s_reg_1394;

assign bitcast_ln91_11_fu_892_p1 = tmp_1_10_reg_1399;

assign bitcast_ln91_12_fu_895_p1 = tmp_1_11_reg_1404;

assign bitcast_ln91_13_fu_898_p1 = tmp_1_12_reg_1409;

assign bitcast_ln91_14_fu_901_p1 = tmp_1_13_reg_1414;

assign bitcast_ln91_15_fu_904_p1 = tmp_1_14_reg_1419;

assign bitcast_ln91_1_fu_862_p1 = tmp_1_1_reg_1349;

assign bitcast_ln91_2_fu_865_p1 = tmp_1_2_reg_1354;

assign bitcast_ln91_3_fu_868_p1 = tmp_1_3_reg_1359;

assign bitcast_ln91_4_fu_871_p1 = tmp_1_4_reg_1364;

assign bitcast_ln91_5_fu_874_p1 = tmp_1_5_reg_1369;

assign bitcast_ln91_6_fu_877_p1 = tmp_1_6_reg_1374;

assign bitcast_ln91_7_fu_880_p1 = tmp_1_7_reg_1379;

assign bitcast_ln91_8_fu_883_p1 = tmp_1_8_reg_1384;

assign bitcast_ln91_9_fu_886_p1 = tmp_1_9_reg_1389;

assign bitcast_ln91_fu_859_p1 = tmp_s_reg_1344;

assign counter_fu_986_p2 = (counter_1_fu_194 + 32'd1);

assign gmem_AWADDR = zext_ln180_6_fu_1058_p1;

assign grp_compute_fu_384_ap_start = grp_compute_fu_384_ap_start_reg;

assign grp_fu_407_p0 = trunc_ln681_reg_1184;

assign grp_fu_411_p0 = p_Result_s_reg_1189;

assign grp_fu_415_p0 = p_Result_2_reg_1194;

assign grp_fu_419_p0 = p_Result_3_reg_1199;

assign grp_fu_423_p0 = p_Result_4_reg_1204;

assign grp_fu_427_p0 = p_Result_5_reg_1209;

assign grp_fu_431_p0 = p_Result_6_reg_1214;

assign grp_fu_435_p0 = p_Result_7_reg_1219;

assign grp_fu_439_p0 = p_Result_8_reg_1224;

assign grp_fu_443_p0 = p_Result_9_reg_1229;

assign grp_fu_447_p0 = p_Result_1_reg_1234;

assign grp_fu_451_p0 = p_Result_10_reg_1239;

assign grp_fu_455_p0 = p_Result_11_reg_1244;

assign grp_fu_459_p0 = p_Result_12_reg_1249;

assign grp_fu_463_p0 = p_Result_13_reg_1254;

assign grp_fu_467_p0 = p_Result_14_reg_1259;

assign grp_fu_474_p2 = ((index_0_reg_362 != 3'd0) ? 1'b1 : 1'b0);

assign grp_load_fu_393_ap_start = grp_load_fu_393_ap_start_reg;

assign icmp_ln101_fu_956_p2 = ((counter_1_fu_194 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_992_p2 = ((counter_fu_986_p2 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_1011_p2 = ((ii22_0_reg_373 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_520_p2 = ((indvar_flatten_reg_306 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_572_p2 = ((ii_0_reg_339 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_624_p2 = ((ii20_0_reg_351 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_944_p2 = ((index_0_reg_362 == 3'd5) ? 1'b1 : 1'b0);

assign ii_1_fu_630_p2 = (ii20_0_reg_351 + 5'd1);

assign ii_2_fu_1017_p2 = (ii22_0_reg_373 + 5'd1);

assign ii_fu_578_p2 = (ii_0_reg_339 + 5'd1);

assign index_fu_950_p2 = (index_0_reg_362 + 3'd1);

assign j_fu_1053_p2 = (select_ln72_reg_1124 + 7'd16);

assign p_Result_1_s_fu_907_p17 = {{{{{{{{{{{{{{{{bitcast_ln91_15_fu_904_p1}, {bitcast_ln91_14_fu_901_p1}}, {bitcast_ln91_13_fu_898_p1}}, {bitcast_ln91_12_fu_895_p1}}, {bitcast_ln91_11_fu_892_p1}}, {bitcast_ln91_10_fu_889_p1}}, {bitcast_ln91_9_fu_886_p1}}, {bitcast_ln91_8_fu_883_p1}}, {bitcast_ln91_7_fu_880_p1}}, {bitcast_ln91_6_fu_877_p1}}, {bitcast_ln91_5_fu_874_p1}}, {bitcast_ln91_4_fu_871_p1}}, {bitcast_ln91_3_fu_868_p1}}, {bitcast_ln91_2_fu_865_p1}}, {bitcast_ln91_1_fu_862_p1}}, {bitcast_ln91_fu_859_p1}};

assign p_cast_fu_511_p1 = tmp_fu_501_p4;

assign select_ln111_fu_998_p3 = ((icmp_ln111_fu_992_p2[0:0] === 1'b1) ? 32'd0 : counter_fu_986_p2);

assign select_ln71_fu_554_p3 = ((tmp_4_fu_532_p3[0:0] === 1'b1) ? add_ln71_1_fu_548_p2 : i_0_reg_317);

assign select_ln72_fu_540_p3 = ((tmp_4_fu_532_p3[0:0] === 1'b1) ? 7'd0 : j_0_reg_328);

assign shl_ln_fu_970_p3 = {{index_0_reg_362}, {4'd0}};

assign tmp_3_fu_1037_p3 = {{add_ln118_fu_1027_p2}, {trunc_ln78_1_reg_1138}};

assign tmp_4_fu_532_p3 = j_0_reg_328[32'd6];

assign tmp_5_fu_962_p3 = index_0_reg_362[32'd2];

assign tmp_fu_501_p4 = {{C_V[31:6]}};

assign trunc_ln681_fu_641_p1 = local_C_0_V_q0[31:0];

assign xor_ln103_fu_979_p2 = (tmp_5_fu_962_p3 ^ 1'd1);

assign zext_ln118_1_fu_1032_p1 = ii22_0_reg_373;

assign zext_ln118_fu_1023_p1 = ii22_0_reg_373;

assign zext_ln180_4_fu_609_p1 = add_ln180_reg_1153;

assign zext_ln180_5_fu_1044_p1 = tmp_3_fu_1037_p3;

assign zext_ln180_6_fu_1058_p1 = add_ln180_2_reg_1469;

assign zext_ln180_fu_600_p1 = add_ln78_1_fu_593_p3;

assign zext_ln78_1_fu_584_p1 = ii_0_reg_339;

assign zext_ln78_fu_619_p1 = ii_0_reg_339;

assign zext_ln89_fu_636_p1 = ii20_0_reg_351;

always @ (posedge ap_clk) begin
    p_cast_reg_1110[26] <= 1'b0;
    shl_ln_reg_1436[3:0] <= 4'b0000;
end

endmodule //kernel_gemm
