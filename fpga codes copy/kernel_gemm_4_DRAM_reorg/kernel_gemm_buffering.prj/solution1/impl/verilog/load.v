// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flag,
        i,
        j,
        k,
        local_A_0_V_address0,
        local_A_0_V_ce0,
        local_A_0_V_we0,
        local_A_0_V_d0,
        local_B_V_address0,
        local_B_V_ce0,
        local_B_V_we0,
        local_B_V_d0,
        m_axi_A_V_AWVALID,
        m_axi_A_V_AWREADY,
        m_axi_A_V_AWADDR,
        m_axi_A_V_AWID,
        m_axi_A_V_AWLEN,
        m_axi_A_V_AWSIZE,
        m_axi_A_V_AWBURST,
        m_axi_A_V_AWLOCK,
        m_axi_A_V_AWCACHE,
        m_axi_A_V_AWPROT,
        m_axi_A_V_AWQOS,
        m_axi_A_V_AWREGION,
        m_axi_A_V_AWUSER,
        m_axi_A_V_WVALID,
        m_axi_A_V_WREADY,
        m_axi_A_V_WDATA,
        m_axi_A_V_WSTRB,
        m_axi_A_V_WLAST,
        m_axi_A_V_WID,
        m_axi_A_V_WUSER,
        m_axi_A_V_ARVALID,
        m_axi_A_V_ARREADY,
        m_axi_A_V_ARADDR,
        m_axi_A_V_ARID,
        m_axi_A_V_ARLEN,
        m_axi_A_V_ARSIZE,
        m_axi_A_V_ARBURST,
        m_axi_A_V_ARLOCK,
        m_axi_A_V_ARCACHE,
        m_axi_A_V_ARPROT,
        m_axi_A_V_ARQOS,
        m_axi_A_V_ARREGION,
        m_axi_A_V_ARUSER,
        m_axi_A_V_RVALID,
        m_axi_A_V_RREADY,
        m_axi_A_V_RDATA,
        m_axi_A_V_RLAST,
        m_axi_A_V_RID,
        m_axi_A_V_RUSER,
        m_axi_A_V_RRESP,
        m_axi_A_V_BVALID,
        m_axi_A_V_BREADY,
        m_axi_A_V_BRESP,
        m_axi_A_V_BID,
        m_axi_A_V_BUSER,
        A_V_offset,
        B_V_offset
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] flag;
input  [6:0] i;
input  [6:0] j;
input  [6:0] k;
output  [3:0] local_A_0_V_address0;
output   local_A_0_V_ce0;
output   local_A_0_V_we0;
output  [511:0] local_A_0_V_d0;
output  [3:0] local_B_V_address0;
output   local_B_V_ce0;
output   local_B_V_we0;
output  [511:0] local_B_V_d0;
output   m_axi_A_V_AWVALID;
input   m_axi_A_V_AWREADY;
output  [31:0] m_axi_A_V_AWADDR;
output  [0:0] m_axi_A_V_AWID;
output  [31:0] m_axi_A_V_AWLEN;
output  [2:0] m_axi_A_V_AWSIZE;
output  [1:0] m_axi_A_V_AWBURST;
output  [1:0] m_axi_A_V_AWLOCK;
output  [3:0] m_axi_A_V_AWCACHE;
output  [2:0] m_axi_A_V_AWPROT;
output  [3:0] m_axi_A_V_AWQOS;
output  [3:0] m_axi_A_V_AWREGION;
output  [0:0] m_axi_A_V_AWUSER;
output   m_axi_A_V_WVALID;
input   m_axi_A_V_WREADY;
output  [511:0] m_axi_A_V_WDATA;
output  [63:0] m_axi_A_V_WSTRB;
output   m_axi_A_V_WLAST;
output  [0:0] m_axi_A_V_WID;
output  [0:0] m_axi_A_V_WUSER;
output   m_axi_A_V_ARVALID;
input   m_axi_A_V_ARREADY;
output  [31:0] m_axi_A_V_ARADDR;
output  [0:0] m_axi_A_V_ARID;
output  [31:0] m_axi_A_V_ARLEN;
output  [2:0] m_axi_A_V_ARSIZE;
output  [1:0] m_axi_A_V_ARBURST;
output  [1:0] m_axi_A_V_ARLOCK;
output  [3:0] m_axi_A_V_ARCACHE;
output  [2:0] m_axi_A_V_ARPROT;
output  [3:0] m_axi_A_V_ARQOS;
output  [3:0] m_axi_A_V_ARREGION;
output  [0:0] m_axi_A_V_ARUSER;
input   m_axi_A_V_RVALID;
output   m_axi_A_V_RREADY;
input  [511:0] m_axi_A_V_RDATA;
input   m_axi_A_V_RLAST;
input  [0:0] m_axi_A_V_RID;
input  [0:0] m_axi_A_V_RUSER;
input  [1:0] m_axi_A_V_RRESP;
input   m_axi_A_V_BVALID;
output   m_axi_A_V_BREADY;
input  [1:0] m_axi_A_V_BRESP;
input  [0:0] m_axi_A_V_BID;
input  [0:0] m_axi_A_V_BUSER;
input  [25:0] A_V_offset;
input  [25:0] B_V_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg local_A_0_V_ce0;
reg local_A_0_V_we0;
reg local_B_V_ce0;
reg local_B_V_we0;
reg m_axi_A_V_ARVALID;
reg[31:0] m_axi_A_V_ARADDR;
reg m_axi_A_V_RREADY;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    A_V_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    A_V_blk_n_R;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state20;
wire   [0:0] flag_read_read_fu_102_p2;
wire   [8:0] zext_ln10_1_fu_192_p1;
reg   [8:0] zext_ln10_1_reg_356;
wire   [26:0] zext_ln7_fu_196_p1;
reg   [26:0] zext_ln7_reg_361;
wire   [4:0] ii_fu_206_p2;
reg   [4:0] ii_reg_369;
wire    ap_CS_fsm_state2;
wire   [26:0] add_ln180_fu_238_p2;
reg   [26:0] add_ln180_reg_374;
wire   [0:0] icmp_ln7_fu_200_p2;
wire   [8:0] zext_ln17_1_fu_252_p1;
reg   [8:0] zext_ln17_1_reg_379;
wire   [26:0] zext_ln14_fu_256_p1;
reg   [26:0] zext_ln14_reg_384;
reg   [511:0] B_V_addr_read_reg_395;
wire   [4:0] kk_fu_280_p2;
reg   [4:0] kk_reg_403;
wire    ap_CS_fsm_state12;
wire   [26:0] add_ln180_1_fu_312_p2;
reg   [26:0] add_ln180_1_reg_408;
wire   [0:0] icmp_ln14_fu_274_p2;
reg   [511:0] B_V_addr_1_read_reg_419;
reg   [4:0] ii1_0_reg_158;
wire    ap_CS_fsm_state11;
reg   [4:0] kk3_0_reg_170;
wire    ap_CS_fsm_state21;
wire   [63:0] zext_ln10_fu_269_p1;
wire   [63:0] zext_ln17_fu_327_p1;
wire   [63:0] zext_ln180_1_fu_259_p1;
wire   [63:0] zext_ln180_3_fu_317_p1;
wire   [2:0] trunc_ln_fu_182_p4;
wire   [6:0] zext_ln10_2_fu_212_p1;
wire   [6:0] add_ln10_fu_216_p2;
wire   [8:0] shl_ln_fu_221_p3;
wire   [8:0] add_ln10_1_fu_229_p2;
wire   [26:0] zext_ln180_fu_234_p1;
wire   [2:0] trunc_ln1_fu_243_p4;
wire   [6:0] zext_ln17_2_fu_286_p1;
wire   [6:0] add_ln17_fu_290_p2;
wire   [8:0] shl_ln1_fu_295_p3;
wire   [8:0] add_ln17_1_fu_303_p2;
wire   [26:0] zext_ln180_2_fu_308_p1;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (flag_read_read_fu_102_p2 == 1'd1))) begin
        ii1_0_reg_158 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ii1_0_reg_158 <= ii_reg_369;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln7_fu_200_p2 == 1'd1))) begin
        kk3_0_reg_170 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        kk3_0_reg_170 <= kk_reg_403;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_A_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        B_V_addr_1_read_reg_419 <= m_axi_A_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_A_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        B_V_addr_read_reg_395 <= m_axi_A_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (flag_read_read_fu_102_p2 == 1'd1) & (icmp_ln14_fu_274_p2 == 1'd0))) begin
        add_ln180_1_reg_408 <= add_ln180_1_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln7_fu_200_p2 == 1'd0))) begin
        add_ln180_reg_374 <= add_ln180_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ii_reg_369 <= ii_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (flag_read_read_fu_102_p2 == 1'd1))) begin
        kk_reg_403 <= kk_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (flag_read_read_fu_102_p2 == 1'd1))) begin
        zext_ln10_1_reg_356[2 : 0] <= zext_ln10_1_fu_192_p1[2 : 0];
        zext_ln7_reg_361[25 : 0] <= zext_ln7_fu_196_p1[25 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln7_fu_200_p2 == 1'd1))) begin
        zext_ln14_reg_384[25 : 0] <= zext_ln14_fu_256_p1[25 : 0];
        zext_ln17_1_reg_379[2 : 0] <= zext_ln17_1_fu_252_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state3))) begin
        A_V_blk_n_AR = m_axi_A_V_ARREADY;
    end else begin
        A_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state10))) begin
        A_V_blk_n_R = m_axi_A_V_RVALID;
    end else begin
        A_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & ((icmp_ln14_fu_274_p2 == 1'd1) | (flag_read_read_fu_102_p2 == 1'd0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & ((icmp_ln14_fu_274_p2 == 1'd1) | (flag_read_read_fu_102_p2 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        local_A_0_V_ce0 = 1'b1;
    end else begin
        local_A_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        local_A_0_V_we0 = 1'b1;
    end else begin
        local_A_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        local_B_V_ce0 = 1'b1;
    end else begin
        local_B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        local_B_V_we0 = 1'b1;
    end else begin
        local_B_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_A_V_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            m_axi_A_V_ARADDR = zext_ln180_3_fu_317_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_A_V_ARADDR = zext_ln180_1_fu_259_p1;
        end else begin
            m_axi_A_V_ARADDR = 'bx;
        end
    end else begin
        m_axi_A_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_A_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((m_axi_A_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_A_V_ARVALID = 1'b1;
    end else begin
        m_axi_A_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_A_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((m_axi_A_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_A_V_RREADY = 1'b1;
    end else begin
        m_axi_A_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (flag_read_read_fu_102_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (flag_read_read_fu_102_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln7_fu_200_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_A_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_A_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & ((icmp_ln14_fu_274_p2 == 1'd1) | (flag_read_read_fu_102_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((m_axi_A_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((m_axi_A_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_229_p2 = (zext_ln10_1_reg_356 + shl_ln_fu_221_p3);

assign add_ln10_fu_216_p2 = (i + zext_ln10_2_fu_212_p1);

assign add_ln17_1_fu_303_p2 = (zext_ln17_1_reg_379 + shl_ln1_fu_295_p3);

assign add_ln17_fu_290_p2 = (k + zext_ln17_2_fu_286_p1);

assign add_ln180_1_fu_312_p2 = (zext_ln180_2_fu_308_p1 + zext_ln14_reg_384);

assign add_ln180_fu_238_p2 = (zext_ln180_fu_234_p1 + zext_ln7_reg_361);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign flag_read_read_fu_102_p2 = flag;

assign icmp_ln14_fu_274_p2 = ((kk3_0_reg_170 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_200_p2 = ((ii1_0_reg_158 == 5'd16) ? 1'b1 : 1'b0);

assign ii_fu_206_p2 = (ii1_0_reg_158 + 5'd1);

assign kk_fu_280_p2 = (kk3_0_reg_170 + 5'd1);

assign local_A_0_V_address0 = zext_ln10_fu_269_p1;

assign local_A_0_V_d0 = B_V_addr_read_reg_395;

assign local_B_V_address0 = zext_ln17_fu_327_p1;

assign local_B_V_d0 = B_V_addr_1_read_reg_419;

assign m_axi_A_V_ARBURST = 2'd0;

assign m_axi_A_V_ARCACHE = 4'd0;

assign m_axi_A_V_ARID = 1'd0;

assign m_axi_A_V_ARLEN = 32'd1;

assign m_axi_A_V_ARLOCK = 2'd0;

assign m_axi_A_V_ARPROT = 3'd0;

assign m_axi_A_V_ARQOS = 4'd0;

assign m_axi_A_V_ARREGION = 4'd0;

assign m_axi_A_V_ARSIZE = 3'd0;

assign m_axi_A_V_ARUSER = 1'd0;

assign m_axi_A_V_AWADDR = 32'd0;

assign m_axi_A_V_AWBURST = 2'd0;

assign m_axi_A_V_AWCACHE = 4'd0;

assign m_axi_A_V_AWID = 1'd0;

assign m_axi_A_V_AWLEN = 32'd0;

assign m_axi_A_V_AWLOCK = 2'd0;

assign m_axi_A_V_AWPROT = 3'd0;

assign m_axi_A_V_AWQOS = 4'd0;

assign m_axi_A_V_AWREGION = 4'd0;

assign m_axi_A_V_AWSIZE = 3'd0;

assign m_axi_A_V_AWUSER = 1'd0;

assign m_axi_A_V_AWVALID = 1'b0;

assign m_axi_A_V_BREADY = 1'b0;

assign m_axi_A_V_WDATA = 512'd0;

assign m_axi_A_V_WID = 1'd0;

assign m_axi_A_V_WLAST = 1'b0;

assign m_axi_A_V_WSTRB = 64'd0;

assign m_axi_A_V_WUSER = 1'd0;

assign m_axi_A_V_WVALID = 1'b0;

assign shl_ln1_fu_295_p3 = {{add_ln17_fu_290_p2}, {2'd0}};

assign shl_ln_fu_221_p3 = {{add_ln10_fu_216_p2}, {2'd0}};

assign trunc_ln1_fu_243_p4 = {{j[6:4]}};

assign trunc_ln_fu_182_p4 = {{k[6:4]}};

assign zext_ln10_1_fu_192_p1 = trunc_ln_fu_182_p4;

assign zext_ln10_2_fu_212_p1 = ii1_0_reg_158;

assign zext_ln10_fu_269_p1 = ii1_0_reg_158;

assign zext_ln14_fu_256_p1 = B_V_offset;

assign zext_ln17_1_fu_252_p1 = trunc_ln1_fu_243_p4;

assign zext_ln17_2_fu_286_p1 = kk3_0_reg_170;

assign zext_ln17_fu_327_p1 = kk3_0_reg_170;

assign zext_ln180_1_fu_259_p1 = add_ln180_reg_374;

assign zext_ln180_2_fu_308_p1 = add_ln17_1_fu_303_p2;

assign zext_ln180_3_fu_317_p1 = add_ln180_1_reg_408;

assign zext_ln180_fu_234_p1 = add_ln10_1_fu_229_p2;

assign zext_ln7_fu_196_p1 = A_V_offset;

always @ (posedge ap_clk) begin
    zext_ln10_1_reg_356[8:3] <= 6'b000000;
    zext_ln7_reg_361[26] <= 1'b0;
    zext_ln17_1_reg_379[8:3] <= 6'b000000;
    zext_ln14_reg_384[26] <= 1'b0;
end

endmodule //load
