-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flag : IN STD_LOGIC_VECTOR (0 downto 0);
    i : IN STD_LOGIC_VECTOR (6 downto 0);
    j : IN STD_LOGIC_VECTOR (6 downto 0);
    k : IN STD_LOGIC_VECTOR (6 downto 0);
    local_A_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_A_0_V_ce0 : OUT STD_LOGIC;
    local_A_0_V_we0 : OUT STD_LOGIC;
    local_A_0_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    local_B_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_B_V_ce0 : OUT STD_LOGIC;
    local_B_V_we0 : OUT STD_LOGIC;
    local_B_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_A_V_AWVALID : OUT STD_LOGIC;
    m_axi_A_V_AWREADY : IN STD_LOGIC;
    m_axi_A_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_WVALID : OUT STD_LOGIC;
    m_axi_A_V_WREADY : IN STD_LOGIC;
    m_axi_A_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_A_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_V_WLAST : OUT STD_LOGIC;
    m_axi_A_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_ARVALID : OUT STD_LOGIC;
    m_axi_A_V_ARREADY : IN STD_LOGIC;
    m_axi_A_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_RVALID : IN STD_LOGIC;
    m_axi_A_V_RREADY : OUT STD_LOGIC;
    m_axi_A_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_A_V_RLAST : IN STD_LOGIC;
    m_axi_A_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_BVALID : IN STD_LOGIC;
    m_axi_A_V_BREADY : OUT STD_LOGIC;
    m_axi_A_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    A_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    B_V_offset : IN STD_LOGIC_VECTOR (25 downto 0) );
end;


architecture behav of load is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal A_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal flag_read_read_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln10_1_fu_192_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln10_1_reg_356 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln7_fu_196_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln7_reg_361 : STD_LOGIC_VECTOR (26 downto 0);
    signal ii_fu_206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_reg_369 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln180_fu_238_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln180_reg_374 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln7_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln17_1_fu_252_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln17_1_reg_379 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln14_fu_256_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln14_reg_384 : STD_LOGIC_VECTOR (26 downto 0);
    signal B_V_addr_read_reg_395 : STD_LOGIC_VECTOR (511 downto 0);
    signal kk_fu_280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal kk_reg_403 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln180_1_fu_312_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln180_1_reg_408 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln14_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_V_addr_1_read_reg_419 : STD_LOGIC_VECTOR (511 downto 0);
    signal ii1_0_reg_158 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal kk3_0_reg_170 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln10_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_1_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_3_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_182_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln10_2_fu_212_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln10_fu_216_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_221_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln10_1_fu_229_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln180_fu_234_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln1_fu_243_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln17_2_fu_286_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln17_fu_290_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_fu_295_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln17_1_fu_303_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln180_2_fu_308_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ii1_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (flag_read_read_fu_102_p2 = ap_const_lv1_1))) then 
                ii1_0_reg_158 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ii1_0_reg_158 <= ii_reg_369;
            end if; 
        end if;
    end process;

    kk3_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln7_fu_200_p2 = ap_const_lv1_1))) then 
                kk3_0_reg_170 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                kk3_0_reg_170 <= kk_reg_403;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_A_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                B_V_addr_1_read_reg_419 <= m_axi_A_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_A_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                B_V_addr_read_reg_395 <= m_axi_A_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (flag_read_read_fu_102_p2 = ap_const_lv1_1) and (icmp_ln14_fu_274_p2 = ap_const_lv1_0))) then
                add_ln180_1_reg_408 <= add_ln180_1_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln7_fu_200_p2 = ap_const_lv1_0))) then
                add_ln180_reg_374 <= add_ln180_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ii_reg_369 <= ii_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (flag_read_read_fu_102_p2 = ap_const_lv1_1))) then
                kk_reg_403 <= kk_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (flag_read_read_fu_102_p2 = ap_const_lv1_1))) then
                    zext_ln10_1_reg_356(2 downto 0) <= zext_ln10_1_fu_192_p1(2 downto 0);
                    zext_ln7_reg_361(25 downto 0) <= zext_ln7_fu_196_p1(25 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln7_fu_200_p2 = ap_const_lv1_1))) then
                    zext_ln14_reg_384(25 downto 0) <= zext_ln14_fu_256_p1(25 downto 0);
                    zext_ln17_1_reg_379(2 downto 0) <= zext_ln17_1_fu_252_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln10_1_reg_356(8 downto 3) <= "000000";
    zext_ln7_reg_361(26) <= '0';
    zext_ln17_1_reg_379(8 downto 3) <= "000000";
    zext_ln14_reg_384(26) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_A_V_ARREADY, m_axi_A_V_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state20, flag_read_read_fu_102_p2, ap_CS_fsm_state2, icmp_ln7_fu_200_p2, ap_CS_fsm_state12, icmp_ln14_fu_274_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (flag_read_read_fu_102_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (flag_read_read_fu_102_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln7_fu_200_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_A_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_A_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln14_fu_274_p2 = ap_const_lv1_1) or (flag_read_read_fu_102_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((m_axi_A_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((m_axi_A_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_V_blk_n_AR_assign_proc : process(m_axi_A_V_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_V_blk_n_AR <= m_axi_A_V_ARREADY;
        else 
            A_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    A_V_blk_n_R_assign_proc : process(m_axi_A_V_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            A_V_blk_n_R <= m_axi_A_V_RVALID;
        else 
            A_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln10_1_fu_229_p2 <= std_logic_vector(unsigned(zext_ln10_1_reg_356) + unsigned(shl_ln_fu_221_p3));
    add_ln10_fu_216_p2 <= std_logic_vector(unsigned(i) + unsigned(zext_ln10_2_fu_212_p1));
    add_ln17_1_fu_303_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_379) + unsigned(shl_ln1_fu_295_p3));
    add_ln17_fu_290_p2 <= std_logic_vector(unsigned(k) + unsigned(zext_ln17_2_fu_286_p1));
    add_ln180_1_fu_312_p2 <= std_logic_vector(unsigned(zext_ln180_2_fu_308_p1) + unsigned(zext_ln14_reg_384));
    add_ln180_fu_238_p2 <= std_logic_vector(unsigned(zext_ln180_fu_234_p1) + unsigned(zext_ln7_reg_361));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, flag_read_read_fu_102_p2, ap_CS_fsm_state12, icmp_ln14_fu_274_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln14_fu_274_p2 = ap_const_lv1_1) or (flag_read_read_fu_102_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(flag_read_read_fu_102_p2, ap_CS_fsm_state12, icmp_ln14_fu_274_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln14_fu_274_p2 = ap_const_lv1_1) or (flag_read_read_fu_102_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    flag_read_read_fu_102_p2 <= flag;
    icmp_ln14_fu_274_p2 <= "1" when (kk3_0_reg_170 = ap_const_lv5_10) else "0";
    icmp_ln7_fu_200_p2 <= "1" when (ii1_0_reg_158 = ap_const_lv5_10) else "0";
    ii_fu_206_p2 <= std_logic_vector(unsigned(ii1_0_reg_158) + unsigned(ap_const_lv5_1));
    kk_fu_280_p2 <= std_logic_vector(unsigned(kk3_0_reg_170) + unsigned(ap_const_lv5_1));
    local_A_0_V_address0 <= zext_ln10_fu_269_p1(4 - 1 downto 0);

    local_A_0_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            local_A_0_V_ce0 <= ap_const_logic_1;
        else 
            local_A_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_A_0_V_d0 <= B_V_addr_read_reg_395;

    local_A_0_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            local_A_0_V_we0 <= ap_const_logic_1;
        else 
            local_A_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_V_address0 <= zext_ln17_fu_327_p1(4 - 1 downto 0);

    local_B_V_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            local_B_V_ce0 <= ap_const_logic_1;
        else 
            local_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_V_d0 <= B_V_addr_1_read_reg_419;

    local_B_V_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            local_B_V_we0 <= ap_const_logic_1;
        else 
            local_B_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_A_V_ARADDR_assign_proc : process(m_axi_A_V_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state13, zext_ln180_1_fu_259_p1, zext_ln180_3_fu_317_p1)
    begin
        if ((m_axi_A_V_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                m_axi_A_V_ARADDR <= zext_ln180_3_fu_317_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_A_V_ARADDR <= zext_ln180_1_fu_259_p1(32 - 1 downto 0);
            else 
                m_axi_A_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_A_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_A_V_ARBURST <= ap_const_lv2_0;
    m_axi_A_V_ARCACHE <= ap_const_lv4_0;
    m_axi_A_V_ARID <= ap_const_lv1_0;
    m_axi_A_V_ARLEN <= ap_const_lv32_1;
    m_axi_A_V_ARLOCK <= ap_const_lv2_0;
    m_axi_A_V_ARPROT <= ap_const_lv3_0;
    m_axi_A_V_ARQOS <= ap_const_lv4_0;
    m_axi_A_V_ARREGION <= ap_const_lv4_0;
    m_axi_A_V_ARSIZE <= ap_const_lv3_0;
    m_axi_A_V_ARUSER <= ap_const_lv1_0;

    m_axi_A_V_ARVALID_assign_proc : process(m_axi_A_V_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state13)
    begin
        if ((((m_axi_A_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_A_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_A_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_A_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_V_AWADDR <= ap_const_lv32_0;
    m_axi_A_V_AWBURST <= ap_const_lv2_0;
    m_axi_A_V_AWCACHE <= ap_const_lv4_0;
    m_axi_A_V_AWID <= ap_const_lv1_0;
    m_axi_A_V_AWLEN <= ap_const_lv32_0;
    m_axi_A_V_AWLOCK <= ap_const_lv2_0;
    m_axi_A_V_AWPROT <= ap_const_lv3_0;
    m_axi_A_V_AWQOS <= ap_const_lv4_0;
    m_axi_A_V_AWREGION <= ap_const_lv4_0;
    m_axi_A_V_AWSIZE <= ap_const_lv3_0;
    m_axi_A_V_AWUSER <= ap_const_lv1_0;
    m_axi_A_V_AWVALID <= ap_const_logic_0;
    m_axi_A_V_BREADY <= ap_const_logic_0;

    m_axi_A_V_RREADY_assign_proc : process(m_axi_A_V_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((((m_axi_A_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((m_axi_A_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            m_axi_A_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_A_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_A_V_WID <= ap_const_lv1_0;
    m_axi_A_V_WLAST <= ap_const_logic_0;
    m_axi_A_V_WSTRB <= ap_const_lv64_0;
    m_axi_A_V_WUSER <= ap_const_lv1_0;
    m_axi_A_V_WVALID <= ap_const_logic_0;
    shl_ln1_fu_295_p3 <= (add_ln17_fu_290_p2 & ap_const_lv2_0);
    shl_ln_fu_221_p3 <= (add_ln10_fu_216_p2 & ap_const_lv2_0);
    trunc_ln1_fu_243_p4 <= j(6 downto 4);
    trunc_ln_fu_182_p4 <= k(6 downto 4);
    zext_ln10_1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_182_p4),9));
    zext_ln10_2_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii1_0_reg_158),7));
    zext_ln10_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii1_0_reg_158),64));
    zext_ln14_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_offset),27));
    zext_ln17_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_243_p4),9));
    zext_ln17_2_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kk3_0_reg_170),7));
    zext_ln17_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kk3_0_reg_170),64));
    zext_ln180_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_reg_374),64));
    zext_ln180_2_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_1_fu_303_p2),27));
    zext_ln180_3_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_1_reg_408),64));
    zext_ln180_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln10_1_fu_229_p2),27));
    zext_ln7_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_V_offset),27));
end behav;
