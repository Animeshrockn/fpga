// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel_gemm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel_gemm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel_gemm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<50> kernel_gemm::ap_ST_fsm_state1 = "1";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state2 = "10";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state3 = "100";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state4 = "1000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state5 = "10000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state6 = "100000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state7 = "1000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state8 = "10000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state9 = "100000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state10 = "1000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state11 = "10000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state12 = "100000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<50> kernel_gemm::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<32> kernel_gemm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> kernel_gemm::ap_const_lv32_2 = "10";
const sc_lv<32> kernel_gemm::ap_const_lv32_8 = "1000";
const sc_lv<32> kernel_gemm::ap_const_lv32_12 = "10010";
const sc_lv<32> kernel_gemm::ap_const_lv32_9 = "1001";
const sc_lv<1> kernel_gemm::ap_const_lv1_0 = "0";
const sc_lv<32> kernel_gemm::ap_const_lv32_E = "1110";
const sc_lv<32> kernel_gemm::ap_const_lv32_1D = "11101";
const sc_lv<32> kernel_gemm::ap_const_lv32_24 = "100100";
const sc_lv<32> kernel_gemm::ap_const_lv32_2B = "101011";
const sc_lv<32> kernel_gemm::ap_const_lv32_2C = "101100";
const sc_lv<32> kernel_gemm::ap_const_lv32_31 = "110001";
const sc_lv<32> kernel_gemm::ap_const_lv32_15 = "10101";
const sc_lv<32> kernel_gemm::ap_const_lv32_1C = "11100";
const sc_lv<32> kernel_gemm::ap_const_lv32_19 = "11001";
const sc_lv<32> kernel_gemm::ap_const_lv32_20 = "100000";
const int kernel_gemm::C_S_AXI_DATA_WIDTH = "100000";
const int kernel_gemm::C_M_AXI_FUNC_BUS_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int kernel_gemm::C_M_AXI_FUNC_BUS_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int kernel_gemm::C_M_AXI_FUNC_BUS_CACHE_VALUE = "11";
const int kernel_gemm::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> kernel_gemm::ap_const_lv32_D = "1101";
const sc_lv<32> kernel_gemm::ap_const_lv32_1 = "1";
const sc_lv<32> kernel_gemm::ap_const_lv32_13 = "10011";
const sc_lv<32> kernel_gemm::ap_const_lv32_14 = "10100";
const sc_lv<12> kernel_gemm::ap_const_lv12_0 = "000000000000";
const sc_lv<1> kernel_gemm::ap_const_lv1_1 = "1";
const sc_lv<32> kernel_gemm::ap_const_lv32_800 = "100000000000";
const sc_lv<3> kernel_gemm::ap_const_lv3_0 = "000";
const sc_lv<2> kernel_gemm::ap_const_lv2_0 = "00";
const sc_lv<4> kernel_gemm::ap_const_lv4_0 = "0000";
const sc_lv<4> kernel_gemm::ap_const_lv4_F = "1111";
const sc_lv<32> kernel_gemm::ap_const_lv32_25 = "100101";
const sc_lv<32> kernel_gemm::ap_const_lv32_A = "1010";
const sc_lv<32> kernel_gemm::ap_const_lv32_21 = "100001";
const sc_lv<32> kernel_gemm::ap_const_lv32_1F = "11111";
const sc_lv<12> kernel_gemm::ap_const_lv12_800 = "100000000000";
const sc_lv<12> kernel_gemm::ap_const_lv12_1 = "1";
const sc_lv<11> kernel_gemm::ap_const_lv11_0 = "00000000000";
const sc_lv<32> kernel_gemm::ap_const_lv32_26 = "100110";
const sc_lv<32> kernel_gemm::ap_const_lv32_27 = "100111";
const sc_lv<32> kernel_gemm::ap_const_lv32_28 = "101000";
const sc_lv<32> kernel_gemm::ap_const_lv32_29 = "101001";
const sc_lv<32> kernel_gemm::ap_const_lv32_2A = "101010";
const sc_lv<32> kernel_gemm::ap_const_lv32_B = "1011";
const sc_lv<32> kernel_gemm::ap_const_lv32_C = "1100";
const sc_lv<32> kernel_gemm::ap_const_lv32_1E = "11110";
const sc_lv<32> kernel_gemm::ap_const_lv32_22 = "100010";
const sc_lv<32> kernel_gemm::ap_const_lv32_23 = "100011";
const bool kernel_gemm::ap_const_boolean_1 = true;

kernel_gemm::kernel_gemm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel_gemm_ctrl_bus_s_axi_U = new kernel_gemm_ctrl_bus_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("kernel_gemm_ctrl_bus_s_axi_U");
    kernel_gemm_ctrl_bus_s_axi_U->AWVALID(s_axi_ctrl_bus_AWVALID);
    kernel_gemm_ctrl_bus_s_axi_U->AWREADY(s_axi_ctrl_bus_AWREADY);
    kernel_gemm_ctrl_bus_s_axi_U->AWADDR(s_axi_ctrl_bus_AWADDR);
    kernel_gemm_ctrl_bus_s_axi_U->WVALID(s_axi_ctrl_bus_WVALID);
    kernel_gemm_ctrl_bus_s_axi_U->WREADY(s_axi_ctrl_bus_WREADY);
    kernel_gemm_ctrl_bus_s_axi_U->WDATA(s_axi_ctrl_bus_WDATA);
    kernel_gemm_ctrl_bus_s_axi_U->WSTRB(s_axi_ctrl_bus_WSTRB);
    kernel_gemm_ctrl_bus_s_axi_U->ARVALID(s_axi_ctrl_bus_ARVALID);
    kernel_gemm_ctrl_bus_s_axi_U->ARREADY(s_axi_ctrl_bus_ARREADY);
    kernel_gemm_ctrl_bus_s_axi_U->ARADDR(s_axi_ctrl_bus_ARADDR);
    kernel_gemm_ctrl_bus_s_axi_U->RVALID(s_axi_ctrl_bus_RVALID);
    kernel_gemm_ctrl_bus_s_axi_U->RREADY(s_axi_ctrl_bus_RREADY);
    kernel_gemm_ctrl_bus_s_axi_U->RDATA(s_axi_ctrl_bus_RDATA);
    kernel_gemm_ctrl_bus_s_axi_U->RRESP(s_axi_ctrl_bus_RRESP);
    kernel_gemm_ctrl_bus_s_axi_U->BVALID(s_axi_ctrl_bus_BVALID);
    kernel_gemm_ctrl_bus_s_axi_U->BREADY(s_axi_ctrl_bus_BREADY);
    kernel_gemm_ctrl_bus_s_axi_U->BRESP(s_axi_ctrl_bus_BRESP);
    kernel_gemm_ctrl_bus_s_axi_U->ACLK(ap_clk);
    kernel_gemm_ctrl_bus_s_axi_U->ARESET(ap_rst_n_inv);
    kernel_gemm_ctrl_bus_s_axi_U->ACLK_EN(ap_var_for_const0);
    kernel_gemm_ctrl_bus_s_axi_U->ap_start(ap_start);
    kernel_gemm_ctrl_bus_s_axi_U->interrupt(interrupt);
    kernel_gemm_ctrl_bus_s_axi_U->ap_ready(ap_ready);
    kernel_gemm_ctrl_bus_s_axi_U->ap_done(ap_done);
    kernel_gemm_ctrl_bus_s_axi_U->ap_idle(ap_idle);
    kernel_gemm_ctrl_bus_s_axi_U->C(C);
    kernel_gemm_ctrl_bus_s_axi_U->A(A);
    kernel_gemm_ctrl_bus_s_axi_U->B(B);
    kernel_gemm_func_bus_m_axi_U = new kernel_gemm_func_bus_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_FUNC_BUS_ID_WIDTH,C_M_AXI_FUNC_BUS_ADDR_WIDTH,C_M_AXI_FUNC_BUS_DATA_WIDTH,C_M_AXI_FUNC_BUS_AWUSER_WIDTH,C_M_AXI_FUNC_BUS_ARUSER_WIDTH,C_M_AXI_FUNC_BUS_WUSER_WIDTH,C_M_AXI_FUNC_BUS_RUSER_WIDTH,C_M_AXI_FUNC_BUS_BUSER_WIDTH,C_M_AXI_FUNC_BUS_USER_VALUE,C_M_AXI_FUNC_BUS_PROT_VALUE,C_M_AXI_FUNC_BUS_CACHE_VALUE>("kernel_gemm_func_bus_m_axi_U");
    kernel_gemm_func_bus_m_axi_U->AWVALID(m_axi_func_bus_AWVALID);
    kernel_gemm_func_bus_m_axi_U->AWREADY(m_axi_func_bus_AWREADY);
    kernel_gemm_func_bus_m_axi_U->AWADDR(m_axi_func_bus_AWADDR);
    kernel_gemm_func_bus_m_axi_U->AWID(m_axi_func_bus_AWID);
    kernel_gemm_func_bus_m_axi_U->AWLEN(m_axi_func_bus_AWLEN);
    kernel_gemm_func_bus_m_axi_U->AWSIZE(m_axi_func_bus_AWSIZE);
    kernel_gemm_func_bus_m_axi_U->AWBURST(m_axi_func_bus_AWBURST);
    kernel_gemm_func_bus_m_axi_U->AWLOCK(m_axi_func_bus_AWLOCK);
    kernel_gemm_func_bus_m_axi_U->AWCACHE(m_axi_func_bus_AWCACHE);
    kernel_gemm_func_bus_m_axi_U->AWPROT(m_axi_func_bus_AWPROT);
    kernel_gemm_func_bus_m_axi_U->AWQOS(m_axi_func_bus_AWQOS);
    kernel_gemm_func_bus_m_axi_U->AWREGION(m_axi_func_bus_AWREGION);
    kernel_gemm_func_bus_m_axi_U->AWUSER(m_axi_func_bus_AWUSER);
    kernel_gemm_func_bus_m_axi_U->WVALID(m_axi_func_bus_WVALID);
    kernel_gemm_func_bus_m_axi_U->WREADY(m_axi_func_bus_WREADY);
    kernel_gemm_func_bus_m_axi_U->WDATA(m_axi_func_bus_WDATA);
    kernel_gemm_func_bus_m_axi_U->WSTRB(m_axi_func_bus_WSTRB);
    kernel_gemm_func_bus_m_axi_U->WLAST(m_axi_func_bus_WLAST);
    kernel_gemm_func_bus_m_axi_U->WID(m_axi_func_bus_WID);
    kernel_gemm_func_bus_m_axi_U->WUSER(m_axi_func_bus_WUSER);
    kernel_gemm_func_bus_m_axi_U->ARVALID(m_axi_func_bus_ARVALID);
    kernel_gemm_func_bus_m_axi_U->ARREADY(m_axi_func_bus_ARREADY);
    kernel_gemm_func_bus_m_axi_U->ARADDR(m_axi_func_bus_ARADDR);
    kernel_gemm_func_bus_m_axi_U->ARID(m_axi_func_bus_ARID);
    kernel_gemm_func_bus_m_axi_U->ARLEN(m_axi_func_bus_ARLEN);
    kernel_gemm_func_bus_m_axi_U->ARSIZE(m_axi_func_bus_ARSIZE);
    kernel_gemm_func_bus_m_axi_U->ARBURST(m_axi_func_bus_ARBURST);
    kernel_gemm_func_bus_m_axi_U->ARLOCK(m_axi_func_bus_ARLOCK);
    kernel_gemm_func_bus_m_axi_U->ARCACHE(m_axi_func_bus_ARCACHE);
    kernel_gemm_func_bus_m_axi_U->ARPROT(m_axi_func_bus_ARPROT);
    kernel_gemm_func_bus_m_axi_U->ARQOS(m_axi_func_bus_ARQOS);
    kernel_gemm_func_bus_m_axi_U->ARREGION(m_axi_func_bus_ARREGION);
    kernel_gemm_func_bus_m_axi_U->ARUSER(m_axi_func_bus_ARUSER);
    kernel_gemm_func_bus_m_axi_U->RVALID(m_axi_func_bus_RVALID);
    kernel_gemm_func_bus_m_axi_U->RREADY(m_axi_func_bus_RREADY);
    kernel_gemm_func_bus_m_axi_U->RDATA(m_axi_func_bus_RDATA);
    kernel_gemm_func_bus_m_axi_U->RLAST(m_axi_func_bus_RLAST);
    kernel_gemm_func_bus_m_axi_U->RID(m_axi_func_bus_RID);
    kernel_gemm_func_bus_m_axi_U->RUSER(m_axi_func_bus_RUSER);
    kernel_gemm_func_bus_m_axi_U->RRESP(m_axi_func_bus_RRESP);
    kernel_gemm_func_bus_m_axi_U->BVALID(m_axi_func_bus_BVALID);
    kernel_gemm_func_bus_m_axi_U->BREADY(m_axi_func_bus_BREADY);
    kernel_gemm_func_bus_m_axi_U->BRESP(m_axi_func_bus_BRESP);
    kernel_gemm_func_bus_m_axi_U->BID(m_axi_func_bus_BID);
    kernel_gemm_func_bus_m_axi_U->BUSER(m_axi_func_bus_BUSER);
    kernel_gemm_func_bus_m_axi_U->ACLK(ap_clk);
    kernel_gemm_func_bus_m_axi_U->ARESET(ap_rst_n_inv);
    kernel_gemm_func_bus_m_axi_U->ACLK_EN(ap_var_for_const0);
    kernel_gemm_func_bus_m_axi_U->I_ARVALID(func_bus_ARVALID);
    kernel_gemm_func_bus_m_axi_U->I_ARREADY(func_bus_ARREADY);
    kernel_gemm_func_bus_m_axi_U->I_ARADDR(func_bus_ARADDR);
    kernel_gemm_func_bus_m_axi_U->I_ARID(ap_var_for_const1);
    kernel_gemm_func_bus_m_axi_U->I_ARLEN(func_bus_ARLEN);
    kernel_gemm_func_bus_m_axi_U->I_ARSIZE(ap_var_for_const2);
    kernel_gemm_func_bus_m_axi_U->I_ARLOCK(ap_var_for_const3);
    kernel_gemm_func_bus_m_axi_U->I_ARCACHE(ap_var_for_const4);
    kernel_gemm_func_bus_m_axi_U->I_ARQOS(ap_var_for_const4);
    kernel_gemm_func_bus_m_axi_U->I_ARPROT(ap_var_for_const2);
    kernel_gemm_func_bus_m_axi_U->I_ARUSER(ap_var_for_const1);
    kernel_gemm_func_bus_m_axi_U->I_ARBURST(ap_var_for_const3);
    kernel_gemm_func_bus_m_axi_U->I_ARREGION(ap_var_for_const4);
    kernel_gemm_func_bus_m_axi_U->I_RVALID(func_bus_RVALID);
    kernel_gemm_func_bus_m_axi_U->I_RREADY(func_bus_RREADY);
    kernel_gemm_func_bus_m_axi_U->I_RDATA(func_bus_RDATA);
    kernel_gemm_func_bus_m_axi_U->I_RID(func_bus_RID);
    kernel_gemm_func_bus_m_axi_U->I_RUSER(func_bus_RUSER);
    kernel_gemm_func_bus_m_axi_U->I_RRESP(func_bus_RRESP);
    kernel_gemm_func_bus_m_axi_U->I_RLAST(func_bus_RLAST);
    kernel_gemm_func_bus_m_axi_U->I_AWVALID(func_bus_AWVALID);
    kernel_gemm_func_bus_m_axi_U->I_AWREADY(func_bus_AWREADY);
    kernel_gemm_func_bus_m_axi_U->I_AWADDR(func_bus_AWADDR);
    kernel_gemm_func_bus_m_axi_U->I_AWID(ap_var_for_const1);
    kernel_gemm_func_bus_m_axi_U->I_AWLEN(func_bus_AWLEN);
    kernel_gemm_func_bus_m_axi_U->I_AWSIZE(ap_var_for_const2);
    kernel_gemm_func_bus_m_axi_U->I_AWLOCK(ap_var_for_const3);
    kernel_gemm_func_bus_m_axi_U->I_AWCACHE(ap_var_for_const4);
    kernel_gemm_func_bus_m_axi_U->I_AWQOS(ap_var_for_const4);
    kernel_gemm_func_bus_m_axi_U->I_AWPROT(ap_var_for_const2);
    kernel_gemm_func_bus_m_axi_U->I_AWUSER(ap_var_for_const1);
    kernel_gemm_func_bus_m_axi_U->I_AWBURST(ap_var_for_const3);
    kernel_gemm_func_bus_m_axi_U->I_AWREGION(ap_var_for_const4);
    kernel_gemm_func_bus_m_axi_U->I_WVALID(func_bus_WVALID);
    kernel_gemm_func_bus_m_axi_U->I_WREADY(func_bus_WREADY);
    kernel_gemm_func_bus_m_axi_U->I_WDATA(func_bus_WDATA);
    kernel_gemm_func_bus_m_axi_U->I_WID(ap_var_for_const1);
    kernel_gemm_func_bus_m_axi_U->I_WUSER(ap_var_for_const1);
    kernel_gemm_func_bus_m_axi_U->I_WLAST(ap_var_for_const5);
    kernel_gemm_func_bus_m_axi_U->I_WSTRB(ap_var_for_const6);
    kernel_gemm_func_bus_m_axi_U->I_BVALID(func_bus_BVALID);
    kernel_gemm_func_bus_m_axi_U->I_BREADY(func_bus_BREADY);
    kernel_gemm_func_bus_m_axi_U->I_BRESP(func_bus_BRESP);
    kernel_gemm_func_bus_m_axi_U->I_BID(func_bus_BID);
    kernel_gemm_func_bus_m_axi_U->I_BUSER(func_bus_BUSER);
    kernel_gemm_fadd_bkb_U1 = new kernel_gemm_fadd_bkb<1,7,32,32,32>("kernel_gemm_fadd_bkb_U1");
    kernel_gemm_fadd_bkb_U1->clk(ap_clk);
    kernel_gemm_fadd_bkb_U1->reset(ap_rst_n_inv);
    kernel_gemm_fadd_bkb_U1->din0(func_bus_addr_1_read_reg_585);
    kernel_gemm_fadd_bkb_U1->din1(reg_240);
    kernel_gemm_fadd_bkb_U1->ce(grp_fu_232_ce);
    kernel_gemm_fadd_bkb_U1->dout(grp_fu_232_p2);
    kernel_gemm_fmul_cud_U2 = new kernel_gemm_fmul_cud<1,4,32,32,32>("kernel_gemm_fmul_cud_U2");
    kernel_gemm_fmul_cud_U2->clk(ap_clk);
    kernel_gemm_fmul_cud_U2->reset(ap_rst_n_inv);
    kernel_gemm_fmul_cud_U2->din0(grp_fu_236_p0);
    kernel_gemm_fmul_cud_U2->din1(grp_fu_236_p1);
    kernel_gemm_fmul_cud_U2->ce(grp_fu_236_ce);
    kernel_gemm_fmul_cud_U2->dout(grp_fu_236_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln19_fu_317_p2);
    sensitive << ( p_cast_reg_480 );
    sensitive << ( zext_ln19_fu_313_p1 );

    SC_METHOD(thread_add_ln23_1_fu_400_p2);
    sensitive << ( shl_ln_reg_494 );
    sensitive << ( zext_ln22_fu_384_p1 );

    SC_METHOD(thread_add_ln23_2_fu_426_p2);
    sensitive << ( zext_ln21_reg_525 );
    sensitive << ( shl_ln1_fu_418_p3 );

    SC_METHOD(thread_add_ln23_3_fu_369_p2);
    sensitive << ( p_cast_reg_480 );
    sensitive << ( zext_ln23_fu_365_p1 );

    SC_METHOD(thread_add_ln23_4_fu_409_p2);
    sensitive << ( p_cast9_reg_475 );
    sensitive << ( zext_ln23_2_fu_405_p1 );

    SC_METHOD(thread_add_ln23_5_fu_435_p2);
    sensitive << ( p_cast10_reg_470 );
    sensitive << ( zext_ln23_4_fu_431_p1 );

    SC_METHOD(thread_add_ln23_fu_360_p2);
    sensitive << ( shl_ln_reg_494 );
    sensitive << ( zext_ln21_fu_344_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state10);
    sensitive << ( icmp_ln18_fu_332_p2 );
    sensitive << ( func_bus_RVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_289_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_289_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_func_bus_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( func_bus_ARREADY );
    sensitive << ( func_bus_addr_1_reg_538 );
    sensitive << ( zext_ln19_1_fu_322_p1 );
    sensitive << ( zext_ln23_3_fu_440_p1 );
    sensitive << ( zext_ln23_5_fu_450_p1 );

    SC_METHOD(thread_func_bus_ARLEN);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( func_bus_ARREADY );

    SC_METHOD(thread_func_bus_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( func_bus_ARREADY );

    SC_METHOD(thread_func_bus_AWADDR);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( func_bus_AWREADY );
    sensitive << ( func_bus_addr_reg_505 );
    sensitive << ( func_bus_addr_1_reg_538 );

    SC_METHOD(thread_func_bus_AWLEN);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( func_bus_AWREADY );

    SC_METHOD(thread_func_bus_AWVALID);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( func_bus_AWREADY );

    SC_METHOD(thread_func_bus_BREADY);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( func_bus_BVALID );

    SC_METHOD(thread_func_bus_RREADY);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln18_fu_332_p2 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( func_bus_RVALID );

    SC_METHOD(thread_func_bus_WDATA);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( reg_240 );
    sensitive << ( tmp_3_reg_590 );

    SC_METHOD(thread_func_bus_WVALID);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( func_bus_WREADY );

    SC_METHOD(thread_func_bus_blk_n_AR);
    sensitive << ( m_axi_func_bus_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_func_bus_blk_n_AW);
    sensitive << ( m_axi_func_bus_AWREADY );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_func_bus_blk_n_B);
    sensitive << ( m_axi_func_bus_BVALID );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_func_bus_blk_n_R);
    sensitive << ( m_axi_func_bus_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln18_fu_332_p2 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_func_bus_blk_n_W);
    sensitive << ( m_axi_func_bus_WREADY );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_grp_fu_232_ce);
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( func_bus_AWREADY );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_grp_fu_236_ce);
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( func_bus_ARREADY );
    sensitive << ( func_bus_RVALID );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_grp_fu_236_p0);
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( reg_240 );
    sensitive << ( func_bus_addr_read_reg_520 );
    sensitive << ( func_bus_addr_2_read_reg_575 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_grp_fu_236_p1);
    sensitive << ( alpha );
    sensitive << ( beta );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( func_bus_addr_3_read_reg_580 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_i_fu_295_p2);
    sensitive << ( i_0_reg_188 );

    SC_METHOD(thread_icmp_ln17_fu_289_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_188 );

    SC_METHOD(thread_icmp_ln18_fu_332_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln18_fu_332_p2 );
    sensitive << ( func_bus_RVALID );
    sensitive << ( j_0_reg_199 );

    SC_METHOD(thread_icmp_ln21_fu_348_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( j1_0_reg_210 );

    SC_METHOD(thread_icmp_ln22_fu_388_p2);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( k_0_reg_221 );

    SC_METHOD(thread_j_1_fu_354_p2);
    sensitive << ( j1_0_reg_210 );

    SC_METHOD(thread_j_fu_338_p2);
    sensitive << ( j_0_reg_199 );

    SC_METHOD(thread_k_fu_394_p2);
    sensitive << ( k_0_reg_221 );

    SC_METHOD(thread_p_cast10_fu_257_p1);
    sensitive << ( tmp_6_fu_247_p4 );

    SC_METHOD(thread_p_cast9_fu_271_p1);
    sensitive << ( tmp_7_fu_261_p4 );

    SC_METHOD(thread_p_cast_fu_285_p1);
    sensitive << ( tmp_8_fu_275_p4 );

    SC_METHOD(thread_shl_ln1_fu_418_p3);
    sensitive << ( trunc_ln23_fu_414_p1 );

    SC_METHOD(thread_shl_ln_fu_305_p3);
    sensitive << ( trunc_ln19_fu_301_p1 );

    SC_METHOD(thread_tmp_6_fu_247_p4);
    sensitive << ( B );

    SC_METHOD(thread_tmp_7_fu_261_p4);
    sensitive << ( A );

    SC_METHOD(thread_tmp_8_fu_275_p4);
    sensitive << ( C );

    SC_METHOD(thread_trunc_ln19_fu_301_p1);
    sensitive << ( i_0_reg_188 );

    SC_METHOD(thread_trunc_ln23_fu_414_p1);
    sensitive << ( k_0_reg_221 );

    SC_METHOD(thread_zext_ln19_1_fu_322_p1);
    sensitive << ( add_ln19_reg_500 );

    SC_METHOD(thread_zext_ln19_fu_313_p1);
    sensitive << ( shl_ln_fu_305_p3 );

    SC_METHOD(thread_zext_ln21_fu_344_p1);
    sensitive << ( j1_0_reg_210 );

    SC_METHOD(thread_zext_ln22_fu_384_p1);
    sensitive << ( k_0_reg_221 );

    SC_METHOD(thread_zext_ln23_1_fu_374_p1);
    sensitive << ( add_ln23_3_fu_369_p2 );

    SC_METHOD(thread_zext_ln23_2_fu_405_p1);
    sensitive << ( add_ln23_1_fu_400_p2 );

    SC_METHOD(thread_zext_ln23_3_fu_440_p1);
    sensitive << ( add_ln23_4_reg_553 );

    SC_METHOD(thread_zext_ln23_4_fu_431_p1);
    sensitive << ( add_ln23_2_fu_426_p2 );

    SC_METHOD(thread_zext_ln23_5_fu_450_p1);
    sensitive << ( add_ln23_5_reg_558 );

    SC_METHOD(thread_zext_ln23_fu_365_p1);
    sensitive << ( add_ln23_fu_360_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln18_fu_332_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( func_bus_AWREADY );
    sensitive << ( func_bus_WREADY );
    sensitive << ( func_bus_ARREADY );
    sensitive << ( func_bus_RVALID );
    sensitive << ( func_bus_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_289_p2 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( icmp_ln21_fu_348_p2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( icmp_ln22_fu_388_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const6);

    ap_CS_fsm = "00000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel_gemm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_func_bus_AWVALID, "(port)m_axi_func_bus_AWVALID");
    sc_trace(mVcdFile, m_axi_func_bus_AWREADY, "(port)m_axi_func_bus_AWREADY");
    sc_trace(mVcdFile, m_axi_func_bus_AWADDR, "(port)m_axi_func_bus_AWADDR");
    sc_trace(mVcdFile, m_axi_func_bus_AWID, "(port)m_axi_func_bus_AWID");
    sc_trace(mVcdFile, m_axi_func_bus_AWLEN, "(port)m_axi_func_bus_AWLEN");
    sc_trace(mVcdFile, m_axi_func_bus_AWSIZE, "(port)m_axi_func_bus_AWSIZE");
    sc_trace(mVcdFile, m_axi_func_bus_AWBURST, "(port)m_axi_func_bus_AWBURST");
    sc_trace(mVcdFile, m_axi_func_bus_AWLOCK, "(port)m_axi_func_bus_AWLOCK");
    sc_trace(mVcdFile, m_axi_func_bus_AWCACHE, "(port)m_axi_func_bus_AWCACHE");
    sc_trace(mVcdFile, m_axi_func_bus_AWPROT, "(port)m_axi_func_bus_AWPROT");
    sc_trace(mVcdFile, m_axi_func_bus_AWQOS, "(port)m_axi_func_bus_AWQOS");
    sc_trace(mVcdFile, m_axi_func_bus_AWREGION, "(port)m_axi_func_bus_AWREGION");
    sc_trace(mVcdFile, m_axi_func_bus_AWUSER, "(port)m_axi_func_bus_AWUSER");
    sc_trace(mVcdFile, m_axi_func_bus_WVALID, "(port)m_axi_func_bus_WVALID");
    sc_trace(mVcdFile, m_axi_func_bus_WREADY, "(port)m_axi_func_bus_WREADY");
    sc_trace(mVcdFile, m_axi_func_bus_WDATA, "(port)m_axi_func_bus_WDATA");
    sc_trace(mVcdFile, m_axi_func_bus_WSTRB, "(port)m_axi_func_bus_WSTRB");
    sc_trace(mVcdFile, m_axi_func_bus_WLAST, "(port)m_axi_func_bus_WLAST");
    sc_trace(mVcdFile, m_axi_func_bus_WID, "(port)m_axi_func_bus_WID");
    sc_trace(mVcdFile, m_axi_func_bus_WUSER, "(port)m_axi_func_bus_WUSER");
    sc_trace(mVcdFile, m_axi_func_bus_ARVALID, "(port)m_axi_func_bus_ARVALID");
    sc_trace(mVcdFile, m_axi_func_bus_ARREADY, "(port)m_axi_func_bus_ARREADY");
    sc_trace(mVcdFile, m_axi_func_bus_ARADDR, "(port)m_axi_func_bus_ARADDR");
    sc_trace(mVcdFile, m_axi_func_bus_ARID, "(port)m_axi_func_bus_ARID");
    sc_trace(mVcdFile, m_axi_func_bus_ARLEN, "(port)m_axi_func_bus_ARLEN");
    sc_trace(mVcdFile, m_axi_func_bus_ARSIZE, "(port)m_axi_func_bus_ARSIZE");
    sc_trace(mVcdFile, m_axi_func_bus_ARBURST, "(port)m_axi_func_bus_ARBURST");
    sc_trace(mVcdFile, m_axi_func_bus_ARLOCK, "(port)m_axi_func_bus_ARLOCK");
    sc_trace(mVcdFile, m_axi_func_bus_ARCACHE, "(port)m_axi_func_bus_ARCACHE");
    sc_trace(mVcdFile, m_axi_func_bus_ARPROT, "(port)m_axi_func_bus_ARPROT");
    sc_trace(mVcdFile, m_axi_func_bus_ARQOS, "(port)m_axi_func_bus_ARQOS");
    sc_trace(mVcdFile, m_axi_func_bus_ARREGION, "(port)m_axi_func_bus_ARREGION");
    sc_trace(mVcdFile, m_axi_func_bus_ARUSER, "(port)m_axi_func_bus_ARUSER");
    sc_trace(mVcdFile, m_axi_func_bus_RVALID, "(port)m_axi_func_bus_RVALID");
    sc_trace(mVcdFile, m_axi_func_bus_RREADY, "(port)m_axi_func_bus_RREADY");
    sc_trace(mVcdFile, m_axi_func_bus_RDATA, "(port)m_axi_func_bus_RDATA");
    sc_trace(mVcdFile, m_axi_func_bus_RLAST, "(port)m_axi_func_bus_RLAST");
    sc_trace(mVcdFile, m_axi_func_bus_RID, "(port)m_axi_func_bus_RID");
    sc_trace(mVcdFile, m_axi_func_bus_RUSER, "(port)m_axi_func_bus_RUSER");
    sc_trace(mVcdFile, m_axi_func_bus_RRESP, "(port)m_axi_func_bus_RRESP");
    sc_trace(mVcdFile, m_axi_func_bus_BVALID, "(port)m_axi_func_bus_BVALID");
    sc_trace(mVcdFile, m_axi_func_bus_BREADY, "(port)m_axi_func_bus_BREADY");
    sc_trace(mVcdFile, m_axi_func_bus_BRESP, "(port)m_axi_func_bus_BRESP");
    sc_trace(mVcdFile, m_axi_func_bus_BID, "(port)m_axi_func_bus_BID");
    sc_trace(mVcdFile, m_axi_func_bus_BUSER, "(port)m_axi_func_bus_BUSER");
    sc_trace(mVcdFile, alpha, "(port)alpha");
    sc_trace(mVcdFile, beta, "(port)beta");
    sc_trace(mVcdFile, s_axi_ctrl_bus_AWVALID, "(port)s_axi_ctrl_bus_AWVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_AWREADY, "(port)s_axi_ctrl_bus_AWREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_AWADDR, "(port)s_axi_ctrl_bus_AWADDR");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WVALID, "(port)s_axi_ctrl_bus_WVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WREADY, "(port)s_axi_ctrl_bus_WREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WDATA, "(port)s_axi_ctrl_bus_WDATA");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WSTRB, "(port)s_axi_ctrl_bus_WSTRB");
    sc_trace(mVcdFile, s_axi_ctrl_bus_ARVALID, "(port)s_axi_ctrl_bus_ARVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_ARREADY, "(port)s_axi_ctrl_bus_ARREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_ARADDR, "(port)s_axi_ctrl_bus_ARADDR");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RVALID, "(port)s_axi_ctrl_bus_RVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RREADY, "(port)s_axi_ctrl_bus_RREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RDATA, "(port)s_axi_ctrl_bus_RDATA");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RRESP, "(port)s_axi_ctrl_bus_RRESP");
    sc_trace(mVcdFile, s_axi_ctrl_bus_BVALID, "(port)s_axi_ctrl_bus_BVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_BREADY, "(port)s_axi_ctrl_bus_BREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_BRESP, "(port)s_axi_ctrl_bus_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, C, "C");
    sc_trace(mVcdFile, A, "A");
    sc_trace(mVcdFile, B, "B");
    sc_trace(mVcdFile, func_bus_blk_n_AR, "func_bus_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, func_bus_blk_n_AW, "func_bus_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, func_bus_blk_n_B, "func_bus_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, func_bus_blk_n_R, "func_bus_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, icmp_ln18_fu_332_p2, "icmp_ln18_fu_332_p2");
    sc_trace(mVcdFile, func_bus_blk_n_W, "func_bus_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, func_bus_AWVALID, "func_bus_AWVALID");
    sc_trace(mVcdFile, func_bus_AWREADY, "func_bus_AWREADY");
    sc_trace(mVcdFile, func_bus_AWADDR, "func_bus_AWADDR");
    sc_trace(mVcdFile, func_bus_AWLEN, "func_bus_AWLEN");
    sc_trace(mVcdFile, func_bus_WVALID, "func_bus_WVALID");
    sc_trace(mVcdFile, func_bus_WREADY, "func_bus_WREADY");
    sc_trace(mVcdFile, func_bus_WDATA, "func_bus_WDATA");
    sc_trace(mVcdFile, func_bus_ARVALID, "func_bus_ARVALID");
    sc_trace(mVcdFile, func_bus_ARREADY, "func_bus_ARREADY");
    sc_trace(mVcdFile, func_bus_ARADDR, "func_bus_ARADDR");
    sc_trace(mVcdFile, func_bus_ARLEN, "func_bus_ARLEN");
    sc_trace(mVcdFile, func_bus_RVALID, "func_bus_RVALID");
    sc_trace(mVcdFile, func_bus_RREADY, "func_bus_RREADY");
    sc_trace(mVcdFile, func_bus_RDATA, "func_bus_RDATA");
    sc_trace(mVcdFile, func_bus_RLAST, "func_bus_RLAST");
    sc_trace(mVcdFile, func_bus_RID, "func_bus_RID");
    sc_trace(mVcdFile, func_bus_RUSER, "func_bus_RUSER");
    sc_trace(mVcdFile, func_bus_RRESP, "func_bus_RRESP");
    sc_trace(mVcdFile, func_bus_BVALID, "func_bus_BVALID");
    sc_trace(mVcdFile, func_bus_BREADY, "func_bus_BREADY");
    sc_trace(mVcdFile, func_bus_BRESP, "func_bus_BRESP");
    sc_trace(mVcdFile, func_bus_BID, "func_bus_BID");
    sc_trace(mVcdFile, func_bus_BUSER, "func_bus_BUSER");
    sc_trace(mVcdFile, grp_fu_236_p2, "grp_fu_236_p2");
    sc_trace(mVcdFile, reg_240, "reg_240");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, p_cast10_fu_257_p1, "p_cast10_fu_257_p1");
    sc_trace(mVcdFile, p_cast10_reg_470, "p_cast10_reg_470");
    sc_trace(mVcdFile, p_cast9_fu_271_p1, "p_cast9_fu_271_p1");
    sc_trace(mVcdFile, p_cast9_reg_475, "p_cast9_reg_475");
    sc_trace(mVcdFile, p_cast_fu_285_p1, "p_cast_fu_285_p1");
    sc_trace(mVcdFile, p_cast_reg_480, "p_cast_reg_480");
    sc_trace(mVcdFile, i_fu_295_p2, "i_fu_295_p2");
    sc_trace(mVcdFile, i_reg_489, "i_reg_489");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, shl_ln_fu_305_p3, "shl_ln_fu_305_p3");
    sc_trace(mVcdFile, shl_ln_reg_494, "shl_ln_reg_494");
    sc_trace(mVcdFile, icmp_ln17_fu_289_p2, "icmp_ln17_fu_289_p2");
    sc_trace(mVcdFile, add_ln19_fu_317_p2, "add_ln19_fu_317_p2");
    sc_trace(mVcdFile, add_ln19_reg_500, "add_ln19_reg_500");
    sc_trace(mVcdFile, func_bus_addr_reg_505, "func_bus_addr_reg_505");
    sc_trace(mVcdFile, j_fu_338_p2, "j_fu_338_p2");
    sc_trace(mVcdFile, j_reg_515, "j_reg_515");
    sc_trace(mVcdFile, ap_block_state10, "ap_block_state10");
    sc_trace(mVcdFile, func_bus_addr_read_reg_520, "func_bus_addr_read_reg_520");
    sc_trace(mVcdFile, zext_ln21_fu_344_p1, "zext_ln21_fu_344_p1");
    sc_trace(mVcdFile, zext_ln21_reg_525, "zext_ln21_reg_525");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, j_1_fu_354_p2, "j_1_fu_354_p2");
    sc_trace(mVcdFile, j_1_reg_533, "j_1_reg_533");
    sc_trace(mVcdFile, func_bus_addr_1_reg_538, "func_bus_addr_1_reg_538");
    sc_trace(mVcdFile, icmp_ln21_fu_348_p2, "icmp_ln21_fu_348_p2");
    sc_trace(mVcdFile, k_fu_394_p2, "k_fu_394_p2");
    sc_trace(mVcdFile, k_reg_548, "k_reg_548");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, add_ln23_4_fu_409_p2, "add_ln23_4_fu_409_p2");
    sc_trace(mVcdFile, add_ln23_4_reg_553, "add_ln23_4_reg_553");
    sc_trace(mVcdFile, icmp_ln22_fu_388_p2, "icmp_ln22_fu_388_p2");
    sc_trace(mVcdFile, add_ln23_5_fu_435_p2, "add_ln23_5_fu_435_p2");
    sc_trace(mVcdFile, add_ln23_5_reg_558, "add_ln23_5_reg_558");
    sc_trace(mVcdFile, func_bus_addr_2_read_reg_575, "func_bus_addr_2_read_reg_575");
    sc_trace(mVcdFile, func_bus_addr_3_read_reg_580, "func_bus_addr_3_read_reg_580");
    sc_trace(mVcdFile, func_bus_addr_1_read_reg_585, "func_bus_addr_1_read_reg_585");
    sc_trace(mVcdFile, grp_fu_232_p2, "grp_fu_232_p2");
    sc_trace(mVcdFile, tmp_3_reg_590, "tmp_3_reg_590");
    sc_trace(mVcdFile, i_0_reg_188, "i_0_reg_188");
    sc_trace(mVcdFile, j_0_reg_199, "j_0_reg_199");
    sc_trace(mVcdFile, j1_0_reg_210, "j1_0_reg_210");
    sc_trace(mVcdFile, k_0_reg_221, "k_0_reg_221");
    sc_trace(mVcdFile, zext_ln19_1_fu_322_p1, "zext_ln19_1_fu_322_p1");
    sc_trace(mVcdFile, zext_ln23_1_fu_374_p1, "zext_ln23_1_fu_374_p1");
    sc_trace(mVcdFile, zext_ln23_3_fu_440_p1, "zext_ln23_3_fu_440_p1");
    sc_trace(mVcdFile, zext_ln23_5_fu_450_p1, "zext_ln23_5_fu_450_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, grp_fu_236_p0, "grp_fu_236_p0");
    sc_trace(mVcdFile, grp_fu_236_p1, "grp_fu_236_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, tmp_6_fu_247_p4, "tmp_6_fu_247_p4");
    sc_trace(mVcdFile, tmp_7_fu_261_p4, "tmp_7_fu_261_p4");
    sc_trace(mVcdFile, tmp_8_fu_275_p4, "tmp_8_fu_275_p4");
    sc_trace(mVcdFile, trunc_ln19_fu_301_p1, "trunc_ln19_fu_301_p1");
    sc_trace(mVcdFile, zext_ln19_fu_313_p1, "zext_ln19_fu_313_p1");
    sc_trace(mVcdFile, add_ln23_fu_360_p2, "add_ln23_fu_360_p2");
    sc_trace(mVcdFile, zext_ln23_fu_365_p1, "zext_ln23_fu_365_p1");
    sc_trace(mVcdFile, add_ln23_3_fu_369_p2, "add_ln23_3_fu_369_p2");
    sc_trace(mVcdFile, zext_ln22_fu_384_p1, "zext_ln22_fu_384_p1");
    sc_trace(mVcdFile, add_ln23_1_fu_400_p2, "add_ln23_1_fu_400_p2");
    sc_trace(mVcdFile, zext_ln23_2_fu_405_p1, "zext_ln23_2_fu_405_p1");
    sc_trace(mVcdFile, trunc_ln23_fu_414_p1, "trunc_ln23_fu_414_p1");
    sc_trace(mVcdFile, shl_ln1_fu_418_p3, "shl_ln1_fu_418_p3");
    sc_trace(mVcdFile, add_ln23_2_fu_426_p2, "add_ln23_2_fu_426_p2");
    sc_trace(mVcdFile, zext_ln23_4_fu_431_p1, "zext_ln23_4_fu_431_p1");
    sc_trace(mVcdFile, grp_fu_232_ce, "grp_fu_232_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, grp_fu_236_ce, "grp_fu_236_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("kernel_gemm.hdltvin.dat");
    mHdltvoutHandle.open("kernel_gemm.hdltvout.dat");
}

kernel_gemm::~kernel_gemm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel_gemm_ctrl_bus_s_axi_U;
    delete kernel_gemm_func_bus_m_axi_U;
    delete kernel_gemm_fadd_bkb_U1;
    delete kernel_gemm_fmul_cud_U2;
}

void kernel_gemm::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void kernel_gemm::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_logic_0;
}

void kernel_gemm::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void kernel_gemm::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void kernel_gemm::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void kernel_gemm::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void kernel_gemm::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_F;
}

void kernel_gemm::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(icmp_ln21_fu_348_p2.read(), ap_const_lv1_1))) {
        i_0_reg_188 = i_reg_489.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_188 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(func_bus_BVALID.read(), ap_const_logic_1))) {
        j1_0_reg_210 = ap_const_lv12_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
                esl_seteq<1,1,1>(icmp_ln22_fu_388_p2.read(), ap_const_lv1_1))) {
        j1_0_reg_210 = j_1_reg_533.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(func_bus_WREADY.read(), ap_const_logic_1))) {
        j_0_reg_199 = j_reg_515.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                esl_seteq<1,1,1>(func_bus_AWREADY.read(), ap_const_logic_1))) {
        j_0_reg_199 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
         esl_seteq<1,1,1>(func_bus_BVALID.read(), ap_const_logic_1))) {
        k_0_reg_221 = k_reg_548.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_fu_348_p2.read()))) {
        k_0_reg_221 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_289_p2.read()))) {
        add_ln19_reg_500 = add_ln19_fu_317_p2.read();
        shl_ln_reg_494 = shl_ln_fu_305_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_388_p2.read()))) {
        add_ln23_4_reg_553 = add_ln23_4_fu_409_p2.read();
        add_ln23_5_reg_558 = add_ln23_5_fu_435_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1))) {
        func_bus_addr_1_read_reg_585 = func_bus_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_fu_348_p2.read()))) {
        func_bus_addr_1_reg_538 =  (sc_lv<32>) (zext_ln23_1_fu_374_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1))) {
        func_bus_addr_2_read_reg_575 = func_bus_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1))) {
        func_bus_addr_3_read_reg_580 = func_bus_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, func_bus_RVALID.read())))) {
        func_bus_addr_read_reg_520 = func_bus_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1))) {
        func_bus_addr_reg_505 =  (sc_lv<32>) (zext_ln19_1_fu_322_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_489 = i_fu_295_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        j_1_reg_533 = j_1_fu_354_p2.read();
        zext_ln21_reg_525 = zext_ln21_fu_344_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, func_bus_RVALID.read())))) {
        j_reg_515 = j_fu_338_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        k_reg_548 = k_fu_394_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_cast10_reg_470 = p_cast10_fu_257_p1.read();
        p_cast9_reg_475 = p_cast9_fu_271_p1.read();
        p_cast_reg_480 = p_cast_fu_285_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
  esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
  esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1)))) {
        reg_240 = grp_fu_236_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && esl_seteq<1,1,1>(func_bus_AWREADY.read(), ap_const_logic_1))) {
        tmp_3_reg_590 = grp_fu_232_p2.read();
    }
}

void kernel_gemm::thread_add_ln19_fu_317_p2() {
    add_ln19_fu_317_p2 = (!p_cast_reg_480.read().is_01() || !zext_ln19_fu_313_p1.read().is_01())? sc_lv<31>(): (sc_biguint<31>(p_cast_reg_480.read()) + sc_biguint<31>(zext_ln19_fu_313_p1.read()));
}

void kernel_gemm::thread_add_ln23_1_fu_400_p2() {
    add_ln23_1_fu_400_p2 = (!shl_ln_reg_494.read().is_01() || !zext_ln22_fu_384_p1.read().is_01())? sc_lv<22>(): (sc_biguint<22>(shl_ln_reg_494.read()) + sc_biguint<22>(zext_ln22_fu_384_p1.read()));
}

void kernel_gemm::thread_add_ln23_2_fu_426_p2() {
    add_ln23_2_fu_426_p2 = (!zext_ln21_reg_525.read().is_01() || !shl_ln1_fu_418_p3.read().is_01())? sc_lv<22>(): (sc_biguint<22>(zext_ln21_reg_525.read()) + sc_biguint<22>(shl_ln1_fu_418_p3.read()));
}

void kernel_gemm::thread_add_ln23_3_fu_369_p2() {
    add_ln23_3_fu_369_p2 = (!zext_ln23_fu_365_p1.read().is_01() || !p_cast_reg_480.read().is_01())? sc_lv<31>(): (sc_biguint<31>(zext_ln23_fu_365_p1.read()) + sc_biguint<31>(p_cast_reg_480.read()));
}

void kernel_gemm::thread_add_ln23_4_fu_409_p2() {
    add_ln23_4_fu_409_p2 = (!p_cast9_reg_475.read().is_01() || !zext_ln23_2_fu_405_p1.read().is_01())? sc_lv<31>(): (sc_biguint<31>(p_cast9_reg_475.read()) + sc_biguint<31>(zext_ln23_2_fu_405_p1.read()));
}

void kernel_gemm::thread_add_ln23_5_fu_435_p2() {
    add_ln23_5_fu_435_p2 = (!p_cast10_reg_470.read().is_01() || !zext_ln23_4_fu_431_p1.read().is_01())? sc_lv<31>(): (sc_biguint<31>(p_cast10_reg_470.read()) + sc_biguint<31>(zext_ln23_4_fu_431_p1.read()));
}

void kernel_gemm::thread_add_ln23_fu_360_p2() {
    add_ln23_fu_360_p2 = (!zext_ln21_fu_344_p1.read().is_01() || !shl_ln_reg_494.read().is_01())? sc_lv<22>(): (sc_biguint<22>(zext_ln21_fu_344_p1.read()) + sc_biguint<22>(shl_ln_reg_494.read()));
}

void kernel_gemm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel_gemm::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void kernel_gemm::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void kernel_gemm::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void kernel_gemm::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void kernel_gemm::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void kernel_gemm::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void kernel_gemm::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void kernel_gemm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void kernel_gemm::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void kernel_gemm::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void kernel_gemm::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void kernel_gemm::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void kernel_gemm::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void kernel_gemm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void kernel_gemm::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void kernel_gemm::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void kernel_gemm::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void kernel_gemm::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void kernel_gemm::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void kernel_gemm::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void kernel_gemm::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void kernel_gemm::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void kernel_gemm::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void kernel_gemm::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void kernel_gemm::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void kernel_gemm::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void kernel_gemm::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void kernel_gemm::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void kernel_gemm::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void kernel_gemm::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void kernel_gemm::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void kernel_gemm::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void kernel_gemm::thread_ap_block_state10() {
    ap_block_state10 = (esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, func_bus_RVALID.read()));
}

void kernel_gemm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_289_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel_gemm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel_gemm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_289_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel_gemm::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void kernel_gemm::thread_func_bus_ARADDR() {
    if (esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
            func_bus_ARADDR = func_bus_addr_1_reg_538.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
            func_bus_ARADDR =  (sc_lv<32>) (zext_ln23_5_fu_450_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
            func_bus_ARADDR =  (sc_lv<32>) (zext_ln23_3_fu_440_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            func_bus_ARADDR =  (sc_lv<32>) (zext_ln19_1_fu_322_p1.read());
        } else {
            func_bus_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        func_bus_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void kernel_gemm::thread_func_bus_ARLEN() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
          esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1)))) {
        func_bus_ARLEN = ap_const_lv32_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1))) {
        func_bus_ARLEN = ap_const_lv32_800;
    } else {
        func_bus_ARLEN = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void kernel_gemm::thread_func_bus_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
          esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1)))) {
        func_bus_ARVALID = ap_const_logic_1;
    } else {
        func_bus_ARVALID = ap_const_logic_0;
    }
}

void kernel_gemm::thread_func_bus_AWADDR() {
    if (esl_seteq<1,1,1>(func_bus_AWREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
            func_bus_AWADDR = func_bus_addr_1_reg_538.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            func_bus_AWADDR = func_bus_addr_reg_505.read();
        } else {
            func_bus_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        func_bus_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void kernel_gemm::thread_func_bus_AWLEN() {
    if (esl_seteq<1,1,1>(func_bus_AWREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
            func_bus_AWLEN = ap_const_lv32_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            func_bus_AWLEN = ap_const_lv32_800;
        } else {
            func_bus_AWLEN = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        func_bus_AWLEN = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void kernel_gemm::thread_func_bus_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
          esl_seteq<1,1,1>(func_bus_AWREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(func_bus_AWREADY.read(), ap_const_logic_1)))) {
        func_bus_AWVALID = ap_const_logic_1;
    } else {
        func_bus_AWVALID = ap_const_logic_0;
    }
}

void kernel_gemm::thread_func_bus_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(func_bus_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
          esl_seteq<1,1,1>(func_bus_BVALID.read(), ap_const_logic_1)))) {
        func_bus_BREADY = ap_const_logic_1;
    } else {
        func_bus_BREADY = ap_const_logic_0;
    }
}

void kernel_gemm::thread_func_bus_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
          esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
          esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, func_bus_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1)))) {
        func_bus_RREADY = ap_const_logic_1;
    } else {
        func_bus_RREADY = ap_const_logic_0;
    }
}

void kernel_gemm::thread_func_bus_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        func_bus_WDATA = tmp_3_reg_590.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        func_bus_WDATA = reg_240.read();
    } else {
        func_bus_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void kernel_gemm::thread_func_bus_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(func_bus_WREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
          esl_seteq<1,1,1>(func_bus_WREADY.read(), ap_const_logic_1)))) {
        func_bus_WVALID = ap_const_logic_1;
    } else {
        func_bus_WVALID = ap_const_logic_0;
    }
}

void kernel_gemm::thread_func_bus_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        func_bus_blk_n_AR = m_axi_func_bus_ARREADY.read();
    } else {
        func_bus_blk_n_AR = ap_const_logic_1;
    }
}

void kernel_gemm::thread_func_bus_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()))) {
        func_bus_blk_n_AW = m_axi_func_bus_AWREADY.read();
    } else {
        func_bus_blk_n_AW = ap_const_logic_1;
    }
}

void kernel_gemm::thread_func_bus_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        func_bus_blk_n_B = m_axi_func_bus_BVALID.read();
    } else {
        func_bus_blk_n_B = ap_const_logic_1;
    }
}

void kernel_gemm::thread_func_bus_blk_n_R() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        func_bus_blk_n_R = m_axi_func_bus_RVALID.read();
    } else {
        func_bus_blk_n_R = ap_const_logic_1;
    }
}

void kernel_gemm::thread_func_bus_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        func_bus_blk_n_W = m_axi_func_bus_WREADY.read();
    } else {
        func_bus_blk_n_W = ap_const_logic_1;
    }
}

void kernel_gemm::thread_grp_fu_232_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
          esl_seteq<1,1,1>(func_bus_AWREADY.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()))) {
        grp_fu_232_ce = ap_const_logic_1;
    } else {
        grp_fu_232_ce = ap_const_logic_0;
    }
}

void kernel_gemm::thread_grp_fu_236_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
          esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
          esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        grp_fu_236_ce = ap_const_logic_1;
    } else {
        grp_fu_236_ce = ap_const_logic_0;
    }
}

void kernel_gemm::thread_grp_fu_236_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        grp_fu_236_p0 = reg_240.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_fu_236_p0 = func_bus_addr_2_read_reg_575.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_236_p0 = func_bus_addr_read_reg_520.read();
    } else {
        grp_fu_236_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void kernel_gemm::thread_grp_fu_236_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        grp_fu_236_p1 = func_bus_addr_3_read_reg_580.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_fu_236_p1 = alpha.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_236_p1 = beta.read();
    } else {
        grp_fu_236_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void kernel_gemm::thread_i_fu_295_p2() {
    i_fu_295_p2 = (!i_0_reg_188.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(i_0_reg_188.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void kernel_gemm::thread_icmp_ln17_fu_289_p2() {
    icmp_ln17_fu_289_p2 = (!i_0_reg_188.read().is_01() || !ap_const_lv12_800.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_188.read() == ap_const_lv12_800);
}

void kernel_gemm::thread_icmp_ln18_fu_332_p2() {
    icmp_ln18_fu_332_p2 = (!j_0_reg_199.read().is_01() || !ap_const_lv12_800.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_199.read() == ap_const_lv12_800);
}

void kernel_gemm::thread_icmp_ln21_fu_348_p2() {
    icmp_ln21_fu_348_p2 = (!j1_0_reg_210.read().is_01() || !ap_const_lv12_800.is_01())? sc_lv<1>(): sc_lv<1>(j1_0_reg_210.read() == ap_const_lv12_800);
}

void kernel_gemm::thread_icmp_ln22_fu_388_p2() {
    icmp_ln22_fu_388_p2 = (!k_0_reg_221.read().is_01() || !ap_const_lv12_800.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_221.read() == ap_const_lv12_800);
}

void kernel_gemm::thread_j_1_fu_354_p2() {
    j_1_fu_354_p2 = (!j1_0_reg_210.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(j1_0_reg_210.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void kernel_gemm::thread_j_fu_338_p2() {
    j_fu_338_p2 = (!j_0_reg_199.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(j_0_reg_199.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void kernel_gemm::thread_k_fu_394_p2() {
    k_fu_394_p2 = (!k_0_reg_221.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(k_0_reg_221.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void kernel_gemm::thread_p_cast10_fu_257_p1() {
    p_cast10_fu_257_p1 = esl_zext<31,30>(tmp_6_fu_247_p4.read());
}

void kernel_gemm::thread_p_cast9_fu_271_p1() {
    p_cast9_fu_271_p1 = esl_zext<31,30>(tmp_7_fu_261_p4.read());
}

void kernel_gemm::thread_p_cast_fu_285_p1() {
    p_cast_fu_285_p1 = esl_zext<31,30>(tmp_8_fu_275_p4.read());
}

void kernel_gemm::thread_shl_ln1_fu_418_p3() {
    shl_ln1_fu_418_p3 = esl_concat<11,11>(trunc_ln23_fu_414_p1.read(), ap_const_lv11_0);
}

void kernel_gemm::thread_shl_ln_fu_305_p3() {
    shl_ln_fu_305_p3 = esl_concat<11,11>(trunc_ln19_fu_301_p1.read(), ap_const_lv11_0);
}

void kernel_gemm::thread_tmp_6_fu_247_p4() {
    tmp_6_fu_247_p4 = B.read().range(31, 2);
}

void kernel_gemm::thread_tmp_7_fu_261_p4() {
    tmp_7_fu_261_p4 = A.read().range(31, 2);
}

void kernel_gemm::thread_tmp_8_fu_275_p4() {
    tmp_8_fu_275_p4 = C.read().range(31, 2);
}

void kernel_gemm::thread_trunc_ln19_fu_301_p1() {
    trunc_ln19_fu_301_p1 = i_0_reg_188.read().range(11-1, 0);
}

void kernel_gemm::thread_trunc_ln23_fu_414_p1() {
    trunc_ln23_fu_414_p1 = k_0_reg_221.read().range(11-1, 0);
}

void kernel_gemm::thread_zext_ln19_1_fu_322_p1() {
    zext_ln19_1_fu_322_p1 = esl_zext<64,31>(add_ln19_reg_500.read());
}

void kernel_gemm::thread_zext_ln19_fu_313_p1() {
    zext_ln19_fu_313_p1 = esl_zext<31,22>(shl_ln_fu_305_p3.read());
}

void kernel_gemm::thread_zext_ln21_fu_344_p1() {
    zext_ln21_fu_344_p1 = esl_zext<22,12>(j1_0_reg_210.read());
}

void kernel_gemm::thread_zext_ln22_fu_384_p1() {
    zext_ln22_fu_384_p1 = esl_zext<22,12>(k_0_reg_221.read());
}

void kernel_gemm::thread_zext_ln23_1_fu_374_p1() {
    zext_ln23_1_fu_374_p1 = esl_zext<64,31>(add_ln23_3_fu_369_p2.read());
}

void kernel_gemm::thread_zext_ln23_2_fu_405_p1() {
    zext_ln23_2_fu_405_p1 = esl_zext<31,22>(add_ln23_1_fu_400_p2.read());
}

void kernel_gemm::thread_zext_ln23_3_fu_440_p1() {
    zext_ln23_3_fu_440_p1 = esl_zext<64,31>(add_ln23_4_reg_553.read());
}

void kernel_gemm::thread_zext_ln23_4_fu_431_p1() {
    zext_ln23_4_fu_431_p1 = esl_zext<31,22>(add_ln23_2_fu_426_p2.read());
}

void kernel_gemm::thread_zext_ln23_5_fu_450_p1() {
    zext_ln23_5_fu_450_p1 = esl_zext<64,31>(add_ln23_5_reg_558.read());
}

void kernel_gemm::thread_zext_ln23_fu_365_p1() {
    zext_ln23_fu_365_p1 = esl_zext<31,22>(add_ln23_fu_360_p2.read());
}

void kernel_gemm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_289_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(func_bus_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, func_bus_RVALID.read())) && esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln18_fu_332_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, func_bus_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(func_bus_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(func_bus_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_348_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_388_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 536870912 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(func_bus_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state31;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state34;
            } else {
                ap_NS_fsm = ap_ST_fsm_state33;
            }
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && esl_seteq<1,1,1>(func_bus_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state38;
            } else {
                ap_NS_fsm = ap_ST_fsm_state37;
            }
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && esl_seteq<1,1,1>(func_bus_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state45;
            } else {
                ap_NS_fsm = ap_ST_fsm_state44;
            }
            break;
        case 17592186044416 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && esl_seteq<1,1,1>(func_bus_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state46;
            } else {
                ap_NS_fsm = ap_ST_fsm_state45;
            }
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && esl_seteq<1,1,1>(func_bus_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state50;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<50>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void kernel_gemm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_func_bus_AWVALID\" :  \"" << m_axi_func_bus_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_AWREADY\" :  \"" << m_axi_func_bus_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWADDR\" :  \"" << m_axi_func_bus_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWID\" :  \"" << m_axi_func_bus_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWLEN\" :  \"" << m_axi_func_bus_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWSIZE\" :  \"" << m_axi_func_bus_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWBURST\" :  \"" << m_axi_func_bus_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWLOCK\" :  \"" << m_axi_func_bus_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWCACHE\" :  \"" << m_axi_func_bus_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWPROT\" :  \"" << m_axi_func_bus_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWQOS\" :  \"" << m_axi_func_bus_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWREGION\" :  \"" << m_axi_func_bus_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_AWUSER\" :  \"" << m_axi_func_bus_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_WVALID\" :  \"" << m_axi_func_bus_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_WREADY\" :  \"" << m_axi_func_bus_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_WDATA\" :  \"" << m_axi_func_bus_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_WSTRB\" :  \"" << m_axi_func_bus_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_WLAST\" :  \"" << m_axi_func_bus_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_WID\" :  \"" << m_axi_func_bus_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_WUSER\" :  \"" << m_axi_func_bus_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARVALID\" :  \"" << m_axi_func_bus_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_ARREADY\" :  \"" << m_axi_func_bus_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARADDR\" :  \"" << m_axi_func_bus_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARID\" :  \"" << m_axi_func_bus_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARLEN\" :  \"" << m_axi_func_bus_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARSIZE\" :  \"" << m_axi_func_bus_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARBURST\" :  \"" << m_axi_func_bus_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARLOCK\" :  \"" << m_axi_func_bus_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARCACHE\" :  \"" << m_axi_func_bus_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARPROT\" :  \"" << m_axi_func_bus_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARQOS\" :  \"" << m_axi_func_bus_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARREGION\" :  \"" << m_axi_func_bus_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_ARUSER\" :  \"" << m_axi_func_bus_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_RVALID\" :  \"" << m_axi_func_bus_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_RREADY\" :  \"" << m_axi_func_bus_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_RDATA\" :  \"" << m_axi_func_bus_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_RLAST\" :  \"" << m_axi_func_bus_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_RID\" :  \"" << m_axi_func_bus_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_RUSER\" :  \"" << m_axi_func_bus_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_RRESP\" :  \"" << m_axi_func_bus_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_BVALID\" :  \"" << m_axi_func_bus_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_func_bus_BREADY\" :  \"" << m_axi_func_bus_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_BRESP\" :  \"" << m_axi_func_bus_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_BID\" :  \"" << m_axi_func_bus_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_func_bus_BUSER\" :  \"" << m_axi_func_bus_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"alpha\" :  \"" << alpha.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"beta\" :  \"" << beta.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_AWVALID\" :  \"" << s_axi_ctrl_bus_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_AWREADY\" :  \"" << s_axi_ctrl_bus_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_AWADDR\" :  \"" << s_axi_ctrl_bus_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_WVALID\" :  \"" << s_axi_ctrl_bus_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_WREADY\" :  \"" << s_axi_ctrl_bus_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_WDATA\" :  \"" << s_axi_ctrl_bus_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_WSTRB\" :  \"" << s_axi_ctrl_bus_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_ARVALID\" :  \"" << s_axi_ctrl_bus_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_ARREADY\" :  \"" << s_axi_ctrl_bus_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_ARADDR\" :  \"" << s_axi_ctrl_bus_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_RVALID\" :  \"" << s_axi_ctrl_bus_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_RREADY\" :  \"" << s_axi_ctrl_bus_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_RDATA\" :  \"" << s_axi_ctrl_bus_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_RRESP\" :  \"" << s_axi_ctrl_bus_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_BVALID\" :  \"" << s_axi_ctrl_bus_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_BREADY\" :  \"" << s_axi_ctrl_bus_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_BRESP\" :  \"" << s_axi_ctrl_bus_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

