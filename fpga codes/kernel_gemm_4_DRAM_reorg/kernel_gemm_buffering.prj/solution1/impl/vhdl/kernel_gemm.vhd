-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_gemm is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    alpha : IN STD_LOGIC_VECTOR (31 downto 0);
    beta : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of kernel_gemm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_gemm,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.913750,HLS_SYN_LAT=18161,HLS_SYN_TPT=none,HLS_SYN_MEM=119,HLS_SYN_DSP=131,HLS_SYN_FF=17885,HLS_SYN_LUT=14706,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal C_V : STD_LOGIC_VECTOR (31 downto 0);
    signal A_V : STD_LOGIC_VECTOR (31 downto 0);
    signal B_V : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ii20_0_reg_351 : STD_LOGIC_VECTOR (4 downto 0);
    signal B_V5_reg_1100 : STD_LOGIC_VECTOR (25 downto 0);
    signal A_V3_reg_1105 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_cast_fu_511_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_cast_reg_1110 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln71_fu_526_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln71_reg_1119 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln72_fu_540_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln72_reg_1124 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln71_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_fu_554_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln71_reg_1130 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln78_1_reg_1138 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln75_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ii_fu_578_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_reg_1148 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln180_fu_604_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln180_reg_1153 : STD_LOGIC_VECTOR (26 downto 0);
    signal gmem_addr_read_reg_1164 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln84_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln84_reg_1169_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_1169_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_1169_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_1169_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_1169_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_1_fu_630_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal local_C_0_V_addr_1_reg_1178 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_0_V_addr_1_reg_1178_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_0_V_addr_1_reg_1178_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_0_V_addr_1_reg_1178_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_0_V_addr_1_reg_1178_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_0_V_addr_1_reg_1178_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln681_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln681_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_reg_1194 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_10_reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_11_reg_1244 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_13_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_14_reg_1259 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1349 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1354 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_3_reg_1359 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_4_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_5_reg_1369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_6_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_7_reg_1379 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_8_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_9_reg_1389 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_s_reg_1394 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_10_reg_1399 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_11_reg_1404 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_12_reg_1409 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_13_reg_1414 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_14_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_950_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal index_reg_1427 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln101_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1432 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_970_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_1436 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln103_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln103_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln108_reg_1446 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_2_fu_1017_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_2_reg_1459 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln115_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln180_2_fu_1048_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln180_2_reg_1469 : STD_LOGIC_VECTOR (26 downto 0);
    signal j_fu_1053_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal local_C_0_V_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal local_C_0_V_load_1_reg_1479 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal local_A_ping_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_A_ping_0_V_ce0 : STD_LOGIC;
    signal local_A_ping_0_V_we0 : STD_LOGIC;
    signal local_A_ping_0_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal local_B_ping_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_B_ping_0_V_ce0 : STD_LOGIC;
    signal local_B_ping_0_V_we0 : STD_LOGIC;
    signal local_B_ping_0_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal local_A_pong_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_A_pong_0_V_ce0 : STD_LOGIC;
    signal local_A_pong_0_V_we0 : STD_LOGIC;
    signal local_A_pong_0_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal local_B_pong_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_B_pong_0_V_ce0 : STD_LOGIC;
    signal local_B_pong_0_V_we0 : STD_LOGIC;
    signal local_B_pong_0_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal local_C_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_0_V_ce0 : STD_LOGIC;
    signal local_C_0_V_we0 : STD_LOGIC;
    signal local_C_0_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal local_C_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_0_V_ce1 : STD_LOGIC;
    signal local_C_0_V_we1 : STD_LOGIC;
    signal local_C_0_V_d1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_compute_fu_384_ap_start : STD_LOGIC;
    signal grp_compute_fu_384_ap_done : STD_LOGIC;
    signal grp_compute_fu_384_ap_idle : STD_LOGIC;
    signal grp_compute_fu_384_ap_ready : STD_LOGIC;
    signal grp_compute_fu_384_flag : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compute_fu_384_local_A_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_fu_384_local_A_0_V_ce0 : STD_LOGIC;
    signal grp_compute_fu_384_local_A_0_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_compute_fu_384_local_B_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_fu_384_local_B_V_ce0 : STD_LOGIC;
    signal grp_compute_fu_384_local_B_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_compute_fu_384_local_C_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_fu_384_local_C_V_ce0 : STD_LOGIC;
    signal grp_compute_fu_384_local_C_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_fu_384_local_C_V_ce1 : STD_LOGIC;
    signal grp_compute_fu_384_local_C_V_we1 : STD_LOGIC;
    signal grp_compute_fu_384_local_C_V_d1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_load_fu_393_ap_start : STD_LOGIC;
    signal grp_load_fu_393_ap_done : STD_LOGIC;
    signal grp_load_fu_393_ap_idle : STD_LOGIC;
    signal grp_load_fu_393_ap_ready : STD_LOGIC;
    signal grp_load_fu_393_local_A_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_393_local_A_0_V_ce0 : STD_LOGIC;
    signal grp_load_fu_393_local_A_0_V_we0 : STD_LOGIC;
    signal grp_load_fu_393_local_A_0_V_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_load_fu_393_local_B_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_393_local_B_V_ce0 : STD_LOGIC;
    signal grp_load_fu_393_local_B_V_we0 : STD_LOGIC;
    signal grp_load_fu_393_local_B_V_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWVALID : STD_LOGIC;
    signal grp_load_fu_393_m_axi_A_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_393_m_axi_A_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_393_m_axi_A_V_WVALID : STD_LOGIC;
    signal grp_load_fu_393_m_axi_A_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_load_fu_393_m_axi_A_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_fu_393_m_axi_A_V_WLAST : STD_LOGIC;
    signal grp_load_fu_393_m_axi_A_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_393_m_axi_A_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARVALID : STD_LOGIC;
    signal grp_load_fu_393_m_axi_A_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_393_m_axi_A_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_393_m_axi_A_V_RREADY : STD_LOGIC;
    signal grp_load_fu_393_m_axi_A_V_BREADY : STD_LOGIC;
    signal indvar_flatten_reg_306 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_317 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_328 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_0_reg_339 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal index_0_reg_362 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_state22_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ii22_0_reg_373 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_compute_fu_384_ap_start_reg : STD_LOGIC := '0';
    signal grp_load_fu_393_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln78_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln118_1_fu_1032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_4_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_6_fu_1058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal counter_1_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln111_fu_998_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_s_fu_907_p17 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_407_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_411_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_415_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_419_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_435_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_455_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_459_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_463_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_467_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_501_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_4_fu_532_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln71_1_fu_548_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln78_1_fu_584_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln78_fu_588_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln78_1_fu_593_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln180_fu_600_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal bitcast_ln91_15_fu_904_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_14_fu_901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_13_fu_898_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_12_fu_895_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_11_fu_892_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_10_fu_889_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_9_fu_886_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_8_fu_883_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_7_fu_880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_6_fu_877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_5_fu_874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_4_fu_871_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_3_fu_868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_2_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_1_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln91_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_962_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal counter_fu_986_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln111_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln118_fu_1023_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln118_fu_1027_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_1037_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln180_5_fu_1044_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_107 : BOOLEAN;
    signal ap_enable_state13_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_108 : BOOLEAN;
    signal ap_enable_state14_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_225 : BOOLEAN;
    signal ap_enable_state19_pp0_iter6_stage0 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        flag : IN STD_LOGIC_VECTOR (0 downto 0);
        local_A_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        local_A_0_V_ce0 : OUT STD_LOGIC;
        local_A_0_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        local_B_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        local_B_V_ce0 : OUT STD_LOGIC;
        local_B_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        local_C_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        local_C_V_ce0 : OUT STD_LOGIC;
        local_C_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        local_C_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        local_C_V_ce1 : OUT STD_LOGIC;
        local_C_V_we1 : OUT STD_LOGIC;
        local_C_V_d1 : OUT STD_LOGIC_VECTOR (511 downto 0);
        alpha : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component load IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        flag : IN STD_LOGIC_VECTOR (0 downto 0);
        i : IN STD_LOGIC_VECTOR (6 downto 0);
        j : IN STD_LOGIC_VECTOR (6 downto 0);
        k : IN STD_LOGIC_VECTOR (6 downto 0);
        local_A_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        local_A_0_V_ce0 : OUT STD_LOGIC;
        local_A_0_V_we0 : OUT STD_LOGIC;
        local_A_0_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        local_B_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        local_B_V_ce0 : OUT STD_LOGIC;
        local_B_V_we0 : OUT STD_LOGIC;
        local_B_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_A_V_AWVALID : OUT STD_LOGIC;
        m_axi_A_V_AWREADY : IN STD_LOGIC;
        m_axi_A_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_V_WVALID : OUT STD_LOGIC;
        m_axi_A_V_WREADY : IN STD_LOGIC;
        m_axi_A_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_A_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_A_V_WLAST : OUT STD_LOGIC;
        m_axi_A_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_V_ARVALID : OUT STD_LOGIC;
        m_axi_A_V_ARREADY : IN STD_LOGIC;
        m_axi_A_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_V_RVALID : IN STD_LOGIC;
        m_axi_A_V_RREADY : OUT STD_LOGIC;
        m_axi_A_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_A_V_RLAST : IN STD_LOGIC;
        m_axi_A_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_V_BVALID : IN STD_LOGIC;
        m_axi_A_V_BREADY : OUT STD_LOGIC;
        m_axi_A_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        A_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
        B_V_offset : IN STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component kernel_gemm_fmul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_gemm_localdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component kernel_gemm_localhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (511 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component kernel_gemm_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        C_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_gemm_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    kernel_gemm_control_s_axi_U : component kernel_gemm_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        C_V => C_V,
        A_V => A_V,
        B_V => B_V);

    kernel_gemm_gmem_m_axi_U : component kernel_gemm_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 512,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => local_C_0_V_load_1_reg_1479,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_FFFFFFFFFFFFFFFF,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    local_A_ping_0_V_U : component kernel_gemm_localdEe
    generic map (
        DataWidth => 512,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_A_ping_0_V_address0,
        ce0 => local_A_ping_0_V_ce0,
        we0 => local_A_ping_0_V_we0,
        d0 => grp_load_fu_393_local_A_0_V_d0,
        q0 => local_A_ping_0_V_q0);

    local_B_ping_0_V_U : component kernel_gemm_localdEe
    generic map (
        DataWidth => 512,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_B_ping_0_V_address0,
        ce0 => local_B_ping_0_V_ce0,
        we0 => local_B_ping_0_V_we0,
        d0 => grp_load_fu_393_local_B_V_d0,
        q0 => local_B_ping_0_V_q0);

    local_A_pong_0_V_U : component kernel_gemm_localdEe
    generic map (
        DataWidth => 512,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_A_pong_0_V_address0,
        ce0 => local_A_pong_0_V_ce0,
        we0 => local_A_pong_0_V_we0,
        d0 => grp_load_fu_393_local_A_0_V_d0,
        q0 => local_A_pong_0_V_q0);

    local_B_pong_0_V_U : component kernel_gemm_localdEe
    generic map (
        DataWidth => 512,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_B_pong_0_V_address0,
        ce0 => local_B_pong_0_V_ce0,
        we0 => local_B_pong_0_V_we0,
        d0 => grp_load_fu_393_local_B_V_d0,
        q0 => local_B_pong_0_V_q0);

    local_C_0_V_U : component kernel_gemm_localhbi
    generic map (
        DataWidth => 512,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_C_0_V_address0,
        ce0 => local_C_0_V_ce0,
        we0 => local_C_0_V_we0,
        d0 => gmem_addr_read_reg_1164,
        q0 => local_C_0_V_q0,
        address1 => local_C_0_V_address1,
        ce1 => local_C_0_V_ce1,
        we1 => local_C_0_V_we1,
        d1 => local_C_0_V_d1,
        q1 => local_C_0_V_q1);

    grp_compute_fu_384 : component compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_compute_fu_384_ap_start,
        ap_done => grp_compute_fu_384_ap_done,
        ap_idle => grp_compute_fu_384_ap_idle,
        ap_ready => grp_compute_fu_384_ap_ready,
        flag => grp_compute_fu_384_flag,
        local_A_0_V_address0 => grp_compute_fu_384_local_A_0_V_address0,
        local_A_0_V_ce0 => grp_compute_fu_384_local_A_0_V_ce0,
        local_A_0_V_q0 => grp_compute_fu_384_local_A_0_V_q0,
        local_B_V_address0 => grp_compute_fu_384_local_B_V_address0,
        local_B_V_ce0 => grp_compute_fu_384_local_B_V_ce0,
        local_B_V_q0 => grp_compute_fu_384_local_B_V_q0,
        local_C_V_address0 => grp_compute_fu_384_local_C_V_address0,
        local_C_V_ce0 => grp_compute_fu_384_local_C_V_ce0,
        local_C_V_q0 => local_C_0_V_q0,
        local_C_V_address1 => grp_compute_fu_384_local_C_V_address1,
        local_C_V_ce1 => grp_compute_fu_384_local_C_V_ce1,
        local_C_V_we1 => grp_compute_fu_384_local_C_V_we1,
        local_C_V_d1 => grp_compute_fu_384_local_C_V_d1,
        alpha => alpha);

    grp_load_fu_393 : component load
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_load_fu_393_ap_start,
        ap_done => grp_load_fu_393_ap_done,
        ap_idle => grp_load_fu_393_ap_idle,
        ap_ready => grp_load_fu_393_ap_ready,
        flag => xor_ln103_reg_1441,
        i => select_ln71_reg_1130,
        j => select_ln72_reg_1124,
        k => shl_ln_reg_1436,
        local_A_0_V_address0 => grp_load_fu_393_local_A_0_V_address0,
        local_A_0_V_ce0 => grp_load_fu_393_local_A_0_V_ce0,
        local_A_0_V_we0 => grp_load_fu_393_local_A_0_V_we0,
        local_A_0_V_d0 => grp_load_fu_393_local_A_0_V_d0,
        local_B_V_address0 => grp_load_fu_393_local_B_V_address0,
        local_B_V_ce0 => grp_load_fu_393_local_B_V_ce0,
        local_B_V_we0 => grp_load_fu_393_local_B_V_we0,
        local_B_V_d0 => grp_load_fu_393_local_B_V_d0,
        m_axi_A_V_AWVALID => grp_load_fu_393_m_axi_A_V_AWVALID,
        m_axi_A_V_AWREADY => ap_const_logic_0,
        m_axi_A_V_AWADDR => grp_load_fu_393_m_axi_A_V_AWADDR,
        m_axi_A_V_AWID => grp_load_fu_393_m_axi_A_V_AWID,
        m_axi_A_V_AWLEN => grp_load_fu_393_m_axi_A_V_AWLEN,
        m_axi_A_V_AWSIZE => grp_load_fu_393_m_axi_A_V_AWSIZE,
        m_axi_A_V_AWBURST => grp_load_fu_393_m_axi_A_V_AWBURST,
        m_axi_A_V_AWLOCK => grp_load_fu_393_m_axi_A_V_AWLOCK,
        m_axi_A_V_AWCACHE => grp_load_fu_393_m_axi_A_V_AWCACHE,
        m_axi_A_V_AWPROT => grp_load_fu_393_m_axi_A_V_AWPROT,
        m_axi_A_V_AWQOS => grp_load_fu_393_m_axi_A_V_AWQOS,
        m_axi_A_V_AWREGION => grp_load_fu_393_m_axi_A_V_AWREGION,
        m_axi_A_V_AWUSER => grp_load_fu_393_m_axi_A_V_AWUSER,
        m_axi_A_V_WVALID => grp_load_fu_393_m_axi_A_V_WVALID,
        m_axi_A_V_WREADY => ap_const_logic_0,
        m_axi_A_V_WDATA => grp_load_fu_393_m_axi_A_V_WDATA,
        m_axi_A_V_WSTRB => grp_load_fu_393_m_axi_A_V_WSTRB,
        m_axi_A_V_WLAST => grp_load_fu_393_m_axi_A_V_WLAST,
        m_axi_A_V_WID => grp_load_fu_393_m_axi_A_V_WID,
        m_axi_A_V_WUSER => grp_load_fu_393_m_axi_A_V_WUSER,
        m_axi_A_V_ARVALID => grp_load_fu_393_m_axi_A_V_ARVALID,
        m_axi_A_V_ARREADY => gmem_ARREADY,
        m_axi_A_V_ARADDR => grp_load_fu_393_m_axi_A_V_ARADDR,
        m_axi_A_V_ARID => grp_load_fu_393_m_axi_A_V_ARID,
        m_axi_A_V_ARLEN => grp_load_fu_393_m_axi_A_V_ARLEN,
        m_axi_A_V_ARSIZE => grp_load_fu_393_m_axi_A_V_ARSIZE,
        m_axi_A_V_ARBURST => grp_load_fu_393_m_axi_A_V_ARBURST,
        m_axi_A_V_ARLOCK => grp_load_fu_393_m_axi_A_V_ARLOCK,
        m_axi_A_V_ARCACHE => grp_load_fu_393_m_axi_A_V_ARCACHE,
        m_axi_A_V_ARPROT => grp_load_fu_393_m_axi_A_V_ARPROT,
        m_axi_A_V_ARQOS => grp_load_fu_393_m_axi_A_V_ARQOS,
        m_axi_A_V_ARREGION => grp_load_fu_393_m_axi_A_V_ARREGION,
        m_axi_A_V_ARUSER => grp_load_fu_393_m_axi_A_V_ARUSER,
        m_axi_A_V_RVALID => gmem_RVALID,
        m_axi_A_V_RREADY => grp_load_fu_393_m_axi_A_V_RREADY,
        m_axi_A_V_RDATA => gmem_RDATA,
        m_axi_A_V_RLAST => gmem_RLAST,
        m_axi_A_V_RID => gmem_RID,
        m_axi_A_V_RUSER => gmem_RUSER,
        m_axi_A_V_RRESP => gmem_RRESP,
        m_axi_A_V_BVALID => ap_const_logic_0,
        m_axi_A_V_BREADY => grp_load_fu_393_m_axi_A_V_BREADY,
        m_axi_A_V_BRESP => ap_const_lv2_0,
        m_axi_A_V_BID => ap_const_lv1_0,
        m_axi_A_V_BUSER => ap_const_lv1_0,
        A_V_offset => A_V3_reg_1105,
        B_V_offset => B_V5_reg_1100);

    kernel_gemm_fmul_cud_U50 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_407_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_407_p2);

    kernel_gemm_fmul_cud_U51 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_411_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_411_p2);

    kernel_gemm_fmul_cud_U52 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_415_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_415_p2);

    kernel_gemm_fmul_cud_U53 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_419_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_419_p2);

    kernel_gemm_fmul_cud_U54 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_423_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_423_p2);

    kernel_gemm_fmul_cud_U55 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_427_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_427_p2);

    kernel_gemm_fmul_cud_U56 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_431_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p2);

    kernel_gemm_fmul_cud_U57 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_435_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_435_p2);

    kernel_gemm_fmul_cud_U58 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_439_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p2);

    kernel_gemm_fmul_cud_U59 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_443_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p2);

    kernel_gemm_fmul_cud_U60 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_447_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_447_p2);

    kernel_gemm_fmul_cud_U61 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_451_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_451_p2);

    kernel_gemm_fmul_cud_U62 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_455_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_455_p2);

    kernel_gemm_fmul_cud_U63 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_459_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_459_p2);

    kernel_gemm_fmul_cud_U64 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_463_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_463_p2);

    kernel_gemm_fmul_cud_U65 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_467_p0,
        din1 => beta,
        ce => ap_const_logic_1,
        dout => grp_fu_467_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln75_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((icmp_ln75_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_fu_384_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_compute_fu_384_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                    grp_compute_fu_384_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_fu_384_ap_ready = ap_const_logic_1)) then 
                    grp_compute_fu_384_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load_fu_393_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_load_fu_393_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                    grp_load_fu_393_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_fu_393_ap_ready = ap_const_logic_1)) then 
                    grp_load_fu_393_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    counter_1_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state22_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                counter_1_fu_194 <= select_ln111_fu_998_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                counter_1_fu_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_1011_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_0_reg_317 <= select_ln71_reg_1130;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_317 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    ii20_0_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ii20_0_reg_351 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_fu_624_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ii20_0_reg_351 <= ii_1_fu_630_p2;
            end if; 
        end if;
    end process;

    ii22_0_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_944_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                ii22_0_reg_373 <= ap_const_lv5_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                ii22_0_reg_373 <= ii_2_reg_1459;
            end if; 
        end if;
    end process;

    ii_0_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ii_0_reg_339 <= ii_reg_1148;
            elsif (((icmp_ln71_fu_520_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii_0_reg_339 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    index_0_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                index_0_reg_362 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_state22_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                index_0_reg_362 <= index_reg_1427;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_1011_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                indvar_flatten_reg_306 <= add_ln71_reg_1119;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_306 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_1011_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                j_0_reg_328 <= j_fu_1053_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_328 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                A_V3_reg_1105 <= A_V(31 downto 6);
                B_V5_reg_1100 <= B_V(31 downto 6);
                    p_cast_reg_1110(25 downto 0) <= p_cast_fu_511_p1(25 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_1011_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                add_ln180_2_reg_1469 <= add_ln180_2_fu_1048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln180_reg_1153 <= add_ln180_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln71_reg_1119 <= add_ln71_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                gmem_addr_read_reg_1164 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                icmp_ln101_reg_1432 <= icmp_ln101_fu_956_p2;
                    shl_ln_reg_1436(6 downto 4) <= shl_ln_fu_970_p3(6 downto 4);
                xor_ln103_reg_1441 <= xor_ln103_fu_979_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                icmp_ln104_reg_1451 <= grp_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                icmp_ln108_reg_1446 <= grp_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln84_reg_1169 <= icmp_ln84_fu_624_p2;
                icmp_ln84_reg_1169_pp0_iter1_reg <= icmp_ln84_reg_1169;
                local_C_0_V_addr_1_reg_1178_pp0_iter1_reg <= local_C_0_V_addr_1_reg_1178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln84_reg_1169_pp0_iter2_reg <= icmp_ln84_reg_1169_pp0_iter1_reg;
                icmp_ln84_reg_1169_pp0_iter3_reg <= icmp_ln84_reg_1169_pp0_iter2_reg;
                icmp_ln84_reg_1169_pp0_iter4_reg <= icmp_ln84_reg_1169_pp0_iter3_reg;
                icmp_ln84_reg_1169_pp0_iter5_reg <= icmp_ln84_reg_1169_pp0_iter4_reg;
                local_C_0_V_addr_1_reg_1178_pp0_iter2_reg <= local_C_0_V_addr_1_reg_1178_pp0_iter1_reg;
                local_C_0_V_addr_1_reg_1178_pp0_iter3_reg <= local_C_0_V_addr_1_reg_1178_pp0_iter2_reg;
                local_C_0_V_addr_1_reg_1178_pp0_iter4_reg <= local_C_0_V_addr_1_reg_1178_pp0_iter3_reg;
                local_C_0_V_addr_1_reg_1178_pp0_iter5_reg <= local_C_0_V_addr_1_reg_1178_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                ii_2_reg_1459 <= ii_2_fu_1017_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ii_reg_1148 <= ii_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                index_reg_1427 <= index_fu_950_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                local_C_0_V_addr_1_reg_1178 <= zext_ln89_fu_636_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (gmem_AWREADY = ap_const_logic_1))) then
                local_C_0_V_load_1_reg_1479 <= local_C_0_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_reg_1169 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_10_reg_1239 <= local_C_0_V_q0(383 downto 352);
                p_Result_11_reg_1244 <= local_C_0_V_q0(415 downto 384);
                p_Result_12_reg_1249 <= local_C_0_V_q0(447 downto 416);
                p_Result_13_reg_1254 <= local_C_0_V_q0(479 downto 448);
                p_Result_14_reg_1259 <= local_C_0_V_q0(511 downto 480);
                p_Result_1_reg_1234 <= local_C_0_V_q0(351 downto 320);
                p_Result_2_reg_1194 <= local_C_0_V_q0(95 downto 64);
                p_Result_3_reg_1199 <= local_C_0_V_q0(127 downto 96);
                p_Result_4_reg_1204 <= local_C_0_V_q0(159 downto 128);
                p_Result_5_reg_1209 <= local_C_0_V_q0(191 downto 160);
                p_Result_6_reg_1214 <= local_C_0_V_q0(223 downto 192);
                p_Result_7_reg_1219 <= local_C_0_V_q0(255 downto 224);
                p_Result_8_reg_1224 <= local_C_0_V_q0(287 downto 256);
                p_Result_9_reg_1229 <= local_C_0_V_q0(319 downto 288);
                p_Result_s_reg_1189 <= local_C_0_V_q0(63 downto 32);
                trunc_ln681_reg_1184 <= trunc_ln681_fu_641_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_520_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln71_reg_1130 <= select_ln71_fu_554_p3;
                select_ln72_reg_1124 <= select_ln72_fu_540_p3;
                trunc_ln78_1_reg_1138 <= select_ln72_fu_540_p3(5 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_reg_1169_pp0_iter4_reg = ap_const_lv1_0))) then
                tmp_1_10_reg_1399 <= grp_fu_451_p2;
                tmp_1_11_reg_1404 <= grp_fu_455_p2;
                tmp_1_12_reg_1409 <= grp_fu_459_p2;
                tmp_1_13_reg_1414 <= grp_fu_463_p2;
                tmp_1_14_reg_1419 <= grp_fu_467_p2;
                tmp_1_1_reg_1349 <= grp_fu_411_p2;
                tmp_1_2_reg_1354 <= grp_fu_415_p2;
                tmp_1_3_reg_1359 <= grp_fu_419_p2;
                tmp_1_4_reg_1364 <= grp_fu_423_p2;
                tmp_1_5_reg_1369 <= grp_fu_427_p2;
                tmp_1_6_reg_1374 <= grp_fu_431_p2;
                tmp_1_7_reg_1379 <= grp_fu_435_p2;
                tmp_1_8_reg_1384 <= grp_fu_439_p2;
                tmp_1_9_reg_1389 <= grp_fu_443_p2;
                tmp_1_s_reg_1394 <= grp_fu_447_p2;
                tmp_s_reg_1344 <= grp_fu_407_p2;
            end if;
        end if;
    end process;
    p_cast_reg_1110(26) <= '0';
    shl_ln_reg_1436(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state30, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state2, icmp_ln71_fu_520_p2, icmp_ln75_fu_572_p2, ap_CS_fsm_state3, icmp_ln84_fu_624_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state21, icmp_ln99_fu_944_p2, ap_CS_fsm_state23, icmp_ln115_fu_1011_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_state22, ap_block_state22_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln71_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln75_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln84_fu_624_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln84_fu_624_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln99_fu_944_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_boolean_0 = ap_block_state22_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln115_fu_1011_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (gmem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln118_fu_1027_p2 <= std_logic_vector(unsigned(zext_ln118_fu_1023_p1) + unsigned(select_ln71_reg_1130));
    add_ln180_2_fu_1048_p2 <= std_logic_vector(unsigned(zext_ln180_5_fu_1044_p1) + unsigned(p_cast_reg_1110));
    add_ln180_fu_604_p2 <= std_logic_vector(unsigned(zext_ln180_fu_600_p1) + unsigned(p_cast_reg_1110));
    add_ln71_1_fu_548_p2 <= std_logic_vector(unsigned(i_0_reg_317) + unsigned(ap_const_lv7_10));
    add_ln71_fu_526_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_306) + unsigned(ap_const_lv5_1));
    add_ln78_1_fu_593_p3 <= (add_ln78_fu_588_p2 & trunc_ln78_1_reg_1138);
    add_ln78_fu_588_p2 <= std_logic_vector(unsigned(zext_ln78_1_fu_584_p1) + unsigned(select_ln71_reg_1130));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13);
    ap_CS_fsm_state21 <= ap_CS_fsm(14);
    ap_CS_fsm_state22 <= ap_CS_fsm(15);
    ap_CS_fsm_state23 <= ap_CS_fsm(16);
    ap_CS_fsm_state24 <= ap_CS_fsm(17);
    ap_CS_fsm_state25 <= ap_CS_fsm(18);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(23);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_const_boolean_1 = ap_block_pp0_stage0_subdone) and (ap_ST_fsm_pp0_stage0 = ap_CS_fsm));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_on_subcall_done_assign_proc : process(icmp_ln101_reg_1432, grp_compute_fu_384_ap_done, grp_load_fu_393_ap_done)
    begin
                ap_block_state22_on_subcall_done <= (((icmp_ln101_reg_1432 = ap_const_lv1_1) and (grp_compute_fu_384_ap_done = ap_const_logic_0)) or ((grp_compute_fu_384_ap_done = ap_const_logic_0) and (icmp_ln101_reg_1432 = ap_const_lv1_0)) or ((icmp_ln101_reg_1432 = ap_const_lv1_1) and (grp_load_fu_393_ap_done = ap_const_logic_0)) or ((grp_load_fu_393_ap_done = ap_const_logic_0) and (icmp_ln101_reg_1432 = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln84_fu_624_p2)
    begin
        if ((icmp_ln84_fu_624_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln71_fu_520_p2)
    begin
        if (((icmp_ln71_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_107_assign_proc : process(icmp_ln84_fu_624_p2)
    begin
                ap_enable_operation_107 <= (icmp_ln84_fu_624_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_108_assign_proc : process(icmp_ln84_reg_1169)
    begin
                ap_enable_operation_108 <= (icmp_ln84_reg_1169 = ap_const_lv1_0);
    end process;


    ap_enable_operation_225_assign_proc : process(icmp_ln84_reg_1169_pp0_iter5_reg)
    begin
                ap_enable_operation_225 <= (icmp_ln84_reg_1169_pp0_iter5_reg = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state13_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state13_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state14_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state14_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state19_pp0_iter6_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6)
    begin
                ap_enable_state19_pp0_iter6_stage0 <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln71_fu_520_p2)
    begin
        if (((icmp_ln71_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln91_10_fu_889_p1 <= tmp_1_s_reg_1394;
    bitcast_ln91_11_fu_892_p1 <= tmp_1_10_reg_1399;
    bitcast_ln91_12_fu_895_p1 <= tmp_1_11_reg_1404;
    bitcast_ln91_13_fu_898_p1 <= tmp_1_12_reg_1409;
    bitcast_ln91_14_fu_901_p1 <= tmp_1_13_reg_1414;
    bitcast_ln91_15_fu_904_p1 <= tmp_1_14_reg_1419;
    bitcast_ln91_1_fu_862_p1 <= tmp_1_1_reg_1349;
    bitcast_ln91_2_fu_865_p1 <= tmp_1_2_reg_1354;
    bitcast_ln91_3_fu_868_p1 <= tmp_1_3_reg_1359;
    bitcast_ln91_4_fu_871_p1 <= tmp_1_4_reg_1364;
    bitcast_ln91_5_fu_874_p1 <= tmp_1_5_reg_1369;
    bitcast_ln91_6_fu_877_p1 <= tmp_1_6_reg_1374;
    bitcast_ln91_7_fu_880_p1 <= tmp_1_7_reg_1379;
    bitcast_ln91_8_fu_883_p1 <= tmp_1_8_reg_1384;
    bitcast_ln91_9_fu_886_p1 <= tmp_1_9_reg_1389;
    bitcast_ln91_fu_859_p1 <= tmp_s_reg_1344;
    counter_fu_986_p2 <= std_logic_vector(unsigned(counter_1_fu_194) + unsigned(ap_const_lv32_1));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state4, gmem_ARREADY, ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARADDR, ap_CS_fsm_state22, zext_ln180_4_fu_609_p1)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARADDR <= zext_ln180_4_fu_609_p1(32 - 1 downto 0);
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARADDR <= grp_load_fu_393_m_axi_A_V_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARBURST, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARBURST <= grp_load_fu_393_m_axi_A_V_ARBURST;
        else 
            gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARCACHE, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARCACHE <= grp_load_fu_393_m_axi_A_V_ARCACHE;
        else 
            gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARID_assign_proc : process(ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARID, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARID <= grp_load_fu_393_m_axi_A_V_ARID;
        else 
            gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state4, gmem_ARREADY, ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARLEN, ap_CS_fsm_state22)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARLEN <= grp_load_fu_393_m_axi_A_V_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARLOCK, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARLOCK <= grp_load_fu_393_m_axi_A_V_ARLOCK;
        else 
            gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARPROT, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARPROT <= grp_load_fu_393_m_axi_A_V_ARPROT;
        else 
            gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARQOS, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARQOS <= grp_load_fu_393_m_axi_A_V_ARQOS;
        else 
            gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARREGION, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARREGION <= grp_load_fu_393_m_axi_A_V_ARREGION;
        else 
            gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARSIZE, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARSIZE <= grp_load_fu_393_m_axi_A_V_ARSIZE;
        else 
            gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARUSER, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARUSER <= grp_load_fu_393_m_axi_A_V_ARUSER;
        else 
            gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state4, gmem_ARREADY, ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_ARVALID, ap_CS_fsm_state22)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_ARVALID <= grp_load_fu_393_m_axi_A_V_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_AWADDR <= zext_ln180_6_fu_1058_p1(32 - 1 downto 0);

    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state24, gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (gmem_AWREADY = ap_const_logic_1))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state30, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state11, gmem_RVALID, ap_CS_fsm_state21, icmp_ln101_fu_956_p2, icmp_ln101_reg_1432, icmp_ln99_fu_944_p2, grp_load_fu_393_m_axi_A_V_RREADY, ap_CS_fsm_state22)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_fu_956_p2 = ap_const_lv1_1) and (icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln99_fu_944_p2 = ap_const_lv1_0) and (icmp_ln101_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_RREADY <= grp_load_fu_393_m_axi_A_V_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state25, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_compute_fu_384_ap_start <= grp_compute_fu_384_ap_start_reg;

    grp_compute_fu_384_flag_assign_proc : process(icmp_ln101_reg_1432, icmp_ln108_reg_1446, icmp_ln104_reg_1451, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                grp_compute_fu_384_flag <= icmp_ln104_reg_1451;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                grp_compute_fu_384_flag <= icmp_ln108_reg_1446;
            else 
                grp_compute_fu_384_flag <= "X";
            end if;
        else 
            grp_compute_fu_384_flag <= "X";
        end if; 
    end process;


    grp_compute_fu_384_local_A_0_V_q0_assign_proc : process(icmp_ln101_reg_1432, local_A_ping_0_V_q0, local_A_pong_0_V_q0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                grp_compute_fu_384_local_A_0_V_q0 <= local_A_pong_0_V_q0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                grp_compute_fu_384_local_A_0_V_q0 <= local_A_ping_0_V_q0;
            else 
                grp_compute_fu_384_local_A_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_compute_fu_384_local_A_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_compute_fu_384_local_B_V_q0_assign_proc : process(icmp_ln101_reg_1432, local_B_ping_0_V_q0, local_B_pong_0_V_q0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                grp_compute_fu_384_local_B_V_q0 <= local_B_pong_0_V_q0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                grp_compute_fu_384_local_B_V_q0 <= local_B_ping_0_V_q0;
            else 
                grp_compute_fu_384_local_B_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_compute_fu_384_local_B_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_407_p0 <= trunc_ln681_reg_1184;
    grp_fu_411_p0 <= p_Result_s_reg_1189;
    grp_fu_415_p0 <= p_Result_2_reg_1194;
    grp_fu_419_p0 <= p_Result_3_reg_1199;
    grp_fu_423_p0 <= p_Result_4_reg_1204;
    grp_fu_427_p0 <= p_Result_5_reg_1209;
    grp_fu_431_p0 <= p_Result_6_reg_1214;
    grp_fu_435_p0 <= p_Result_7_reg_1219;
    grp_fu_439_p0 <= p_Result_8_reg_1224;
    grp_fu_443_p0 <= p_Result_9_reg_1229;
    grp_fu_447_p0 <= p_Result_1_reg_1234;
    grp_fu_451_p0 <= p_Result_10_reg_1239;
    grp_fu_455_p0 <= p_Result_11_reg_1244;
    grp_fu_459_p0 <= p_Result_12_reg_1249;
    grp_fu_463_p0 <= p_Result_13_reg_1254;
    grp_fu_467_p0 <= p_Result_14_reg_1259;
    grp_fu_474_p2 <= "0" when (index_0_reg_362 = ap_const_lv3_0) else "1";
    grp_load_fu_393_ap_start <= grp_load_fu_393_ap_start_reg;
    icmp_ln101_fu_956_p2 <= "1" when (counter_1_fu_194 = ap_const_lv32_0) else "0";
    icmp_ln111_fu_992_p2 <= "1" when (counter_fu_986_p2 = ap_const_lv32_2) else "0";
    icmp_ln115_fu_1011_p2 <= "1" when (ii22_0_reg_373 = ap_const_lv5_10) else "0";
    icmp_ln71_fu_520_p2 <= "1" when (indvar_flatten_reg_306 = ap_const_lv5_10) else "0";
    icmp_ln75_fu_572_p2 <= "1" when (ii_0_reg_339 = ap_const_lv5_10) else "0";
    icmp_ln84_fu_624_p2 <= "1" when (ii20_0_reg_351 = ap_const_lv5_10) else "0";
    icmp_ln99_fu_944_p2 <= "1" when (index_0_reg_362 = ap_const_lv3_5) else "0";
    ii_1_fu_630_p2 <= std_logic_vector(unsigned(ii20_0_reg_351) + unsigned(ap_const_lv5_1));
    ii_2_fu_1017_p2 <= std_logic_vector(unsigned(ii22_0_reg_373) + unsigned(ap_const_lv5_1));
    ii_fu_578_p2 <= std_logic_vector(unsigned(ii_0_reg_339) + unsigned(ap_const_lv5_1));
    index_fu_950_p2 <= std_logic_vector(unsigned(index_0_reg_362) + unsigned(ap_const_lv3_1));
    j_fu_1053_p2 <= std_logic_vector(unsigned(select_ln72_reg_1124) + unsigned(ap_const_lv7_10));

    local_A_ping_0_V_address0_assign_proc : process(icmp_ln101_reg_1432, grp_compute_fu_384_local_A_0_V_address0, grp_load_fu_393_local_A_0_V_address0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                local_A_ping_0_V_address0 <= grp_load_fu_393_local_A_0_V_address0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                local_A_ping_0_V_address0 <= grp_compute_fu_384_local_A_0_V_address0;
            else 
                local_A_ping_0_V_address0 <= "XXXX";
            end if;
        else 
            local_A_ping_0_V_address0 <= "XXXX";
        end if; 
    end process;


    local_A_ping_0_V_ce0_assign_proc : process(icmp_ln101_reg_1432, grp_compute_fu_384_local_A_0_V_ce0, grp_load_fu_393_local_A_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                local_A_ping_0_V_ce0 <= grp_load_fu_393_local_A_0_V_ce0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                local_A_ping_0_V_ce0 <= grp_compute_fu_384_local_A_0_V_ce0;
            else 
                local_A_ping_0_V_ce0 <= ap_const_logic_0;
            end if;
        else 
            local_A_ping_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_A_ping_0_V_we0_assign_proc : process(icmp_ln101_reg_1432, grp_load_fu_393_local_A_0_V_we0, ap_CS_fsm_state22)
    begin
        if (((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            local_A_ping_0_V_we0 <= grp_load_fu_393_local_A_0_V_we0;
        else 
            local_A_ping_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_A_pong_0_V_address0_assign_proc : process(icmp_ln101_reg_1432, grp_compute_fu_384_local_A_0_V_address0, grp_load_fu_393_local_A_0_V_address0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                local_A_pong_0_V_address0 <= grp_load_fu_393_local_A_0_V_address0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                local_A_pong_0_V_address0 <= grp_compute_fu_384_local_A_0_V_address0;
            else 
                local_A_pong_0_V_address0 <= "XXXX";
            end if;
        else 
            local_A_pong_0_V_address0 <= "XXXX";
        end if; 
    end process;


    local_A_pong_0_V_ce0_assign_proc : process(icmp_ln101_reg_1432, grp_compute_fu_384_local_A_0_V_ce0, grp_load_fu_393_local_A_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                local_A_pong_0_V_ce0 <= grp_load_fu_393_local_A_0_V_ce0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                local_A_pong_0_V_ce0 <= grp_compute_fu_384_local_A_0_V_ce0;
            else 
                local_A_pong_0_V_ce0 <= ap_const_logic_0;
            end if;
        else 
            local_A_pong_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_A_pong_0_V_we0_assign_proc : process(icmp_ln101_reg_1432, grp_load_fu_393_local_A_0_V_we0, ap_CS_fsm_state22)
    begin
        if (((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            local_A_pong_0_V_we0 <= grp_load_fu_393_local_A_0_V_we0;
        else 
            local_A_pong_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_B_ping_0_V_address0_assign_proc : process(icmp_ln101_reg_1432, grp_compute_fu_384_local_B_V_address0, grp_load_fu_393_local_B_V_address0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                local_B_ping_0_V_address0 <= grp_load_fu_393_local_B_V_address0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                local_B_ping_0_V_address0 <= grp_compute_fu_384_local_B_V_address0;
            else 
                local_B_ping_0_V_address0 <= "XXXX";
            end if;
        else 
            local_B_ping_0_V_address0 <= "XXXX";
        end if; 
    end process;


    local_B_ping_0_V_ce0_assign_proc : process(icmp_ln101_reg_1432, grp_compute_fu_384_local_B_V_ce0, grp_load_fu_393_local_B_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                local_B_ping_0_V_ce0 <= grp_load_fu_393_local_B_V_ce0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                local_B_ping_0_V_ce0 <= grp_compute_fu_384_local_B_V_ce0;
            else 
                local_B_ping_0_V_ce0 <= ap_const_logic_0;
            end if;
        else 
            local_B_ping_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_B_ping_0_V_we0_assign_proc : process(icmp_ln101_reg_1432, grp_load_fu_393_local_B_V_we0, ap_CS_fsm_state22)
    begin
        if (((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            local_B_ping_0_V_we0 <= grp_load_fu_393_local_B_V_we0;
        else 
            local_B_ping_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_B_pong_0_V_address0_assign_proc : process(icmp_ln101_reg_1432, grp_compute_fu_384_local_B_V_address0, grp_load_fu_393_local_B_V_address0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                local_B_pong_0_V_address0 <= grp_load_fu_393_local_B_V_address0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                local_B_pong_0_V_address0 <= grp_compute_fu_384_local_B_V_address0;
            else 
                local_B_pong_0_V_address0 <= "XXXX";
            end if;
        else 
            local_B_pong_0_V_address0 <= "XXXX";
        end if; 
    end process;


    local_B_pong_0_V_ce0_assign_proc : process(icmp_ln101_reg_1432, grp_compute_fu_384_local_B_V_ce0, grp_load_fu_393_local_B_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            if ((icmp_ln101_reg_1432 = ap_const_lv1_0)) then 
                local_B_pong_0_V_ce0 <= grp_load_fu_393_local_B_V_ce0;
            elsif ((icmp_ln101_reg_1432 = ap_const_lv1_1)) then 
                local_B_pong_0_V_ce0 <= grp_compute_fu_384_local_B_V_ce0;
            else 
                local_B_pong_0_V_ce0 <= ap_const_logic_0;
            end if;
        else 
            local_B_pong_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_B_pong_0_V_we0_assign_proc : process(icmp_ln101_reg_1432, grp_load_fu_393_local_B_V_we0, ap_CS_fsm_state22)
    begin
        if (((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            local_B_pong_0_V_we0 <= grp_load_fu_393_local_B_V_we0;
        else 
            local_B_pong_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_0_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln101_reg_1432, grp_compute_fu_384_local_C_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state22, zext_ln78_fu_619_p1, zext_ln89_fu_636_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_C_0_V_address0 <= zext_ln89_fu_636_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            local_C_0_V_address0 <= zext_ln78_fu_619_p1(4 - 1 downto 0);
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            local_C_0_V_address0 <= grp_compute_fu_384_local_C_V_address0;
        else 
            local_C_0_V_address0 <= "XXXX";
        end if; 
    end process;


    local_C_0_V_address1_assign_proc : process(local_C_0_V_addr_1_reg_1178_pp0_iter5_reg, icmp_ln101_reg_1432, ap_CS_fsm_state23, ap_enable_reg_pp0_iter6, grp_compute_fu_384_local_C_V_address1, ap_CS_fsm_state22, ap_block_pp0_stage0, zext_ln118_1_fu_1032_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            local_C_0_V_address1 <= zext_ln118_1_fu_1032_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            local_C_0_V_address1 <= local_C_0_V_addr_1_reg_1178_pp0_iter5_reg;
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            local_C_0_V_address1 <= grp_compute_fu_384_local_C_V_address1;
        else 
            local_C_0_V_address1 <= "XXXX";
        end if; 
    end process;


    local_C_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, icmp_ln101_reg_1432, grp_compute_fu_384_local_C_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            local_C_0_V_ce0 <= ap_const_logic_1;
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            local_C_0_V_ce0 <= grp_compute_fu_384_local_C_V_ce0;
        else 
            local_C_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_0_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln101_reg_1432, ap_CS_fsm_state23, ap_enable_reg_pp0_iter6, grp_compute_fu_384_local_C_V_ce1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then 
            local_C_0_V_ce1 <= ap_const_logic_1;
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            local_C_0_V_ce1 <= grp_compute_fu_384_local_C_V_ce1;
        else 
            local_C_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_0_V_d1_assign_proc : process(icmp_ln101_reg_1432, ap_enable_reg_pp0_iter6, grp_compute_fu_384_local_C_V_d1, ap_CS_fsm_state22, ap_block_pp0_stage0, p_Result_1_s_fu_907_p17)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            local_C_0_V_d1 <= p_Result_1_s_fu_907_p17;
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            local_C_0_V_d1 <= grp_compute_fu_384_local_C_V_d1;
        else 
            local_C_0_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    local_C_0_V_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            local_C_0_V_we0 <= ap_const_logic_1;
        else 
            local_C_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_0_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln84_reg_1169_pp0_iter5_reg, icmp_ln101_reg_1432, ap_enable_reg_pp0_iter6, grp_compute_fu_384_local_C_V_we1, ap_CS_fsm_state22)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_reg_1169_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            local_C_0_V_we1 <= ap_const_logic_1;
        elsif ((((icmp_ln101_reg_1432 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((icmp_ln101_reg_1432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            local_C_0_V_we1 <= grp_compute_fu_384_local_C_V_we1;
        else 
            local_C_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_s_fu_907_p17 <= (((((((((((((((bitcast_ln91_15_fu_904_p1 & bitcast_ln91_14_fu_901_p1) & bitcast_ln91_13_fu_898_p1) & bitcast_ln91_12_fu_895_p1) & bitcast_ln91_11_fu_892_p1) & bitcast_ln91_10_fu_889_p1) & bitcast_ln91_9_fu_886_p1) & bitcast_ln91_8_fu_883_p1) & bitcast_ln91_7_fu_880_p1) & bitcast_ln91_6_fu_877_p1) & bitcast_ln91_5_fu_874_p1) & bitcast_ln91_4_fu_871_p1) & bitcast_ln91_3_fu_868_p1) & bitcast_ln91_2_fu_865_p1) & bitcast_ln91_1_fu_862_p1) & bitcast_ln91_fu_859_p1);
    p_cast_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_501_p4),27));
    select_ln111_fu_998_p3 <= 
        ap_const_lv32_0 when (icmp_ln111_fu_992_p2(0) = '1') else 
        counter_fu_986_p2;
    select_ln71_fu_554_p3 <= 
        add_ln71_1_fu_548_p2 when (tmp_4_fu_532_p3(0) = '1') else 
        i_0_reg_317;
    select_ln72_fu_540_p3 <= 
        ap_const_lv7_0 when (tmp_4_fu_532_p3(0) = '1') else 
        j_0_reg_328;
    shl_ln_fu_970_p3 <= (index_0_reg_362 & ap_const_lv4_0);
    tmp_3_fu_1037_p3 <= (add_ln118_fu_1027_p2 & trunc_ln78_1_reg_1138);
    tmp_4_fu_532_p3 <= j_0_reg_328(6 downto 6);
    tmp_5_fu_962_p3 <= index_0_reg_362(2 downto 2);
    tmp_fu_501_p4 <= C_V(31 downto 6);
    trunc_ln681_fu_641_p1 <= local_C_0_V_q0(32 - 1 downto 0);
    xor_ln103_fu_979_p2 <= (tmp_5_fu_962_p3 xor ap_const_lv1_1);
    zext_ln118_1_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii22_0_reg_373),64));
    zext_ln118_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii22_0_reg_373),7));
    zext_ln180_4_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_reg_1153),64));
    zext_ln180_5_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1037_p3),27));
    zext_ln180_6_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_2_reg_1469),64));
    zext_ln180_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_1_fu_593_p3),27));
    zext_ln78_1_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_0_reg_339),7));
    zext_ln78_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_0_reg_339),64));
    zext_ln89_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii20_0_reg_351),64));
end behav;
