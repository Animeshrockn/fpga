// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "load.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic load::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic load::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> load::ap_ST_fsm_state1 = "1";
const sc_lv<21> load::ap_ST_fsm_state2 = "10";
const sc_lv<21> load::ap_ST_fsm_state3 = "100";
const sc_lv<21> load::ap_ST_fsm_state4 = "1000";
const sc_lv<21> load::ap_ST_fsm_state5 = "10000";
const sc_lv<21> load::ap_ST_fsm_state6 = "100000";
const sc_lv<21> load::ap_ST_fsm_state7 = "1000000";
const sc_lv<21> load::ap_ST_fsm_state8 = "10000000";
const sc_lv<21> load::ap_ST_fsm_state9 = "100000000";
const sc_lv<21> load::ap_ST_fsm_state10 = "1000000000";
const sc_lv<21> load::ap_ST_fsm_state11 = "10000000000";
const sc_lv<21> load::ap_ST_fsm_state12 = "100000000000";
const sc_lv<21> load::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<21> load::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<21> load::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<21> load::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<21> load::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<21> load::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<21> load::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<21> load::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<21> load::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> load::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> load::ap_const_lv1_0 = "0";
const sc_lv<3> load::ap_const_lv3_0 = "000";
const sc_lv<2> load::ap_const_lv2_0 = "00";
const sc_lv<4> load::ap_const_lv4_0 = "0000";
const sc_lv<512> load::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> load::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> load::ap_const_lv32_2 = "10";
const sc_lv<32> load::ap_const_lv32_9 = "1001";
const sc_lv<32> load::ap_const_lv32_C = "1100";
const sc_lv<32> load::ap_const_lv32_13 = "10011";
const sc_lv<1> load::ap_const_lv1_1 = "1";
const sc_lv<32> load::ap_const_lv32_1 = "1";
const sc_lv<32> load::ap_const_lv32_B = "1011";
const sc_lv<32> load::ap_const_lv32_A = "1010";
const sc_lv<5> load::ap_const_lv5_0 = "00000";
const sc_lv<32> load::ap_const_lv32_14 = "10100";
const sc_lv<32> load::ap_const_lv32_4 = "100";
const sc_lv<32> load::ap_const_lv32_6 = "110";
const sc_lv<5> load::ap_const_lv5_10 = "10000";
const sc_lv<5> load::ap_const_lv5_1 = "1";
const bool load::ap_const_boolean_1 = true;

load::load(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_V_blk_n_AR);
    sensitive << ( m_axi_A_V_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_A_V_blk_n_R);
    sensitive << ( m_axi_A_V_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_add_ln10_1_fu_229_p2);
    sensitive << ( zext_ln10_1_reg_356 );
    sensitive << ( shl_ln_fu_221_p3 );

    SC_METHOD(thread_add_ln10_fu_216_p2);
    sensitive << ( i );
    sensitive << ( zext_ln10_2_fu_212_p1 );

    SC_METHOD(thread_add_ln17_1_fu_303_p2);
    sensitive << ( zext_ln17_1_reg_379 );
    sensitive << ( shl_ln1_fu_295_p3 );

    SC_METHOD(thread_add_ln17_fu_290_p2);
    sensitive << ( k );
    sensitive << ( zext_ln17_2_fu_286_p1 );

    SC_METHOD(thread_add_ln180_1_fu_312_p2);
    sensitive << ( zext_ln14_reg_384 );
    sensitive << ( zext_ln180_2_fu_308_p1 );

    SC_METHOD(thread_add_ln180_fu_238_p2);
    sensitive << ( zext_ln7_reg_361 );
    sensitive << ( zext_ln180_fu_234_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( flag_read_read_fu_102_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln14_fu_274_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( flag_read_read_fu_102_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln14_fu_274_p2 );

    SC_METHOD(thread_flag_read_read_fu_102_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( flag );

    SC_METHOD(thread_icmp_ln14_fu_274_p2);
    sensitive << ( flag_read_read_fu_102_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( kk3_0_reg_170 );

    SC_METHOD(thread_icmp_ln7_fu_200_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ii1_0_reg_158 );

    SC_METHOD(thread_ii_fu_206_p2);
    sensitive << ( ii1_0_reg_158 );

    SC_METHOD(thread_kk_fu_280_p2);
    sensitive << ( kk3_0_reg_170 );

    SC_METHOD(thread_local_A_0_V_address0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( zext_ln10_fu_269_p1 );

    SC_METHOD(thread_local_A_0_V_ce0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_local_A_0_V_d0);
    sensitive << ( B_V_addr_read_reg_395 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_local_A_0_V_we0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_local_B_V_address0);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( zext_ln17_fu_327_p1 );

    SC_METHOD(thread_local_B_V_ce0);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_local_B_V_d0);
    sensitive << ( B_V_addr_1_read_reg_419 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_local_B_V_we0);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_m_axi_A_V_ARADDR);
    sensitive << ( m_axi_A_V_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( zext_ln180_1_fu_259_p1 );
    sensitive << ( zext_ln180_3_fu_317_p1 );

    SC_METHOD(thread_m_axi_A_V_ARBURST);

    SC_METHOD(thread_m_axi_A_V_ARCACHE);

    SC_METHOD(thread_m_axi_A_V_ARID);

    SC_METHOD(thread_m_axi_A_V_ARLEN);
    sensitive << ( m_axi_A_V_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_m_axi_A_V_ARLOCK);

    SC_METHOD(thread_m_axi_A_V_ARPROT);

    SC_METHOD(thread_m_axi_A_V_ARQOS);

    SC_METHOD(thread_m_axi_A_V_ARREGION);

    SC_METHOD(thread_m_axi_A_V_ARSIZE);

    SC_METHOD(thread_m_axi_A_V_ARUSER);

    SC_METHOD(thread_m_axi_A_V_ARVALID);
    sensitive << ( m_axi_A_V_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_m_axi_A_V_AWADDR);

    SC_METHOD(thread_m_axi_A_V_AWBURST);

    SC_METHOD(thread_m_axi_A_V_AWCACHE);

    SC_METHOD(thread_m_axi_A_V_AWID);

    SC_METHOD(thread_m_axi_A_V_AWLEN);

    SC_METHOD(thread_m_axi_A_V_AWLOCK);

    SC_METHOD(thread_m_axi_A_V_AWPROT);

    SC_METHOD(thread_m_axi_A_V_AWQOS);

    SC_METHOD(thread_m_axi_A_V_AWREGION);

    SC_METHOD(thread_m_axi_A_V_AWSIZE);

    SC_METHOD(thread_m_axi_A_V_AWUSER);

    SC_METHOD(thread_m_axi_A_V_AWVALID);

    SC_METHOD(thread_m_axi_A_V_BREADY);

    SC_METHOD(thread_m_axi_A_V_RREADY);
    sensitive << ( m_axi_A_V_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_m_axi_A_V_WDATA);

    SC_METHOD(thread_m_axi_A_V_WID);

    SC_METHOD(thread_m_axi_A_V_WLAST);

    SC_METHOD(thread_m_axi_A_V_WSTRB);

    SC_METHOD(thread_m_axi_A_V_WUSER);

    SC_METHOD(thread_m_axi_A_V_WVALID);

    SC_METHOD(thread_shl_ln1_fu_295_p3);
    sensitive << ( add_ln17_fu_290_p2 );

    SC_METHOD(thread_shl_ln_fu_221_p3);
    sensitive << ( add_ln10_fu_216_p2 );

    SC_METHOD(thread_trunc_ln1_fu_243_p4);
    sensitive << ( j );

    SC_METHOD(thread_trunc_ln_fu_182_p4);
    sensitive << ( k );

    SC_METHOD(thread_zext_ln10_1_fu_192_p1);
    sensitive << ( trunc_ln_fu_182_p4 );

    SC_METHOD(thread_zext_ln10_2_fu_212_p1);
    sensitive << ( ii1_0_reg_158 );

    SC_METHOD(thread_zext_ln10_fu_269_p1);
    sensitive << ( ii1_0_reg_158 );

    SC_METHOD(thread_zext_ln14_fu_256_p1);
    sensitive << ( B_V_offset );

    SC_METHOD(thread_zext_ln17_1_fu_252_p1);
    sensitive << ( trunc_ln1_fu_243_p4 );

    SC_METHOD(thread_zext_ln17_2_fu_286_p1);
    sensitive << ( kk3_0_reg_170 );

    SC_METHOD(thread_zext_ln17_fu_327_p1);
    sensitive << ( kk3_0_reg_170 );

    SC_METHOD(thread_zext_ln180_1_fu_259_p1);
    sensitive << ( add_ln180_reg_374 );

    SC_METHOD(thread_zext_ln180_2_fu_308_p1);
    sensitive << ( add_ln17_1_fu_303_p2 );

    SC_METHOD(thread_zext_ln180_3_fu_317_p1);
    sensitive << ( add_ln180_1_reg_408 );

    SC_METHOD(thread_zext_ln180_fu_234_p1);
    sensitive << ( add_ln10_1_fu_229_p2 );

    SC_METHOD(thread_zext_ln7_fu_196_p1);
    sensitive << ( A_V_offset );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_A_V_ARREADY );
    sensitive << ( m_axi_A_V_RVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( flag_read_read_fu_102_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln7_fu_200_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln14_fu_274_p2 );

    ap_CS_fsm = "000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "load_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, flag, "(port)flag");
    sc_trace(mVcdFile, i, "(port)i");
    sc_trace(mVcdFile, j, "(port)j");
    sc_trace(mVcdFile, k, "(port)k");
    sc_trace(mVcdFile, local_A_0_V_address0, "(port)local_A_0_V_address0");
    sc_trace(mVcdFile, local_A_0_V_ce0, "(port)local_A_0_V_ce0");
    sc_trace(mVcdFile, local_A_0_V_we0, "(port)local_A_0_V_we0");
    sc_trace(mVcdFile, local_A_0_V_d0, "(port)local_A_0_V_d0");
    sc_trace(mVcdFile, local_B_V_address0, "(port)local_B_V_address0");
    sc_trace(mVcdFile, local_B_V_ce0, "(port)local_B_V_ce0");
    sc_trace(mVcdFile, local_B_V_we0, "(port)local_B_V_we0");
    sc_trace(mVcdFile, local_B_V_d0, "(port)local_B_V_d0");
    sc_trace(mVcdFile, m_axi_A_V_AWVALID, "(port)m_axi_A_V_AWVALID");
    sc_trace(mVcdFile, m_axi_A_V_AWREADY, "(port)m_axi_A_V_AWREADY");
    sc_trace(mVcdFile, m_axi_A_V_AWADDR, "(port)m_axi_A_V_AWADDR");
    sc_trace(mVcdFile, m_axi_A_V_AWID, "(port)m_axi_A_V_AWID");
    sc_trace(mVcdFile, m_axi_A_V_AWLEN, "(port)m_axi_A_V_AWLEN");
    sc_trace(mVcdFile, m_axi_A_V_AWSIZE, "(port)m_axi_A_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_A_V_AWBURST, "(port)m_axi_A_V_AWBURST");
    sc_trace(mVcdFile, m_axi_A_V_AWLOCK, "(port)m_axi_A_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_A_V_AWCACHE, "(port)m_axi_A_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_A_V_AWPROT, "(port)m_axi_A_V_AWPROT");
    sc_trace(mVcdFile, m_axi_A_V_AWQOS, "(port)m_axi_A_V_AWQOS");
    sc_trace(mVcdFile, m_axi_A_V_AWREGION, "(port)m_axi_A_V_AWREGION");
    sc_trace(mVcdFile, m_axi_A_V_AWUSER, "(port)m_axi_A_V_AWUSER");
    sc_trace(mVcdFile, m_axi_A_V_WVALID, "(port)m_axi_A_V_WVALID");
    sc_trace(mVcdFile, m_axi_A_V_WREADY, "(port)m_axi_A_V_WREADY");
    sc_trace(mVcdFile, m_axi_A_V_WDATA, "(port)m_axi_A_V_WDATA");
    sc_trace(mVcdFile, m_axi_A_V_WSTRB, "(port)m_axi_A_V_WSTRB");
    sc_trace(mVcdFile, m_axi_A_V_WLAST, "(port)m_axi_A_V_WLAST");
    sc_trace(mVcdFile, m_axi_A_V_WID, "(port)m_axi_A_V_WID");
    sc_trace(mVcdFile, m_axi_A_V_WUSER, "(port)m_axi_A_V_WUSER");
    sc_trace(mVcdFile, m_axi_A_V_ARVALID, "(port)m_axi_A_V_ARVALID");
    sc_trace(mVcdFile, m_axi_A_V_ARREADY, "(port)m_axi_A_V_ARREADY");
    sc_trace(mVcdFile, m_axi_A_V_ARADDR, "(port)m_axi_A_V_ARADDR");
    sc_trace(mVcdFile, m_axi_A_V_ARID, "(port)m_axi_A_V_ARID");
    sc_trace(mVcdFile, m_axi_A_V_ARLEN, "(port)m_axi_A_V_ARLEN");
    sc_trace(mVcdFile, m_axi_A_V_ARSIZE, "(port)m_axi_A_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_A_V_ARBURST, "(port)m_axi_A_V_ARBURST");
    sc_trace(mVcdFile, m_axi_A_V_ARLOCK, "(port)m_axi_A_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_A_V_ARCACHE, "(port)m_axi_A_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_A_V_ARPROT, "(port)m_axi_A_V_ARPROT");
    sc_trace(mVcdFile, m_axi_A_V_ARQOS, "(port)m_axi_A_V_ARQOS");
    sc_trace(mVcdFile, m_axi_A_V_ARREGION, "(port)m_axi_A_V_ARREGION");
    sc_trace(mVcdFile, m_axi_A_V_ARUSER, "(port)m_axi_A_V_ARUSER");
    sc_trace(mVcdFile, m_axi_A_V_RVALID, "(port)m_axi_A_V_RVALID");
    sc_trace(mVcdFile, m_axi_A_V_RREADY, "(port)m_axi_A_V_RREADY");
    sc_trace(mVcdFile, m_axi_A_V_RDATA, "(port)m_axi_A_V_RDATA");
    sc_trace(mVcdFile, m_axi_A_V_RLAST, "(port)m_axi_A_V_RLAST");
    sc_trace(mVcdFile, m_axi_A_V_RID, "(port)m_axi_A_V_RID");
    sc_trace(mVcdFile, m_axi_A_V_RUSER, "(port)m_axi_A_V_RUSER");
    sc_trace(mVcdFile, m_axi_A_V_RRESP, "(port)m_axi_A_V_RRESP");
    sc_trace(mVcdFile, m_axi_A_V_BVALID, "(port)m_axi_A_V_BVALID");
    sc_trace(mVcdFile, m_axi_A_V_BREADY, "(port)m_axi_A_V_BREADY");
    sc_trace(mVcdFile, m_axi_A_V_BRESP, "(port)m_axi_A_V_BRESP");
    sc_trace(mVcdFile, m_axi_A_V_BID, "(port)m_axi_A_V_BID");
    sc_trace(mVcdFile, m_axi_A_V_BUSER, "(port)m_axi_A_V_BUSER");
    sc_trace(mVcdFile, A_V_offset, "(port)A_V_offset");
    sc_trace(mVcdFile, B_V_offset, "(port)B_V_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, A_V_blk_n_AR, "A_V_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, A_V_blk_n_R, "A_V_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, flag_read_read_fu_102_p2, "flag_read_read_fu_102_p2");
    sc_trace(mVcdFile, zext_ln10_1_fu_192_p1, "zext_ln10_1_fu_192_p1");
    sc_trace(mVcdFile, zext_ln10_1_reg_356, "zext_ln10_1_reg_356");
    sc_trace(mVcdFile, zext_ln7_fu_196_p1, "zext_ln7_fu_196_p1");
    sc_trace(mVcdFile, zext_ln7_reg_361, "zext_ln7_reg_361");
    sc_trace(mVcdFile, ii_fu_206_p2, "ii_fu_206_p2");
    sc_trace(mVcdFile, ii_reg_369, "ii_reg_369");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln180_fu_238_p2, "add_ln180_fu_238_p2");
    sc_trace(mVcdFile, add_ln180_reg_374, "add_ln180_reg_374");
    sc_trace(mVcdFile, icmp_ln7_fu_200_p2, "icmp_ln7_fu_200_p2");
    sc_trace(mVcdFile, zext_ln17_1_fu_252_p1, "zext_ln17_1_fu_252_p1");
    sc_trace(mVcdFile, zext_ln17_1_reg_379, "zext_ln17_1_reg_379");
    sc_trace(mVcdFile, zext_ln14_fu_256_p1, "zext_ln14_fu_256_p1");
    sc_trace(mVcdFile, zext_ln14_reg_384, "zext_ln14_reg_384");
    sc_trace(mVcdFile, B_V_addr_read_reg_395, "B_V_addr_read_reg_395");
    sc_trace(mVcdFile, kk_fu_280_p2, "kk_fu_280_p2");
    sc_trace(mVcdFile, kk_reg_403, "kk_reg_403");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, add_ln180_1_fu_312_p2, "add_ln180_1_fu_312_p2");
    sc_trace(mVcdFile, add_ln180_1_reg_408, "add_ln180_1_reg_408");
    sc_trace(mVcdFile, icmp_ln14_fu_274_p2, "icmp_ln14_fu_274_p2");
    sc_trace(mVcdFile, B_V_addr_1_read_reg_419, "B_V_addr_1_read_reg_419");
    sc_trace(mVcdFile, ii1_0_reg_158, "ii1_0_reg_158");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, kk3_0_reg_170, "kk3_0_reg_170");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, zext_ln10_fu_269_p1, "zext_ln10_fu_269_p1");
    sc_trace(mVcdFile, zext_ln17_fu_327_p1, "zext_ln17_fu_327_p1");
    sc_trace(mVcdFile, zext_ln180_1_fu_259_p1, "zext_ln180_1_fu_259_p1");
    sc_trace(mVcdFile, zext_ln180_3_fu_317_p1, "zext_ln180_3_fu_317_p1");
    sc_trace(mVcdFile, trunc_ln_fu_182_p4, "trunc_ln_fu_182_p4");
    sc_trace(mVcdFile, zext_ln10_2_fu_212_p1, "zext_ln10_2_fu_212_p1");
    sc_trace(mVcdFile, add_ln10_fu_216_p2, "add_ln10_fu_216_p2");
    sc_trace(mVcdFile, shl_ln_fu_221_p3, "shl_ln_fu_221_p3");
    sc_trace(mVcdFile, add_ln10_1_fu_229_p2, "add_ln10_1_fu_229_p2");
    sc_trace(mVcdFile, zext_ln180_fu_234_p1, "zext_ln180_fu_234_p1");
    sc_trace(mVcdFile, trunc_ln1_fu_243_p4, "trunc_ln1_fu_243_p4");
    sc_trace(mVcdFile, zext_ln17_2_fu_286_p1, "zext_ln17_2_fu_286_p1");
    sc_trace(mVcdFile, add_ln17_fu_290_p2, "add_ln17_fu_290_p2");
    sc_trace(mVcdFile, shl_ln1_fu_295_p3, "shl_ln1_fu_295_p3");
    sc_trace(mVcdFile, add_ln17_1_fu_303_p2, "add_ln17_1_fu_303_p2");
    sc_trace(mVcdFile, zext_ln180_2_fu_308_p1, "zext_ln180_2_fu_308_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

load::~load() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void load::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(flag_read_read_fu_102_p2.read(), ap_const_lv1_1))) {
        ii1_0_reg_158 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ii1_0_reg_158 = ii_reg_369.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln7_fu_200_p2.read()))) {
        kk3_0_reg_170 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        kk3_0_reg_170 = kk_reg_403.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(m_axi_A_V_RVALID.read(), ap_const_logic_1))) {
        B_V_addr_1_read_reg_419 = m_axi_A_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(m_axi_A_V_RVALID.read(), ap_const_logic_1))) {
        B_V_addr_read_reg_395 = m_axi_A_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(flag_read_read_fu_102_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_fu_274_p2.read()))) {
        add_ln180_1_reg_408 = add_ln180_1_fu_312_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln7_fu_200_p2.read()))) {
        add_ln180_reg_374 = add_ln180_fu_238_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ii_reg_369 = ii_fu_206_p2.read();
    }
    if ((esl_seteq<1,1,1>(flag_read_read_fu_102_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        kk_reg_403 = kk_fu_280_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(flag_read_read_fu_102_p2.read(), ap_const_lv1_1))) {
        zext_ln10_1_reg_356 = zext_ln10_1_fu_192_p1.read();
        zext_ln7_reg_361 = zext_ln7_fu_196_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln7_fu_200_p2.read()))) {
        zext_ln14_reg_384 = zext_ln14_fu_256_p1.read();
        zext_ln17_1_reg_379 = zext_ln17_1_fu_252_p1.read();
    }
}

void load::thread_A_V_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        A_V_blk_n_AR = m_axi_A_V_ARREADY.read();
    } else {
        A_V_blk_n_AR = ap_const_logic_1;
    }
}

void load::thread_A_V_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        A_V_blk_n_R = m_axi_A_V_RVALID.read();
    } else {
        A_V_blk_n_R = ap_const_logic_1;
    }
}

void load::thread_add_ln10_1_fu_229_p2() {
    add_ln10_1_fu_229_p2 = (!zext_ln10_1_reg_356.read().is_01() || !shl_ln_fu_221_p3.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln10_1_reg_356.read()) + sc_biguint<9>(shl_ln_fu_221_p3.read()));
}

void load::thread_add_ln10_fu_216_p2() {
    add_ln10_fu_216_p2 = (!i.read().is_01() || !zext_ln10_2_fu_212_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(i.read()) + sc_biguint<7>(zext_ln10_2_fu_212_p1.read()));
}

void load::thread_add_ln17_1_fu_303_p2() {
    add_ln17_1_fu_303_p2 = (!zext_ln17_1_reg_379.read().is_01() || !shl_ln1_fu_295_p3.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln17_1_reg_379.read()) + sc_biguint<9>(shl_ln1_fu_295_p3.read()));
}

void load::thread_add_ln17_fu_290_p2() {
    add_ln17_fu_290_p2 = (!k.read().is_01() || !zext_ln17_2_fu_286_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(k.read()) + sc_biguint<7>(zext_ln17_2_fu_286_p1.read()));
}

void load::thread_add_ln180_1_fu_312_p2() {
    add_ln180_1_fu_312_p2 = (!zext_ln180_2_fu_308_p1.read().is_01() || !zext_ln14_reg_384.read().is_01())? sc_lv<27>(): (sc_biguint<27>(zext_ln180_2_fu_308_p1.read()) + sc_biguint<27>(zext_ln14_reg_384.read()));
}

void load::thread_add_ln180_fu_238_p2() {
    add_ln180_fu_238_p2 = (!zext_ln180_fu_234_p1.read().is_01() || !zext_ln7_reg_361.read().is_01())? sc_lv<27>(): (sc_biguint<27>(zext_ln180_fu_234_p1.read()) + sc_biguint<27>(zext_ln7_reg_361.read()));
}

void load::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void load::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void load::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void load::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void load::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void load::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void load::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void load::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void load::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void load::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_274_p2.read()) || 
           esl_seteq<1,1,1>(ap_const_lv1_0, flag_read_read_fu_102_p2.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void load::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void load::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_274_p2.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, flag_read_read_fu_102_p2.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void load::thread_flag_read_read_fu_102_p2() {
    flag_read_read_fu_102_p2 = flag.read();
}

void load::thread_icmp_ln14_fu_274_p2() {
    icmp_ln14_fu_274_p2 = (!kk3_0_reg_170.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(kk3_0_reg_170.read() == ap_const_lv5_10);
}

void load::thread_icmp_ln7_fu_200_p2() {
    icmp_ln7_fu_200_p2 = (!ii1_0_reg_158.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(ii1_0_reg_158.read() == ap_const_lv5_10);
}

void load::thread_ii_fu_206_p2() {
    ii_fu_206_p2 = (!ii1_0_reg_158.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ii1_0_reg_158.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void load::thread_kk_fu_280_p2() {
    kk_fu_280_p2 = (!kk3_0_reg_170.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(kk3_0_reg_170.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void load::thread_local_A_0_V_address0() {
    local_A_0_V_address0 =  (sc_lv<4>) (zext_ln10_fu_269_p1.read());
}

void load::thread_local_A_0_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        local_A_0_V_ce0 = ap_const_logic_1;
    } else {
        local_A_0_V_ce0 = ap_const_logic_0;
    }
}

void load::thread_local_A_0_V_d0() {
    local_A_0_V_d0 = B_V_addr_read_reg_395.read();
}

void load::thread_local_A_0_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        local_A_0_V_we0 = ap_const_logic_1;
    } else {
        local_A_0_V_we0 = ap_const_logic_0;
    }
}

void load::thread_local_B_V_address0() {
    local_B_V_address0 =  (sc_lv<4>) (zext_ln17_fu_327_p1.read());
}

void load::thread_local_B_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        local_B_V_ce0 = ap_const_logic_1;
    } else {
        local_B_V_ce0 = ap_const_logic_0;
    }
}

void load::thread_local_B_V_d0() {
    local_B_V_d0 = B_V_addr_1_read_reg_419.read();
}

void load::thread_local_B_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        local_B_V_we0 = ap_const_logic_1;
    } else {
        local_B_V_we0 = ap_const_logic_0;
    }
}

void load::thread_m_axi_A_V_ARADDR() {
    if (esl_seteq<1,1,1>(m_axi_A_V_ARREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            m_axi_A_V_ARADDR =  (sc_lv<32>) (zext_ln180_3_fu_317_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            m_axi_A_V_ARADDR =  (sc_lv<32>) (zext_ln180_1_fu_259_p1.read());
        } else {
            m_axi_A_V_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        m_axi_A_V_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void load::thread_m_axi_A_V_ARBURST() {
    m_axi_A_V_ARBURST = ap_const_lv2_0;
}

void load::thread_m_axi_A_V_ARCACHE() {
    m_axi_A_V_ARCACHE = ap_const_lv4_0;
}

void load::thread_m_axi_A_V_ARID() {
    m_axi_A_V_ARID = ap_const_lv1_0;
}

void load::thread_m_axi_A_V_ARLEN() {
    m_axi_A_V_ARLEN = ap_const_lv32_1;
}

void load::thread_m_axi_A_V_ARLOCK() {
    m_axi_A_V_ARLOCK = ap_const_lv2_0;
}

void load::thread_m_axi_A_V_ARPROT() {
    m_axi_A_V_ARPROT = ap_const_lv3_0;
}

void load::thread_m_axi_A_V_ARQOS() {
    m_axi_A_V_ARQOS = ap_const_lv4_0;
}

void load::thread_m_axi_A_V_ARREGION() {
    m_axi_A_V_ARREGION = ap_const_lv4_0;
}

void load::thread_m_axi_A_V_ARSIZE() {
    m_axi_A_V_ARSIZE = ap_const_lv3_0;
}

void load::thread_m_axi_A_V_ARUSER() {
    m_axi_A_V_ARUSER = ap_const_lv1_0;
}

void load::thread_m_axi_A_V_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(m_axi_A_V_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(m_axi_A_V_ARREADY.read(), ap_const_logic_1)))) {
        m_axi_A_V_ARVALID = ap_const_logic_1;
    } else {
        m_axi_A_V_ARVALID = ap_const_logic_0;
    }
}

void load::thread_m_axi_A_V_AWADDR() {
    m_axi_A_V_AWADDR = ap_const_lv32_0;
}

void load::thread_m_axi_A_V_AWBURST() {
    m_axi_A_V_AWBURST = ap_const_lv2_0;
}

void load::thread_m_axi_A_V_AWCACHE() {
    m_axi_A_V_AWCACHE = ap_const_lv4_0;
}

void load::thread_m_axi_A_V_AWID() {
    m_axi_A_V_AWID = ap_const_lv1_0;
}

void load::thread_m_axi_A_V_AWLEN() {
    m_axi_A_V_AWLEN = ap_const_lv32_0;
}

void load::thread_m_axi_A_V_AWLOCK() {
    m_axi_A_V_AWLOCK = ap_const_lv2_0;
}

void load::thread_m_axi_A_V_AWPROT() {
    m_axi_A_V_AWPROT = ap_const_lv3_0;
}

void load::thread_m_axi_A_V_AWQOS() {
    m_axi_A_V_AWQOS = ap_const_lv4_0;
}

void load::thread_m_axi_A_V_AWREGION() {
    m_axi_A_V_AWREGION = ap_const_lv4_0;
}

void load::thread_m_axi_A_V_AWSIZE() {
    m_axi_A_V_AWSIZE = ap_const_lv3_0;
}

void load::thread_m_axi_A_V_AWUSER() {
    m_axi_A_V_AWUSER = ap_const_lv1_0;
}

void load::thread_m_axi_A_V_AWVALID() {
    m_axi_A_V_AWVALID = ap_const_logic_0;
}

void load::thread_m_axi_A_V_BREADY() {
    m_axi_A_V_BREADY = ap_const_logic_0;
}

void load::thread_m_axi_A_V_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(m_axi_A_V_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(m_axi_A_V_RVALID.read(), ap_const_logic_1)))) {
        m_axi_A_V_RREADY = ap_const_logic_1;
    } else {
        m_axi_A_V_RREADY = ap_const_logic_0;
    }
}

void load::thread_m_axi_A_V_WDATA() {
    m_axi_A_V_WDATA = ap_const_lv512_lc_1;
}

void load::thread_m_axi_A_V_WID() {
    m_axi_A_V_WID = ap_const_lv1_0;
}

void load::thread_m_axi_A_V_WLAST() {
    m_axi_A_V_WLAST = ap_const_logic_0;
}

void load::thread_m_axi_A_V_WSTRB() {
    m_axi_A_V_WSTRB = ap_const_lv64_0;
}

void load::thread_m_axi_A_V_WUSER() {
    m_axi_A_V_WUSER = ap_const_lv1_0;
}

void load::thread_m_axi_A_V_WVALID() {
    m_axi_A_V_WVALID = ap_const_logic_0;
}

void load::thread_shl_ln1_fu_295_p3() {
    shl_ln1_fu_295_p3 = esl_concat<7,2>(add_ln17_fu_290_p2.read(), ap_const_lv2_0);
}

void load::thread_shl_ln_fu_221_p3() {
    shl_ln_fu_221_p3 = esl_concat<7,2>(add_ln10_fu_216_p2.read(), ap_const_lv2_0);
}

void load::thread_trunc_ln1_fu_243_p4() {
    trunc_ln1_fu_243_p4 = j.read().range(6, 4);
}

void load::thread_trunc_ln_fu_182_p4() {
    trunc_ln_fu_182_p4 = k.read().range(6, 4);
}

void load::thread_zext_ln10_1_fu_192_p1() {
    zext_ln10_1_fu_192_p1 = esl_zext<9,3>(trunc_ln_fu_182_p4.read());
}

void load::thread_zext_ln10_2_fu_212_p1() {
    zext_ln10_2_fu_212_p1 = esl_zext<7,5>(ii1_0_reg_158.read());
}

void load::thread_zext_ln10_fu_269_p1() {
    zext_ln10_fu_269_p1 = esl_zext<64,5>(ii1_0_reg_158.read());
}

void load::thread_zext_ln14_fu_256_p1() {
    zext_ln14_fu_256_p1 = esl_zext<27,26>(B_V_offset.read());
}

void load::thread_zext_ln17_1_fu_252_p1() {
    zext_ln17_1_fu_252_p1 = esl_zext<9,3>(trunc_ln1_fu_243_p4.read());
}

void load::thread_zext_ln17_2_fu_286_p1() {
    zext_ln17_2_fu_286_p1 = esl_zext<7,5>(kk3_0_reg_170.read());
}

void load::thread_zext_ln17_fu_327_p1() {
    zext_ln17_fu_327_p1 = esl_zext<64,5>(kk3_0_reg_170.read());
}

void load::thread_zext_ln180_1_fu_259_p1() {
    zext_ln180_1_fu_259_p1 = esl_zext<64,27>(add_ln180_reg_374.read());
}

void load::thread_zext_ln180_2_fu_308_p1() {
    zext_ln180_2_fu_308_p1 = esl_zext<27,9>(add_ln17_1_fu_303_p2.read());
}

void load::thread_zext_ln180_3_fu_317_p1() {
    zext_ln180_3_fu_317_p1 = esl_zext<64,27>(add_ln180_1_reg_408.read());
}

void load::thread_zext_ln180_fu_234_p1() {
    zext_ln180_fu_234_p1 = esl_zext<27,9>(add_ln10_1_fu_229_p2.read());
}

void load::thread_zext_ln7_fu_196_p1() {
    zext_ln7_fu_196_p1 = esl_zext<27,26>(A_V_offset.read());
}

void load::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(flag_read_read_fu_102_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, flag_read_read_fu_102_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln7_fu_200_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(m_axi_A_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(m_axi_A_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_274_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, flag_read_read_fu_102_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(m_axi_A_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(m_axi_A_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<21>) ("XXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

