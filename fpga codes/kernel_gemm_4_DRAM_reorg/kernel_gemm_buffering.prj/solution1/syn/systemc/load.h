// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _load_HH_
#define _load_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct load : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > flag;
    sc_in< sc_lv<7> > i;
    sc_in< sc_lv<7> > j;
    sc_in< sc_lv<7> > k;
    sc_out< sc_lv<4> > local_A_0_V_address0;
    sc_out< sc_logic > local_A_0_V_ce0;
    sc_out< sc_logic > local_A_0_V_we0;
    sc_out< sc_lv<512> > local_A_0_V_d0;
    sc_out< sc_lv<4> > local_B_V_address0;
    sc_out< sc_logic > local_B_V_ce0;
    sc_out< sc_logic > local_B_V_we0;
    sc_out< sc_lv<512> > local_B_V_d0;
    sc_out< sc_logic > m_axi_A_V_AWVALID;
    sc_in< sc_logic > m_axi_A_V_AWREADY;
    sc_out< sc_lv<32> > m_axi_A_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_A_V_AWID;
    sc_out< sc_lv<32> > m_axi_A_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_A_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_A_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_A_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_A_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_A_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_A_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_A_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_A_V_AWUSER;
    sc_out< sc_logic > m_axi_A_V_WVALID;
    sc_in< sc_logic > m_axi_A_V_WREADY;
    sc_out< sc_lv<512> > m_axi_A_V_WDATA;
    sc_out< sc_lv<64> > m_axi_A_V_WSTRB;
    sc_out< sc_logic > m_axi_A_V_WLAST;
    sc_out< sc_lv<1> > m_axi_A_V_WID;
    sc_out< sc_lv<1> > m_axi_A_V_WUSER;
    sc_out< sc_logic > m_axi_A_V_ARVALID;
    sc_in< sc_logic > m_axi_A_V_ARREADY;
    sc_out< sc_lv<32> > m_axi_A_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_A_V_ARID;
    sc_out< sc_lv<32> > m_axi_A_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_A_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_A_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_A_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_A_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_A_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_A_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_A_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_A_V_ARUSER;
    sc_in< sc_logic > m_axi_A_V_RVALID;
    sc_out< sc_logic > m_axi_A_V_RREADY;
    sc_in< sc_lv<512> > m_axi_A_V_RDATA;
    sc_in< sc_logic > m_axi_A_V_RLAST;
    sc_in< sc_lv<1> > m_axi_A_V_RID;
    sc_in< sc_lv<1> > m_axi_A_V_RUSER;
    sc_in< sc_lv<2> > m_axi_A_V_RRESP;
    sc_in< sc_logic > m_axi_A_V_BVALID;
    sc_out< sc_logic > m_axi_A_V_BREADY;
    sc_in< sc_lv<2> > m_axi_A_V_BRESP;
    sc_in< sc_lv<1> > m_axi_A_V_BID;
    sc_in< sc_lv<1> > m_axi_A_V_BUSER;
    sc_in< sc_lv<26> > A_V_offset;
    sc_in< sc_lv<26> > B_V_offset;


    // Module declarations
    load(sc_module_name name);
    SC_HAS_PROCESS(load);

    ~load();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<21> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > A_V_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > A_V_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_lv<1> > flag_read_read_fu_102_p2;
    sc_signal< sc_lv<9> > zext_ln10_1_fu_192_p1;
    sc_signal< sc_lv<9> > zext_ln10_1_reg_356;
    sc_signal< sc_lv<27> > zext_ln7_fu_196_p1;
    sc_signal< sc_lv<27> > zext_ln7_reg_361;
    sc_signal< sc_lv<5> > ii_fu_206_p2;
    sc_signal< sc_lv<5> > ii_reg_369;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<27> > add_ln180_fu_238_p2;
    sc_signal< sc_lv<27> > add_ln180_reg_374;
    sc_signal< sc_lv<1> > icmp_ln7_fu_200_p2;
    sc_signal< sc_lv<9> > zext_ln17_1_fu_252_p1;
    sc_signal< sc_lv<9> > zext_ln17_1_reg_379;
    sc_signal< sc_lv<27> > zext_ln14_fu_256_p1;
    sc_signal< sc_lv<27> > zext_ln14_reg_384;
    sc_signal< sc_lv<512> > B_V_addr_read_reg_395;
    sc_signal< sc_lv<5> > kk_fu_280_p2;
    sc_signal< sc_lv<5> > kk_reg_403;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<27> > add_ln180_1_fu_312_p2;
    sc_signal< sc_lv<27> > add_ln180_1_reg_408;
    sc_signal< sc_lv<1> > icmp_ln14_fu_274_p2;
    sc_signal< sc_lv<512> > B_V_addr_1_read_reg_419;
    sc_signal< sc_lv<5> > ii1_0_reg_158;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<5> > kk3_0_reg_170;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<64> > zext_ln10_fu_269_p1;
    sc_signal< sc_lv<64> > zext_ln17_fu_327_p1;
    sc_signal< sc_lv<64> > zext_ln180_1_fu_259_p1;
    sc_signal< sc_lv<64> > zext_ln180_3_fu_317_p1;
    sc_signal< sc_lv<3> > trunc_ln_fu_182_p4;
    sc_signal< sc_lv<7> > zext_ln10_2_fu_212_p1;
    sc_signal< sc_lv<7> > add_ln10_fu_216_p2;
    sc_signal< sc_lv<9> > shl_ln_fu_221_p3;
    sc_signal< sc_lv<9> > add_ln10_1_fu_229_p2;
    sc_signal< sc_lv<27> > zext_ln180_fu_234_p1;
    sc_signal< sc_lv<3> > trunc_ln1_fu_243_p4;
    sc_signal< sc_lv<7> > zext_ln17_2_fu_286_p1;
    sc_signal< sc_lv<7> > add_ln17_fu_290_p2;
    sc_signal< sc_lv<9> > shl_ln1_fu_295_p3;
    sc_signal< sc_lv<9> > add_ln17_1_fu_303_p2;
    sc_signal< sc_lv<27> > zext_ln180_2_fu_308_p1;
    sc_signal< sc_lv<21> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<21> ap_ST_fsm_state1;
    static const sc_lv<21> ap_ST_fsm_state2;
    static const sc_lv<21> ap_ST_fsm_state3;
    static const sc_lv<21> ap_ST_fsm_state4;
    static const sc_lv<21> ap_ST_fsm_state5;
    static const sc_lv<21> ap_ST_fsm_state6;
    static const sc_lv<21> ap_ST_fsm_state7;
    static const sc_lv<21> ap_ST_fsm_state8;
    static const sc_lv<21> ap_ST_fsm_state9;
    static const sc_lv<21> ap_ST_fsm_state10;
    static const sc_lv<21> ap_ST_fsm_state11;
    static const sc_lv<21> ap_ST_fsm_state12;
    static const sc_lv<21> ap_ST_fsm_state13;
    static const sc_lv<21> ap_ST_fsm_state14;
    static const sc_lv<21> ap_ST_fsm_state15;
    static const sc_lv<21> ap_ST_fsm_state16;
    static const sc_lv<21> ap_ST_fsm_state17;
    static const sc_lv<21> ap_ST_fsm_state18;
    static const sc_lv<21> ap_ST_fsm_state19;
    static const sc_lv<21> ap_ST_fsm_state20;
    static const sc_lv<21> ap_ST_fsm_state21;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<512> ap_const_lv512_lc_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_V_blk_n_AR();
    void thread_A_V_blk_n_R();
    void thread_add_ln10_1_fu_229_p2();
    void thread_add_ln10_fu_216_p2();
    void thread_add_ln17_1_fu_303_p2();
    void thread_add_ln17_fu_290_p2();
    void thread_add_ln180_1_fu_312_p2();
    void thread_add_ln180_fu_238_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_flag_read_read_fu_102_p2();
    void thread_icmp_ln14_fu_274_p2();
    void thread_icmp_ln7_fu_200_p2();
    void thread_ii_fu_206_p2();
    void thread_kk_fu_280_p2();
    void thread_local_A_0_V_address0();
    void thread_local_A_0_V_ce0();
    void thread_local_A_0_V_d0();
    void thread_local_A_0_V_we0();
    void thread_local_B_V_address0();
    void thread_local_B_V_ce0();
    void thread_local_B_V_d0();
    void thread_local_B_V_we0();
    void thread_m_axi_A_V_ARADDR();
    void thread_m_axi_A_V_ARBURST();
    void thread_m_axi_A_V_ARCACHE();
    void thread_m_axi_A_V_ARID();
    void thread_m_axi_A_V_ARLEN();
    void thread_m_axi_A_V_ARLOCK();
    void thread_m_axi_A_V_ARPROT();
    void thread_m_axi_A_V_ARQOS();
    void thread_m_axi_A_V_ARREGION();
    void thread_m_axi_A_V_ARSIZE();
    void thread_m_axi_A_V_ARUSER();
    void thread_m_axi_A_V_ARVALID();
    void thread_m_axi_A_V_AWADDR();
    void thread_m_axi_A_V_AWBURST();
    void thread_m_axi_A_V_AWCACHE();
    void thread_m_axi_A_V_AWID();
    void thread_m_axi_A_V_AWLEN();
    void thread_m_axi_A_V_AWLOCK();
    void thread_m_axi_A_V_AWPROT();
    void thread_m_axi_A_V_AWQOS();
    void thread_m_axi_A_V_AWREGION();
    void thread_m_axi_A_V_AWSIZE();
    void thread_m_axi_A_V_AWUSER();
    void thread_m_axi_A_V_AWVALID();
    void thread_m_axi_A_V_BREADY();
    void thread_m_axi_A_V_RREADY();
    void thread_m_axi_A_V_WDATA();
    void thread_m_axi_A_V_WID();
    void thread_m_axi_A_V_WLAST();
    void thread_m_axi_A_V_WSTRB();
    void thread_m_axi_A_V_WUSER();
    void thread_m_axi_A_V_WVALID();
    void thread_shl_ln1_fu_295_p3();
    void thread_shl_ln_fu_221_p3();
    void thread_trunc_ln1_fu_243_p4();
    void thread_trunc_ln_fu_182_p4();
    void thread_zext_ln10_1_fu_192_p1();
    void thread_zext_ln10_2_fu_212_p1();
    void thread_zext_ln10_fu_269_p1();
    void thread_zext_ln14_fu_256_p1();
    void thread_zext_ln17_1_fu_252_p1();
    void thread_zext_ln17_2_fu_286_p1();
    void thread_zext_ln17_fu_327_p1();
    void thread_zext_ln180_1_fu_259_p1();
    void thread_zext_ln180_2_fu_308_p1();
    void thread_zext_ln180_3_fu_317_p1();
    void thread_zext_ln180_fu_234_p1();
    void thread_zext_ln7_fu_196_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
