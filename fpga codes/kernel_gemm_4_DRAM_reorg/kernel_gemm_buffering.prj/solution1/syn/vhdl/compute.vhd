-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flag : IN STD_LOGIC_VECTOR (0 downto 0);
    local_A_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_A_0_V_ce0 : OUT STD_LOGIC;
    local_A_0_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    local_B_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_B_V_ce0 : OUT STD_LOGIC;
    local_B_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    local_C_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_C_V_ce0 : OUT STD_LOGIC;
    local_C_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    local_C_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_C_V_ce1 : OUT STD_LOGIC;
    local_C_V_we1 : OUT STD_LOGIC;
    local_C_V_d1 : OUT STD_LOGIC_VECTOR (511 downto 0);
    alpha : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of compute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_178 : STD_LOGIC_VECTOR (8 downto 0);
    signal kk_0_reg_189 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_0_reg_200 : STD_LOGIC_VECTOR (4 downto 0);
    signal flag_read_read_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_reg_1050_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1050_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_349_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln33_1_fu_375_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_1_reg_1059 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_1_reg_1059_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_1_reg_1059_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_1_reg_1059_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_1_reg_1059_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln33_fu_383_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln33_reg_1065 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal local_C_V_addr_reg_1075_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_fu_393_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln681_2_fu_478_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln681_2_reg_1086 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln681_fu_488_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln681_reg_1091 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln34_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln681_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln681_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_1_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_2_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_3_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_4_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_5_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_6_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_7_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_8_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_9_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_s_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_10_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_11_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_12_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_13_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_14_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln681_1_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln681_1_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1296 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_1_reg_1301 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_2_reg_1311 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_3_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_4_reg_1331 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_4_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_5_reg_1341 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_5_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_6_reg_1351 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_6_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_7_reg_1361 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_7_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_8_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_8_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_9_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_9_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_s_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_s_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_10_reg_1401 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_10_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_11_reg_1411 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_11_reg_1416 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_12_reg_1421 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_12_reg_1426 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_13_reg_1431 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_13_reg_1436 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_14_reg_1441 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_14_reg_1446 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1531 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_1_reg_1536 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_reg_1541 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_3_reg_1546 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_reg_1551 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_reg_1556 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_1561 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_reg_1566 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_reg_1571 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_9_reg_1576 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_s_reg_1581 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_10_reg_1586 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_11_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_12_reg_1596 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_13_reg_1601 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_14_reg_1606 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_phi_mux_kk_0_phi_fu_193_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln34_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_243_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_251_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_259_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_1_fu_369_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_fu_361_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln33_1_mid2_v_fu_399_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln33_fu_406_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln681_fu_418_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln681_1_fu_422_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln681_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_fu_436_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln681_1_fu_448_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_426_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln681_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln681_fu_454_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln681_2_fu_470_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln681_1_fu_462_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln681_2_fu_484_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln681_3_fu_494_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln681_1_fu_497_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln681_fu_503_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal bitcast_ln41_31_fu_1001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_30_fu_998_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_29_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_28_fu_992_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_27_fu_989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_26_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_25_fu_983_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_24_fu_980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_23_fu_977_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_22_fu_974_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_21_fu_971_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_20_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_19_fu_965_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_18_fu_962_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_17_fu_959_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_16_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_135 : BOOLEAN;
    signal ap_enable_state11_pp0_iter9_stage0 : BOOLEAN;
    signal ap_enable_operation_152 : BOOLEAN;
    signal ap_enable_state12_pp0_iter10_stage0 : BOOLEAN;
    signal ap_enable_operation_335 : BOOLEAN;
    signal ap_enable_state20_pp0_iter18_stage0 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component kernel_gemm_fadd_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_gemm_fmul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    kernel_gemm_fadd_bkb_U10 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_211_p0,
        din1 => tmp_s_reg_1296,
        ce => ap_const_logic_1,
        dout => grp_fu_211_p2);

    kernel_gemm_fadd_bkb_U11 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        din1 => tmp_3_1_reg_1306,
        ce => ap_const_logic_1,
        dout => grp_fu_215_p2);

    kernel_gemm_fadd_bkb_U12 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => tmp_3_2_reg_1316,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    kernel_gemm_fadd_bkb_U13 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_223_p0,
        din1 => tmp_3_3_reg_1326,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    kernel_gemm_fadd_bkb_U14 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_227_p0,
        din1 => tmp_3_4_reg_1336,
        ce => ap_const_logic_1,
        dout => grp_fu_227_p2);

    kernel_gemm_fadd_bkb_U15 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_231_p0,
        din1 => tmp_3_5_reg_1346,
        ce => ap_const_logic_1,
        dout => grp_fu_231_p2);

    kernel_gemm_fadd_bkb_U16 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_235_p0,
        din1 => tmp_3_6_reg_1356,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);

    kernel_gemm_fadd_bkb_U17 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_239_p0,
        din1 => tmp_3_7_reg_1366,
        ce => ap_const_logic_1,
        dout => grp_fu_239_p2);

    kernel_gemm_fadd_bkb_U18 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_243_p0,
        din1 => tmp_3_8_reg_1376,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    kernel_gemm_fadd_bkb_U19 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_247_p0,
        din1 => tmp_3_9_reg_1386,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p2);

    kernel_gemm_fadd_bkb_U20 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_251_p0,
        din1 => tmp_3_s_reg_1396,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    kernel_gemm_fadd_bkb_U21 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_255_p0,
        din1 => tmp_3_10_reg_1406,
        ce => ap_const_logic_1,
        dout => grp_fu_255_p2);

    kernel_gemm_fadd_bkb_U22 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_259_p0,
        din1 => tmp_3_11_reg_1416,
        ce => ap_const_logic_1,
        dout => grp_fu_259_p2);

    kernel_gemm_fadd_bkb_U23 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_263_p0,
        din1 => tmp_3_12_reg_1426,
        ce => ap_const_logic_1,
        dout => grp_fu_263_p2);

    kernel_gemm_fadd_bkb_U24 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_267_p0,
        din1 => tmp_3_13_reg_1436,
        ce => ap_const_logic_1,
        dout => grp_fu_267_p2);

    kernel_gemm_fadd_bkb_U25 : component kernel_gemm_fadd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_271_p0,
        din1 => tmp_3_14_reg_1446,
        ce => ap_const_logic_1,
        dout => grp_fu_271_p2);

    kernel_gemm_fmul_cud_U26 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p0,
        din1 => alpha,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);

    kernel_gemm_fmul_cud_U27 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_279_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_279_p2);

    kernel_gemm_fmul_cud_U28 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_283_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);

    kernel_gemm_fmul_cud_U29 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_287_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_287_p2);

    kernel_gemm_fmul_cud_U30 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_291_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_291_p2);

    kernel_gemm_fmul_cud_U31 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_295_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_295_p2);

    kernel_gemm_fmul_cud_U32 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_299_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_299_p2);

    kernel_gemm_fmul_cud_U33 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_303_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_303_p2);

    kernel_gemm_fmul_cud_U34 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_307_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_307_p2);

    kernel_gemm_fmul_cud_U35 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_311_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_311_p2);

    kernel_gemm_fmul_cud_U36 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_315_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    kernel_gemm_fmul_cud_U37 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_319_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_319_p2);

    kernel_gemm_fmul_cud_U38 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_323_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_323_p2);

    kernel_gemm_fmul_cud_U39 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_327_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    kernel_gemm_fmul_cud_U40 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_331_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_331_p2);

    kernel_gemm_fmul_cud_U41 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_335_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_335_p2);

    kernel_gemm_fmul_cud_U42 : component kernel_gemm_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1116,
        din1 => grp_fu_339_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_339_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (flag_read_read_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                elsif (((ap_start = ap_const_logic_1) and (flag_read_read_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ii_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (flag_read_read_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_0_reg_200 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ii_0_reg_200 <= ii_fu_393_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (flag_read_read_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_178 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_178 <= add_ln28_fu_349_p2;
            end if; 
        end if;
    end process;

    kk_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (flag_read_read_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kk_0_reg_189 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_1050 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kk_0_reg_189 <= select_ln33_1_reg_1059;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln28_reg_1050 <= icmp_ln28_fu_343_p2;
                icmp_ln28_reg_1050_pp0_iter1_reg <= icmp_ln28_reg_1050;
                local_C_V_addr_reg_1075_pp0_iter1_reg <= local_C_V_addr_reg_1075;
                select_ln33_1_reg_1059_pp0_iter1_reg <= select_ln33_1_reg_1059;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln28_reg_1050_pp0_iter10_reg <= icmp_ln28_reg_1050_pp0_iter9_reg;
                icmp_ln28_reg_1050_pp0_iter11_reg <= icmp_ln28_reg_1050_pp0_iter10_reg;
                icmp_ln28_reg_1050_pp0_iter12_reg <= icmp_ln28_reg_1050_pp0_iter11_reg;
                icmp_ln28_reg_1050_pp0_iter13_reg <= icmp_ln28_reg_1050_pp0_iter12_reg;
                icmp_ln28_reg_1050_pp0_iter14_reg <= icmp_ln28_reg_1050_pp0_iter13_reg;
                icmp_ln28_reg_1050_pp0_iter15_reg <= icmp_ln28_reg_1050_pp0_iter14_reg;
                icmp_ln28_reg_1050_pp0_iter16_reg <= icmp_ln28_reg_1050_pp0_iter15_reg;
                icmp_ln28_reg_1050_pp0_iter17_reg <= icmp_ln28_reg_1050_pp0_iter16_reg;
                icmp_ln28_reg_1050_pp0_iter2_reg <= icmp_ln28_reg_1050_pp0_iter1_reg;
                icmp_ln28_reg_1050_pp0_iter3_reg <= icmp_ln28_reg_1050_pp0_iter2_reg;
                icmp_ln28_reg_1050_pp0_iter4_reg <= icmp_ln28_reg_1050_pp0_iter3_reg;
                icmp_ln28_reg_1050_pp0_iter5_reg <= icmp_ln28_reg_1050_pp0_iter4_reg;
                icmp_ln28_reg_1050_pp0_iter6_reg <= icmp_ln28_reg_1050_pp0_iter5_reg;
                icmp_ln28_reg_1050_pp0_iter7_reg <= icmp_ln28_reg_1050_pp0_iter6_reg;
                icmp_ln28_reg_1050_pp0_iter8_reg <= icmp_ln28_reg_1050_pp0_iter7_reg;
                icmp_ln28_reg_1050_pp0_iter9_reg <= icmp_ln28_reg_1050_pp0_iter8_reg;
                local_C_V_addr_reg_1075_pp0_iter10_reg <= local_C_V_addr_reg_1075_pp0_iter9_reg;
                local_C_V_addr_reg_1075_pp0_iter11_reg <= local_C_V_addr_reg_1075_pp0_iter10_reg;
                local_C_V_addr_reg_1075_pp0_iter12_reg <= local_C_V_addr_reg_1075_pp0_iter11_reg;
                local_C_V_addr_reg_1075_pp0_iter13_reg <= local_C_V_addr_reg_1075_pp0_iter12_reg;
                local_C_V_addr_reg_1075_pp0_iter14_reg <= local_C_V_addr_reg_1075_pp0_iter13_reg;
                local_C_V_addr_reg_1075_pp0_iter15_reg <= local_C_V_addr_reg_1075_pp0_iter14_reg;
                local_C_V_addr_reg_1075_pp0_iter16_reg <= local_C_V_addr_reg_1075_pp0_iter15_reg;
                local_C_V_addr_reg_1075_pp0_iter17_reg <= local_C_V_addr_reg_1075_pp0_iter16_reg;
                local_C_V_addr_reg_1075_pp0_iter2_reg <= local_C_V_addr_reg_1075_pp0_iter1_reg;
                local_C_V_addr_reg_1075_pp0_iter3_reg <= local_C_V_addr_reg_1075_pp0_iter2_reg;
                local_C_V_addr_reg_1075_pp0_iter4_reg <= local_C_V_addr_reg_1075_pp0_iter3_reg;
                local_C_V_addr_reg_1075_pp0_iter5_reg <= local_C_V_addr_reg_1075_pp0_iter4_reg;
                local_C_V_addr_reg_1075_pp0_iter6_reg <= local_C_V_addr_reg_1075_pp0_iter5_reg;
                local_C_V_addr_reg_1075_pp0_iter7_reg <= local_C_V_addr_reg_1075_pp0_iter6_reg;
                local_C_V_addr_reg_1075_pp0_iter8_reg <= local_C_V_addr_reg_1075_pp0_iter7_reg;
                local_C_V_addr_reg_1075_pp0_iter9_reg <= local_C_V_addr_reg_1075_pp0_iter8_reg;
                select_ln33_1_reg_1059_pp0_iter2_reg <= select_ln33_1_reg_1059_pp0_iter1_reg;
                select_ln33_1_reg_1059_pp0_iter3_reg <= select_ln33_1_reg_1059_pp0_iter2_reg;
                select_ln33_1_reg_1059_pp0_iter4_reg <= select_ln33_1_reg_1059_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                local_C_V_addr_reg_1075 <= zext_ln34_fu_387_p1(4 - 1 downto 0);
                trunc_ln33_reg_1065 <= trunc_ln33_fu_383_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_1050 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln681_reg_1091 <= lshr_ln681_fu_488_p2;
                    sub_ln681_2_reg_1086(9 downto 1) <= sub_ln681_2_fu_478_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_1050_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_2_10_reg_1186 <= local_B_V_q0(383 downto 352);
                p_Result_2_11_reg_1191 <= local_B_V_q0(415 downto 384);
                p_Result_2_12_reg_1196 <= local_B_V_q0(447 downto 416);
                p_Result_2_13_reg_1201 <= local_B_V_q0(479 downto 448);
                p_Result_2_14_reg_1206 <= local_B_V_q0(511 downto 480);
                p_Result_2_1_reg_1136 <= local_B_V_q0(63 downto 32);
                p_Result_2_2_reg_1141 <= local_B_V_q0(95 downto 64);
                p_Result_2_3_reg_1146 <= local_B_V_q0(127 downto 96);
                p_Result_2_4_reg_1151 <= local_B_V_q0(159 downto 128);
                p_Result_2_5_reg_1156 <= local_B_V_q0(191 downto 160);
                p_Result_2_6_reg_1161 <= local_B_V_q0(223 downto 192);
                p_Result_2_7_reg_1166 <= local_B_V_q0(255 downto 224);
                p_Result_2_8_reg_1171 <= local_B_V_q0(287 downto 256);
                p_Result_2_9_reg_1176 <= local_B_V_q0(319 downto 288);
                p_Result_2_s_reg_1181 <= local_B_V_q0(351 downto 320);
                tmp_2_reg_1116 <= grp_fu_275_p2;
                trunc_ln681_reg_1111 <= trunc_ln681_fu_520_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_1050_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_3_10_reg_1401 <= local_C_V_q0(383 downto 352);
                p_Result_3_11_reg_1411 <= local_C_V_q0(415 downto 384);
                p_Result_3_12_reg_1421 <= local_C_V_q0(447 downto 416);
                p_Result_3_13_reg_1431 <= local_C_V_q0(479 downto 448);
                p_Result_3_14_reg_1441 <= local_C_V_q0(511 downto 480);
                p_Result_3_1_reg_1301 <= local_C_V_q0(63 downto 32);
                p_Result_3_2_reg_1311 <= local_C_V_q0(95 downto 64);
                p_Result_3_3_reg_1321 <= local_C_V_q0(127 downto 96);
                p_Result_3_4_reg_1331 <= local_C_V_q0(159 downto 128);
                p_Result_3_5_reg_1341 <= local_C_V_q0(191 downto 160);
                p_Result_3_6_reg_1351 <= local_C_V_q0(223 downto 192);
                p_Result_3_7_reg_1361 <= local_C_V_q0(255 downto 224);
                p_Result_3_8_reg_1371 <= local_C_V_q0(287 downto 256);
                p_Result_3_9_reg_1381 <= local_C_V_q0(319 downto 288);
                p_Result_3_s_reg_1391 <= local_C_V_q0(351 downto 320);
                tmp_3_10_reg_1406 <= grp_fu_323_p2;
                tmp_3_11_reg_1416 <= grp_fu_327_p2;
                tmp_3_12_reg_1426 <= grp_fu_331_p2;
                tmp_3_13_reg_1436 <= grp_fu_335_p2;
                tmp_3_14_reg_1446 <= grp_fu_339_p2;
                tmp_3_1_reg_1306 <= grp_fu_283_p2;
                tmp_3_2_reg_1316 <= grp_fu_287_p2;
                tmp_3_3_reg_1326 <= grp_fu_291_p2;
                tmp_3_4_reg_1336 <= grp_fu_295_p2;
                tmp_3_5_reg_1346 <= grp_fu_299_p2;
                tmp_3_6_reg_1356 <= grp_fu_303_p2;
                tmp_3_7_reg_1366 <= grp_fu_307_p2;
                tmp_3_8_reg_1376 <= grp_fu_311_p2;
                tmp_3_9_reg_1386 <= grp_fu_315_p2;
                tmp_3_s_reg_1396 <= grp_fu_319_p2;
                tmp_s_reg_1296 <= grp_fu_279_p2;
                trunc_ln681_1_reg_1291 <= trunc_ln681_1_fu_738_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln33_1_reg_1059 <= select_ln33_1_fu_375_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_1050_pp0_iter16_reg = ap_const_lv1_0))) then
                tmp_4_10_reg_1586 <= grp_fu_255_p2;
                tmp_4_11_reg_1591 <= grp_fu_259_p2;
                tmp_4_12_reg_1596 <= grp_fu_263_p2;
                tmp_4_13_reg_1601 <= grp_fu_267_p2;
                tmp_4_14_reg_1606 <= grp_fu_271_p2;
                tmp_4_1_reg_1536 <= grp_fu_215_p2;
                tmp_4_2_reg_1541 <= grp_fu_219_p2;
                tmp_4_3_reg_1546 <= grp_fu_223_p2;
                tmp_4_4_reg_1551 <= grp_fu_227_p2;
                tmp_4_5_reg_1556 <= grp_fu_231_p2;
                tmp_4_6_reg_1561 <= grp_fu_235_p2;
                tmp_4_7_reg_1566 <= grp_fu_239_p2;
                tmp_4_8_reg_1571 <= grp_fu_243_p2;
                tmp_4_9_reg_1576 <= grp_fu_247_p2;
                tmp_4_reg_1531 <= grp_fu_211_p2;
                tmp_4_s_reg_1581 <= grp_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_1050_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln34_reg_1096 <= trunc_ln34_fu_508_p1;
            end if;
        end if;
    end process;
    sub_ln681_2_reg_1086(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, flag_read_read_fu_130_p2, icmp_ln28_fu_343_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (flag_read_read_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (flag_read_read_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln28_fu_343_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln28_fu_343_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln28_1_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_kk_0_phi_fu_193_p4));
    add_ln28_fu_349_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_178) + unsigned(ap_const_lv9_1));
    and_ln681_fu_503_p2 <= (lshr_ln681_reg_1091 and lshr_ln681_1_fu_497_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state21 <= ap_CS_fsm(2);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln28_fu_343_p2)
    begin
        if ((icmp_ln28_fu_343_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_135_assign_proc : process(icmp_ln28_reg_1050_pp0_iter8_reg)
    begin
                ap_enable_operation_135 <= (icmp_ln28_reg_1050_pp0_iter8_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_152_assign_proc : process(icmp_ln28_reg_1050_pp0_iter9_reg)
    begin
                ap_enable_operation_152 <= (icmp_ln28_reg_1050_pp0_iter9_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_335_assign_proc : process(icmp_ln28_reg_1050_pp0_iter17_reg)
    begin
                ap_enable_operation_335 <= (icmp_ln28_reg_1050_pp0_iter17_reg = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state11_pp0_iter9_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9)
    begin
                ap_enable_state11_pp0_iter9_stage0 <= ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state12_pp0_iter10_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10)
    begin
                ap_enable_state12_pp0_iter10_stage0 <= ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state20_pp0_iter18_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18)
    begin
                ap_enable_state20_pp0_iter18_stage0 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_kk_0_phi_fu_193_p4_assign_proc : process(kk_0_reg_189, icmp_ln28_reg_1050, ap_CS_fsm_pp0_stage0, select_ln33_1_reg_1059, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln28_reg_1050 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_kk_0_phi_fu_193_p4 <= select_ln33_1_reg_1059;
        else 
            ap_phi_mux_kk_0_phi_fu_193_p4 <= kk_0_reg_189;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln41_16_fu_956_p1 <= tmp_4_reg_1531;
    bitcast_ln41_17_fu_959_p1 <= tmp_4_1_reg_1536;
    bitcast_ln41_18_fu_962_p1 <= tmp_4_2_reg_1541;
    bitcast_ln41_19_fu_965_p1 <= tmp_4_3_reg_1546;
    bitcast_ln41_20_fu_968_p1 <= tmp_4_4_reg_1551;
    bitcast_ln41_21_fu_971_p1 <= tmp_4_5_reg_1556;
    bitcast_ln41_22_fu_974_p1 <= tmp_4_6_reg_1561;
    bitcast_ln41_23_fu_977_p1 <= tmp_4_7_reg_1566;
    bitcast_ln41_24_fu_980_p1 <= tmp_4_8_reg_1571;
    bitcast_ln41_25_fu_983_p1 <= tmp_4_9_reg_1576;
    bitcast_ln41_26_fu_986_p1 <= tmp_4_s_reg_1581;
    bitcast_ln41_27_fu_989_p1 <= tmp_4_10_reg_1586;
    bitcast_ln41_28_fu_992_p1 <= tmp_4_11_reg_1591;
    bitcast_ln41_29_fu_995_p1 <= tmp_4_12_reg_1596;
    bitcast_ln41_30_fu_998_p1 <= tmp_4_13_reg_1601;
    bitcast_ln41_31_fu_1001_p1 <= tmp_4_14_reg_1606;
    flag_read_read_fu_130_p2 <= flag;
    grp_fu_211_p0 <= trunc_ln681_1_reg_1291;
    grp_fu_215_p0 <= p_Result_3_1_reg_1301;
    grp_fu_219_p0 <= p_Result_3_2_reg_1311;
    grp_fu_223_p0 <= p_Result_3_3_reg_1321;
    grp_fu_227_p0 <= p_Result_3_4_reg_1331;
    grp_fu_231_p0 <= p_Result_3_5_reg_1341;
    grp_fu_235_p0 <= p_Result_3_6_reg_1351;
    grp_fu_239_p0 <= p_Result_3_7_reg_1361;
    grp_fu_243_p0 <= p_Result_3_8_reg_1371;
    grp_fu_247_p0 <= p_Result_3_9_reg_1381;
    grp_fu_251_p0 <= p_Result_3_s_reg_1391;
    grp_fu_255_p0 <= p_Result_3_10_reg_1401;
    grp_fu_259_p0 <= p_Result_3_11_reg_1411;
    grp_fu_263_p0 <= p_Result_3_12_reg_1421;
    grp_fu_267_p0 <= p_Result_3_13_reg_1431;
    grp_fu_271_p0 <= p_Result_3_14_reg_1441;
    grp_fu_275_p0 <= trunc_ln34_reg_1096;
    grp_fu_279_p1 <= trunc_ln681_reg_1111;
    grp_fu_283_p1 <= p_Result_2_1_reg_1136;
    grp_fu_287_p1 <= p_Result_2_2_reg_1141;
    grp_fu_291_p1 <= p_Result_2_3_reg_1146;
    grp_fu_295_p1 <= p_Result_2_4_reg_1151;
    grp_fu_299_p1 <= p_Result_2_5_reg_1156;
    grp_fu_303_p1 <= p_Result_2_6_reg_1161;
    grp_fu_307_p1 <= p_Result_2_7_reg_1166;
    grp_fu_311_p1 <= p_Result_2_8_reg_1171;
    grp_fu_315_p1 <= p_Result_2_9_reg_1176;
    grp_fu_319_p1 <= p_Result_2_s_reg_1181;
    grp_fu_323_p1 <= p_Result_2_10_reg_1186;
    grp_fu_327_p1 <= p_Result_2_11_reg_1191;
    grp_fu_331_p1 <= p_Result_2_12_reg_1196;
    grp_fu_335_p1 <= p_Result_2_13_reg_1201;
    grp_fu_339_p1 <= p_Result_2_14_reg_1206;
    icmp_ln28_fu_343_p2 <= "1" when (indvar_flatten_reg_178 = ap_const_lv9_100) else "0";
    icmp_ln29_fu_355_p2 <= "1" when (ii_0_reg_200 = ap_const_lv5_10) else "0";
    icmp_ln681_fu_412_p2 <= "1" when (unsigned(zext_ln33_1_mid2_v_fu_399_p3) > unsigned(or_ln33_fu_406_p2)) else "0";
    ii_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln33_fu_361_p3));
    local_A_0_V_address0 <= zext_ln34_fu_387_p1(4 - 1 downto 0);

    local_A_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            local_A_0_V_ce0 <= ap_const_logic_1;
        else 
            local_A_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_V_address0 <= zext_ln33_fu_516_p1(4 - 1 downto 0);

    local_B_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            local_B_V_ce0 <= ap_const_logic_1;
        else 
            local_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_C_V_address0 <= local_C_V_addr_reg_1075_pp0_iter8_reg;
    local_C_V_address1 <= local_C_V_addr_reg_1075_pp0_iter17_reg;

    local_C_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            local_C_V_ce0 <= ap_const_logic_1;
        else 
            local_C_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            local_C_V_ce1 <= ap_const_logic_1;
        else 
            local_C_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    local_C_V_d1 <= (((((((((((((((bitcast_ln41_31_fu_1001_p1 & bitcast_ln41_30_fu_998_p1) & bitcast_ln41_29_fu_995_p1) & bitcast_ln41_28_fu_992_p1) & bitcast_ln41_27_fu_989_p1) & bitcast_ln41_26_fu_986_p1) & bitcast_ln41_25_fu_983_p1) & bitcast_ln41_24_fu_980_p1) & bitcast_ln41_23_fu_977_p1) & bitcast_ln41_22_fu_974_p1) & bitcast_ln41_21_fu_971_p1) & bitcast_ln41_20_fu_968_p1) & bitcast_ln41_19_fu_965_p1) & bitcast_ln41_18_fu_962_p1) & bitcast_ln41_17_fu_959_p1) & bitcast_ln41_16_fu_956_p1);

    local_C_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln28_reg_1050_pp0_iter17_reg, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln28_reg_1050_pp0_iter17_reg = ap_const_lv1_0))) then 
            local_C_V_we1 <= ap_const_logic_1;
        else 
            local_C_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln681_1_fu_497_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln681_3_fu_494_p1(31-1 downto 0)))));
    lshr_ln681_fu_488_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_1_fu_462_p3),to_integer(unsigned('0' & zext_ln681_2_fu_484_p1(31-1 downto 0)))));
    or_ln33_fu_406_p2 <= (zext_ln33_1_mid2_v_fu_399_p3 or ap_const_lv9_1F);
    select_ln33_1_fu_375_p3 <= 
        add_ln28_1_fu_369_p2 when (icmp_ln29_fu_355_p2(0) = '1') else 
        ap_phi_mux_kk_0_phi_fu_193_p4;
    select_ln33_fu_361_p3 <= 
        ap_const_lv5_0 when (icmp_ln29_fu_355_p2(0) = '1') else 
        ii_0_reg_200;
    select_ln681_1_fu_462_p3 <= 
        tmp_fu_426_p4 when (icmp_ln681_fu_412_p2(0) = '1') else 
        local_A_0_V_q0;
    select_ln681_2_fu_470_p3 <= 
        xor_ln681_fu_442_p2 when (icmp_ln681_fu_412_p2(0) = '1') else 
        zext_ln681_fu_418_p1;
    select_ln681_fu_454_p3 <= 
        sub_ln681_fu_436_p2 when (icmp_ln681_fu_412_p2(0) = '1') else 
        sub_ln681_1_fu_448_p2;
    sub_ln681_1_fu_448_p2 <= std_logic_vector(unsigned(zext_ln681_1_fu_422_p1) - unsigned(zext_ln681_fu_418_p1));
    sub_ln681_2_fu_478_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln681_fu_454_p3));
    sub_ln681_fu_436_p2 <= std_logic_vector(unsigned(zext_ln681_fu_418_p1) - unsigned(zext_ln681_1_fu_422_p1));
    
    tmp_fu_426_p4_proc : process(local_A_0_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_fu_426_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := local_A_0_V_q0;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_fu_426_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_fu_426_p4_i) := local_A_0_V_q0(512-1-tmp_fu_426_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_426_p4 <= resvalue(512-1 downto 0);
    end process;

    trunc_ln33_fu_383_p1 <= select_ln33_1_fu_375_p3(4 - 1 downto 0);
    trunc_ln34_fu_508_p1 <= and_ln681_fu_503_p2(32 - 1 downto 0);
    trunc_ln681_1_fu_738_p1 <= local_C_V_q0(32 - 1 downto 0);
    trunc_ln681_fu_520_p1 <= local_B_V_q0(32 - 1 downto 0);
    xor_ln681_fu_442_p2 <= (zext_ln681_fu_418_p1 xor ap_const_lv10_1FF);
    zext_ln33_1_mid2_v_fu_399_p3 <= (trunc_ln33_reg_1065 & ap_const_lv5_0);
    zext_ln33_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_1_reg_1059_pp0_iter4_reg),64));
    zext_ln34_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_fu_361_p3),64));
    zext_ln681_1_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln33_fu_406_p2),10));
    zext_ln681_2_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_2_fu_470_p3),512));
    zext_ln681_3_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_2_reg_1086),512));
    zext_ln681_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln33_1_mid2_v_fu_399_p3),10));
end behav;
